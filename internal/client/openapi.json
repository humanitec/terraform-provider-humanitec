{
  "openapi": "3.0.0",
  "info": {
    "title": "Humanitec API",
    "version": "0.15.0",
    "description": "# Introduction\nThe *Humanitec API* allows you to automate and integrate Humanitec into your developer and operational workflows.\nThe API is a REST based API. It is based around a set of concepts:\n\n* Core\n* External Resources\n* Sets and Deltas\n\n## Authentication\nAlmost all requests made to the Humanitec API require Authentication. Humanitec provides 2 ways of authenticating with the API: `Bearer` and `JWT`.\n\n### Bearer Authentication\nThis form of authentication makes use of a **static token**. It is intended to be used when machines interact with the Humanitec API. Bearer tokens should be used for very narrow purposes. This allows for the token to be revoked if it is compromised and so limit the scope of exposure.\nNew Bearer tokens can be obtained via the UI:\n\n1. Log into Humanitec at https://app.humanitec.io\n1. Go to **Organization Settings**\n1. Select **API tokens**\n1. Enter a *name* for the new token and click on **Generate new token**\n\nThe token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_TOKEN`, the request could be made as follows:\n\n```\n    curl -H 'Authorization: Bearer HUMANITEC_TOKEN' https://api.humanitec.io/orgs/my-org/apps\n```\n\n### JWT Authentication\nThis form of authentication makes use of a **JSON Web Token (JWT)**. It is intended to be used when humans interact with the Humanitec API. JWTs expire after a period of time. This means that a new JWT will need to be generated regularly. This makes them well suited to working in short sessions, but not for automation. (See Bearer Authentication.)\nThe token is passed to the API via the `Authorization` header. Assuming the issued token is `HUMANITEC_JWT`, the request could be made as follows:\n\n```\n    curl -H 'Authorization: JWT HUMANITEC_JWT' https://api.humanitec.io/orgs/my-org/apps\n```\n\n## Content Types\nAll of the Humanitec API unless explicitly only accepts content types of `application/json` and will always return valid `application/json` or an empty response.\n\n## Response Codes\n### Success\nAny response code in the `2xx` range should be regarded as success.\n\n| **Code** | **Meaning** |\n| --- | --- |\n| `200` | Success |\n| `201` | Success (In future, `201` will be replaced by `200`) |\n| `204` | Success, but no content in response |\n\n_Note: We plan to simplify the interface by replacing 201 with 200 status codes._\n\n### Failure\nAny response code in the `4xx` should be regarded as an error which can be rectified by the client. `5xx` error codes indicate errors that cannot be corrected by the client.\n\n| **Code** | **Meaning** |\n| --- | --- |\n| `400` | General error. (Body will contain details) |\n| `401` | Attempt to access protected resource without `Authorization` Header. |\n| `403` | The `Bearer` or `JWT` does not grant access to the requested resource. |\n| `404` | Resource not found. |\n| `405` | Method not allowed |\n| `409` | Conflict. Usually indicated a resource with that ID already exists. |\n| `422` | Unprocessable Entity. The body was not valid JSON, was empty or contained an object different from what was expected. |\n| `429` | Too many requests - request rate limit has been reached. |\n| `500` | Internal Error. If it occurs repeatedly, contact support. |\n",
    "contact": {
      "name": "API Support",
      "email": "apiteam@humanitec.com"
    },
    "x-logo": {
      "url": "humanitec-logo.png",
      "altText": "Humanitec logo"
    }
  },
  "paths": {
    "/orgs/{orgId}/apps": {
      "get": {
        "tags": [
          "public",
          "Application",
          "id-949365b7c53ea85f"
        ],
        "summary": "List all Applications in an Organization.",
        "description": "Listing or lists of all Applications that exist within a specific Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Possibly empty list of Applications.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "created_at": "2020-06-15T09:32:03Z",
                    "created_by": "a-user@example.com",
                    "envs": {
                      "id": "development",
                      "name": "Development",
                      "type": "development"
                    },
                    "id": "my-app",
                    "name": "My Awesome App"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Application",
          "id-ad506ff9fc647b56"
        ],
        "summary": "Add a new Application to an Organization",
        "description": "Creates a new Application, then adds it to the specified Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request ID and Human-friendly name of the Application.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Application requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "example": {
                  "created_at": "2020-06-15T09:32:03Z",
                  "created_by": "a-user@example.com",
                  "envs": {
                    "id": "development",
                    "name": "Development",
                    "type": "development"
                  },
                  "id": "my-app",
                  "name": "My Awesome App"
                }
              }
            }
          },
          "401": {
            "description": "The Authorization header was not present or invalid.\n\n"
          },
          "409": {
            "description": "The supplied `id` clashes with an existing Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}": {
      "get": {
        "tags": [
          "public",
          "Application",
          "id-c6132a0703cd1492"
        ],
        "summary": "Get an existing Application",
        "description": "Gets a specific Application in the specified Organization by ID.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Application requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                },
                "example": {
                  "created_at": "2020-06-15T09:32:03Z",
                  "created_by": "a-user@example.com",
                  "envs": {
                    "id": "development",
                    "name": "Development",
                    "type": "development"
                  },
                  "id": "my-app",
                  "name": "My Awesome App"
                }
              }
            }
          },
          "404": {
            "description": "No Application with ID `appId` in Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Application",
          "id-abf24f620aa16e0e"
        ],
        "summary": "Delete an Application",
        "description": "Deleting an Application will also delete everything associated with it. This includes Environments, Deployment history on those Environments, and any shared values and secrets associated.\n\n_Deletions are currently irreversible._",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Application Successfully deleted.\n\n"
          },
          "401": {
            "description": "The Authorization header was not present or invalid.\n\n"
          },
          "404": {
            "description": "No Application with `id` in Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs": {
      "get": {
        "tags": [
          "public",
          "Environment",
          "id-22c6624fe22c6585"
        ],
        "summary": "List all Environments.",
        "description": "Lists all of the Environments in the Application.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Environments associated with an Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {}
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Environment",
          "id-91a74844aa8343db"
        ],
        "summary": "Add a new Environment to an Application.",
        "description": "Creates a new Environment of the specified Type and associates it with the Application specified by `appId`.\n\nThe Environment is also initialized to the **current or past state of Deployment in another Environment**. This ensures that every Environment is derived from a previously known state. This means it is not possible to create a new Environment for an Application until at least one Deployment has occurred. (The Deployment does not have to be successful.)\n\nThe Type of the Environment must be already defined in the Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ID, Name, Type, and Deployment the Environment will be derived from.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentDefinitionRequest"
              },
              "example": {
                "from_deploy_id": "e80db1a327208c1a",
                "id": "awesome-feature",
                "name": "Awesome Feature Dev",
                "namespace": "awesome-namespace",
                "type": "development"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                },
                "example": {}
              }
            }
          },
          "400": {
            "description": "The supplied `id` is an invalid ID or a required field is missing.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Application with `id` in Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "The supplied `id` clashes with an existing Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}": {
      "get": {
        "tags": [
          "public",
          "Environment",
          "id-f71e166af2cd4b27"
        ],
        "summary": "Get a specific Environment.",
        "description": "Gets a specific Environment in an Application.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Environment requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "No Environment with `id` in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Environment",
          "id-71d4188b68b1adae"
        ],
        "summary": "Delete a specific Environment.",
        "description": "Deletes a specific Environment in an Application.\n\nDeleting an Environment will also delete the Deployment history of the Environment.\n\n_Deletions are currently irreversible._",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Environment successfully deleted.\n\n"
          },
          "400": {
            "description": "Attempt to delete the last Environment in an Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Environment with `envId` in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys": {
      "get": {
        "tags": [
          "public",
          "Deployment",
          "id-b44fb6d383d8b31e"
        ],
        "summary": "List Deployments in an Environment.",
        "description": "List all of the Deployments that have been carried out in the current Environment. Deployments are returned with the newest first.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Deployments.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeploymentResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {}
                ]
              }
            }
          },
          "404": {
            "description": "No Environment with `id` in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Deployment",
          "id-b389a3e9c7c22291"
        ],
        "summary": "Start a new Deployment.",
        "description": "At Humanitec, Deployments are defined as changes to the state of the Environment. The state can be changed by defining a set of desired changes to the current state via a Deployment Delta or by resetting the current state after a previous Deployment. (See Environment Rebase.) Both types of changes can be combined into a single Deployment during which the Delta is applied to the Rebased state.\n\nWhen specifying a Delta, a Delta ID must be used. That Delta must have been committed to the Delta store prior to the Deployment.\n\nA Set ID can also be defined in the deployment to force the state of the environment to a particular state. This will be ignored if the Delta is specified.\n\n**NOTE:**\n\nDirectly setting a `set_id` in a deployment is not recommended as it will not record history of where the set came from. If the intention is to replicate an existing environment, use the environment rebasing approach described above.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Delta describing the change to the Environment and a comment.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeploymentRequest"
              },
              "example": {
                "comment": "Updated version of module-one to v0.3.1",
                "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A description of the Deployment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error because the Delta is non-existent or incompatible with the state of the Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Environment with `id` in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}": {
      "get": {
        "tags": [
          "public",
          "Deployment",
          "id-da2202dfc8b9fef1"
        ],
        "summary": "Get a specific Deployment.",
        "description": "Gets a specific Deployment in an Application and an Environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployId",
            "in": "path",
            "description": "The Deployment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Deployment requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentResponse"
                },
                "example": {}
              }
            }
          },
          "404": {
            "description": "No Deployment with `deployId` in Application and Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/deploys/{deployId}/errors": {
      "get": {
        "tags": [
          "public",
          "Deployment",
          "id-3e4c54b794c1b6a4"
        ],
        "summary": "List errors that occurred in a Deployment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployId",
            "in": "path",
            "description": "The Deployment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A List of deployment errors, could be empty.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeploymentErrorResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "code": "CLD-001",
                    "message": "Incorrect credentials",
                    "object_id": "my-service",
                    "scope": "workload"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/from_deploy_id": {
      "put": {
        "tags": [
          "public",
          "Environment",
          "id-94b512de88ff6cab"
        ],
        "summary": "Rebase to a different Deployment.",
        "description": "Rebasing an Environment means that the next Deployment to the Environment will be based on the Deployment specified in the rebase rather than the last one in the Environment. The Deployment to rebase to can either be current or a previous Deployment. The Deployment can be from any Environment of the same Application.\n\n_Running code will only be affected on the next Deployment to the Environment._\n\nCommon use cases for rebasing an Environment:\n\n* _Rollback_: Rebasing to a previous Deployment in the current Environment and then Deploying without additional changes will execute a rollback to the previous Deployment state.\n\n* _Clone_: Rebasing to the current Deployment in a different Environment and then deploying without additional changes will clone all of the configuration of the other Environment into the current one. (NOTE: External Resources will not be cloned in the process - the current External Resources of the Environment will remain unchanged and will be used by the deployed Application in the Environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Deployment ID to rebase to.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Rebase successful.\n\n"
          },
          "400": {
            "description": "No Deployment with ID in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Environment with ID Application and Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/env-types": {
      "get": {
        "tags": [
          "public",
          "EnvironmentType",
          "id-cf934d36c6ece345"
        ],
        "summary": "List all Environment Types",
        "description": "Lists all Environment Types in an Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Environment Types.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentTypeResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "EnvironmentType",
          "id-b8dbdeb2144c3541"
        ],
        "summary": "Add a new Environment Type",
        "description": "Adds a new Environment Type to an Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Environment Type.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Environment Type requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "The supplied `id` is not a valid ID or a required field is missing.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "The Authorization header was not present or invalid.\n\n"
          },
          "409": {
            "description": "The supplied `id` clashes with an existing Environment Type.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/env-types/{envTypeId}": {
      "get": {
        "tags": [
          "public",
          "EnvironmentType",
          "id-fe2bf6668207aaf7"
        ],
        "summary": "Get an Environment Type",
        "description": "Gets a specific Environment Type within an Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envTypeId",
            "in": "path",
            "description": "ID of the Environment Type.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Environment Type requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentTypeResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Environment Type with `id` in Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "EnvironmentType",
          "id-93a00866ac06078b"
        ],
        "summary": "Deletes an Environment Type",
        "description": "Deletes a specific Environment Type from an Organization. If there are Environments with this Type in the Organization, the operation will fail.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envTypeId",
            "in": "path",
            "description": "ID of the Environment Type.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Environment Type requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentTypeResponse"
                }
              }
            }
          },
          "401": {
            "description": "The Authorization header was not present or invalid.\n\n"
          },
          "404": {
            "description": "No Environment Type with ID `envTypeId` in Organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "There are 1 or more Environments with this Type.\n\nTo delete an Environment Type, there can be no Environments with that type in the Organization.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "app_id": "my-app",
                    "env_id": "awesome-feature"
                  },
                  {
                    "app_id": "my-app",
                    "env_id": "bugfix-7951"
                  }
                ]
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/artefact-versions": {
      "get": {
        "tags": [
          "public",
          "ArtefactVersion",
          "id-fb2094f394e500e5"
        ],
        "summary": "List all Artefacts Versions.",
        "description": "Returns the Artefact Versions registered with your organization. If no elements are found, an empty list is returned.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "(Optional) Filter Artefact Versions by name.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "(Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "(Optional) Filter for non-archived Artefact Versions. If no filter is defined all Artefact Versions are returned.\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Artefact Versions registered with your organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ArtefactVersionResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "archived": false,
                    "artefact_id": "da97af75-2e7c-4ef3-bec0-755ce1e8dd29",
                    "commit": "a5cf4ab4b8a958005202916bf3bb627ebd62a11f",
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
                    "id": "662b80db-cc71-40cf-b601-08d57983f6e4",
                    "name": "registry.humanitec.io/public/sample-app",
                    "ref": "refs/heads/master",
                    "updated_at": "2020-06-12T10:00:00Z",
                    "updated_by": "987654321",
                    "version": "1.3.0"
                  },
                  {
                    "archived": false,
                    "artefact_id": "8a76aff7-cc3d-4d06-994d-4825bce80529",
                    "commit": "a5cf4ab4b8a958005202916bf3bb627ebd62a11f",
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "digest": "",
                    "id": "abf214a0-5de0-430d-a0b4-bb9871567ade",
                    "name": "registry.humanitec.io/public/sample-service",
                    "ref": "refs/heads/master",
                    "updated_at": "2020-06-13T10:00:00Z",
                    "updated_by": "987654321",
                    "version": "1.2.0"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "ArtefactVersion",
          "id-98717a05b6ad0b11"
        ],
        "summary": "Register a new Artefact Version with your organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vcs",
            "in": "query",
            "description": "(Optional) Which version control system the version comes from. Default value is \"git\". If this parameter is not supplied or its value is \"git\", the provided ref, if not empty, is checked to ensure that it has one prefix among \"refs/heads/\" or \"refs/tags/\".\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data needed to register a new Artefact Version within the organization.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddArtefactVersionPayloadRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Artefact Version successfully added.\n\n"
          },
          "400": {
            "description": "Either one or more request body parameters are missing or invalid, or the requested payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Request unauthorised.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/artefacts": {
      "get": {
        "tags": [
          "public",
          "Artefact",
          "id-766dc592556a9cde"
        ],
        "summary": "List all Artefacts.",
        "description": "Returns the Artefacts registered with your organization. If no elements are found, an empty list is returned.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "(Optional) Filter Artefacts by type.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "(Optional) Filter Artefacts by name.\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Artefacts within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ArtefactResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "id": "662b80db-cc71-40cf-b601-08d57983f6e4",
                    "name": "registry.humanitec.io/public/sample-app",
                    "type": "container",
                    "updated_at": "2020-06-12T10:00:00Z",
                    "updated_by": "987654321"
                  },
                  {
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "id": "abf214a0-5de0-430d-a0b4-bb9871567ade",
                    "name": "registry.humanitec.io/public/sample-service",
                    "type": "container",
                    "updated_at": "2020-06-12T10:00:00Z",
                    "updated_by": "987654321"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/artefacts/{artefactId}": {
      "delete": {
        "tags": [
          "public",
          "Artefact",
          "id-f707bd1009c42204"
        ],
        "summary": "Delete Artefact and all related Artefact Versions",
        "description": "The specified Artefact and its Artefact Versions will be permanently deleted. Only Administrators can delete an Artefact.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artefactId",
            "in": "path",
            "description": "The Artefact ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Artefact and related Artefact Versions successfully deleted.\n\n"
          },
          "403": {
            "description": "Request forbidden. This action can only be performed by users holding the Administrator role. It is not possible to delete a built-in artefact.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Artefact not found within your organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/artefacts/{artefactId}/versions": {
      "get": {
        "tags": [
          "public",
          "ArtefactVersion",
          "id-7eb043c27458169a"
        ],
        "summary": "List all Artefact Versions of an Artefact.",
        "description": "Returns the Artefact Versions of a specified Artefact registered with your organization. If no elements are found, an empty list is returned.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artefactId",
            "in": "path",
            "description": "The Artefact ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "(Optional) Filter for non-archived Artefact Versions. If no filter is defined all Artefact Versions are returned.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "(Optional) Filter Artefact Versions by by name including a version or digest.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(Optional) Limit the number of versions returned by the endpoint.\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all Versions of the specified Artefact.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ArtefactVersionResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "archived": false,
                    "artefact_id": "da97af75-2e7c-4ef3-bec0-755ce1e8dd29",
                    "commit": "a5cf4ab4b8a958005202916bf3bb627ebd62a11f",
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
                    "id": "662b80db-cc71-40cf-b601-08d57983f6e4",
                    "name": "registry.humanitec.io/public/sample-app",
                    "ref": "refs/heads/master",
                    "updated_at": "2020-06-12T10:00:00Z",
                    "updated_by": "987654321",
                    "version": "1.3.0"
                  },
                  {
                    "archived": false,
                    "artefact_id": "da97af75-2e7c-4ef3-bec0-755ce1e8dd29",
                    "commit": "a5cf4ab4b8a958005202916bf3bb627ebd62a11f",
                    "created_at": "2020-06-10T10:00:00Z",
                    "created_by": "1234567789",
                    "digest": "",
                    "id": "abf214a0-5de0-430d-a0b4-bb9871567ade",
                    "name": "registry.humanitec.io/public/sample-app",
                    "ref": "refs/heads/master",
                    "updated_at": "2020-06-13T10:00:00Z",
                    "updated_by": "987654321",
                    "version": "1.2.0"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid inputs provided.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Artefact with the supplied ID `artefactID` has been found within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/artefacts/{artefactId}/versions/{versionId}": {
      "patch": {
        "tags": [
          "public",
          "ArtefactVersion",
          "id-8cf8558b295991a6"
        ],
        "summary": "Update Version of an Artefact.",
        "description": "Update the version of a specified Artefact registered with your organization\".",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artefactId",
            "in": "path",
            "description": "The Artefact ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The Version ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Artefact Version Update Request. Only the field `archive` can be updated.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArtefactVersionPayloadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Artefact Version.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtefactVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters are missing or invalid, or the requested payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Request unauthorised.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Update requested on a version of a builtin artefact.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Artefact with the supplied artefactId or no Artefact Version with the supplied versionId have been found within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/images": {
      "get": {
        "tags": [
          "public",
          "Image",
          "id-715b52f18d5b240a"
        ],
        "summary": "List all Container Images",
        "description": "DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nLists all of the Container Images registered for this organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Possibly empty list of Container Images.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ImageResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "added_at": "2020-05-12T16:12:13Z",
                    "builds": [
                      {
                        "added_at": "2020-06-25T19:37:22Z",
                        "branch": "master",
                        "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
                        "image": "registry.humanitec.io/my-org/my-service:1.2.7"
                      }
                    ],
                    "id": "my-service",
                    "source": "github"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/images/{imageId}": {
      "get": {
        "tags": [
          "public",
          "Image",
          "id-fa93a87e878046da"
        ],
        "summary": "Get a specific Image Object",
        "description": "DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nThe response includes a list of Image Builds as well as some metadata about the Image such as its Image Source.\n\nNote, `imageId` may not be the same as the container name. `imageId` is determined by the system making notifications about new builds.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "The Image ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Image Object requested.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                },
                "example": {
                  "added_at": "22020-06-25T17:41:57Z",
                  "builds": [
                    {
                      "added_at": "2020-06-25T19:37:22Z",
                      "branch": "master",
                      "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
                      "image": "registry.humanitec.io/my-org/my-service:1.2.7"
                    },
                    {
                      "added_at": "2020-06-25T17:41:57Z",
                      "branch": "master",
                      "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
                      "image": "registry.humanitec.io/my-org/my-service:1.2.6"
                    }
                  ],
                  "id": "my-service",
                  "source": "github"
                }
              }
            }
          },
          "404": {
            "description": "No Image with an ID of `imageId` found within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/images/{imageId}/builds": {
      "get": {
        "tags": [
          "public",
          "Image",
          "id-635f872ac72a46b7"
        ],
        "summary": "Lists all the Builds of an Image",
        "description": "DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nThe response lists all available Image Builds of an Image.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "The Image ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Possibly empty list of Builds of Container Images.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ImageBuildResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "added_at": "2020-06-25T19:37:22Z",
                    "branch": "master",
                    "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
                    "image": "registry.humanitec.io/my-org/my-service:1.2.7"
                  },
                  {
                    "added_at": "2020-06-25T17:41:57Z",
                    "branch": "master",
                    "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
                    "image": "registry.humanitec.io/my-org/my-service:1.2.6"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No Image with an ID of `imageId` found within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Image",
          "id-ad0ea902ca817467"
        ],
        "summary": "Add a new Image Build",
        "description": "DEPRECATED: This endpoint exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nThis endpoint is used by Continuous Integration (CI) pipelines to notify Humanitec that a new Image Build is available.\n\nIf there is no Image with ID `imageId`, it will be automatically created.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "The Image ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The metadata associated with the build.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageBuildRequest"
              },
              "example": {
                "branch": "master",
                "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
                "image": "registry.humanitec.io/my-org/my-service:1.2.7"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Build successfully added.\n\n"
          },
          "400": {
            "description": "The supplied `imageId` is invalid or a required field is missing.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Request unauthorised.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "A build cannot be added to a builtin image.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request body was not parseable.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/users": {
      "get": {
        "tags": [
          "public",
          "UserRole",
          "id-4168cd16f10fbf80"
        ],
        "summary": "List Users with roles in an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Users and the roles they hold.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRoleResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Object does not exist.\n\n"
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "UserRole",
          "id-454d8ec72ac03f4f"
        ],
        "summary": "Adds a User to an Application with a Role",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The user ID and the role\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleRequest"
              },
              "example": {
                "id": "61048226-642c-438e-974f-ce5c013d94f8",
                "role": "manager"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user ID and associated role.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some of the values supplied are invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified Application was not found.\n\n"
          },
          "422": {
            "description": "The request body was not parseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/users": {
      "get": {
        "tags": [
          "public",
          "UserRole",
          "id-416f0bca6f852ccc"
        ],
        "summary": "List Users with roles in an Organization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Users and the roles they hold.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRoleResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Object does not exist.\n\n"
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "UserProfile",
          "id-18a2ff8a7cb8092"
        ],
        "summary": "Creates a new service user.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The user ID and the role\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileExtendedRequest"
              },
              "example": {
                "id": "61048226-642c-438e-974f-ce5c013d94f8",
                "role": "manager"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The extended user profile of the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileExtendedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some of the values supplied are invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was not parseable.\n\n"
          },
          "403": {
            "description": "Token is not valid for a user.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules": {
      "get": {
        "tags": [
          "public",
          "AutomationRule",
          "id-3821908301ec4a35"
        ],
        "summary": "List all Automation Rules in an Environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty array of Automation Rules\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AutomationRuleResponse"
                  },
                  "type": "array"
                },
                "example": [
                  {
                    "active": true,
                    "artefacts_filter": [
                      "http://registry.org/sample-service"
                    ],
                    "created_at": "2021-07-22T14:53:27Z",
                    "created_by": "0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70",
                    "exclude_artefacts_filter": false,
                    "exclude_images_filter": false,
                    "id": "923486d012f20324",
                    "images_filter": [
                      "sample-service"
                    ],
                    "match": "^pr-[0-9]+-.*$",
                    "match_ref": "^refs/heads/pr-[0-9]+-.*$",
                    "type": "update",
                    "update_to": "branch"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server error.\n\n"
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "AutomationRule",
          "id-f1da5f18617be2e"
        ],
        "summary": "Create a new Automation Rule for an Environment.",
        "description": "Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the Automation Rule.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationRuleRequest"
              },
              "example": {
                "active": true,
                "artefacts_filter": [
                  "http://registry.org/sample-service"
                ],
                "exclude_artefacts_filter": false,
                "match_ref": "^refs/heads/pr-[0-9]+-.*$",
                "type": "update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The AutomationRule\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The input was not a valid Automation Rule.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/rules/{ruleId}": {
      "get": {
        "tags": [
          "public",
          "AutomationRule",
          "id-5c591c873982d08d"
        ],
        "summary": "Get a specific Automation Rule for an Environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The Automation Rule ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AutomationRule\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationRuleResponse"
                },
                "example": {
                  "active": true,
                  "artefacts_filter": [
                    "http://registry.org/sample-service"
                  ],
                  "created_at": "2021-07-22T14:53:27Z",
                  "created_by": "0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70",
                  "exclude_artefacts_filter": false,
                  "exclude_images_filter": false,
                  "id": "923486d012f20324",
                  "images_filter": [
                    "sample-service"
                  ],
                  "match": "^pr-[0-9]+-.*$",
                  "match_ref": "^refs/heads/pr-[0-9]+-.*$",
                  "type": "update",
                  "update_to": "branch"
                }
              }
            }
          },
          "404": {
            "description": "There is no automation rule with the supplied ID.\n\n"
          }
        }
      },
      "put": {
        "tags": [
          "public",
          "AutomationRule",
          "id-aae5a37db7a07735"
        ],
        "summary": "Update an existing Automation Rule for an Environment.",
        "description": "Items marked as deprecated are still supported (however not recommended) for use and are incompatible with properties of the latest api version. In particular an error is raised if  `images_filter` (deprecated) and `artefacts_filter` are used in the same payload. The same is true for `exclude_images_filter` (deprecated) and `exclude_artefacts_filter`. `match` and `update_to` are still supported but will trigger an error if combined with `match_ref`.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The Automation Rule ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the Automation Rule.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationRuleRequest"
              },
              "example": {
                "active": true,
                "artefacts_filter": [
                  "http://registry.org/sample-service"
                ],
                "exclude_artefacts_filter": false,
                "match_ref": "^refs/heads/pr-[0-9]+-.*$",
                "type": "update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The AutomationRule\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The input was not a valid Automation Rule.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "There is no automation rule with the supplied ID.\n\n"
          },
          "422": {
            "description": "The request body could not be processed.\n\n"
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "AutomationRule",
          "id-419ccb3e966c7763"
        ],
        "summary": "Delete Automation Rule from an Environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The Automation Rule ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The AutomationRule was deleted.\n\n"
          },
          "404": {
            "description": "There is no automation rule with the supplied ID.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/deltas": {
      "get": {
        "tags": [
          "public",
          "Delta",
          "id-72ce6ea9bff52ef"
        ],
        "summary": "List Deltas in an Application",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "If true, return archived Deltas.\n\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "env",
            "in": "query",
            "description": "Only return Deltas associated with the specified Environment.\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Deployment Deltas.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeltaResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Delta",
          "id-7708aeaebb457a7c"
        ],
        "summary": "Create a new Delta",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A Deployment Delta to create.\n\nThe Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.\n\nNOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaRequest"
              },
              "example": {
                "metadata": {
                  "env_id": "feature-test",
                  "name": "Updates for ticket # 2581"
                },
                "modules": {
                  "updates": {
                    "module-one": [
                      {
                        "op": "add",
                        "path": "/spec/containers/simple-service/variables/REDIS_URL",
                        "value": "redis://${modules.redis-cache.service.name}"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested Deployment Delta.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeltaResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}": {
      "patch": {
        "tags": [
          "public",
          "Delta",
          "id-923c8490bb0decda"
        ],
        "summary": "Update an existing Delta",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deltaId",
            "in": "path",
            "description": "ID of the Delta to update.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An array of Deltas.\n\nThe Deltas in the request are combined, meaning the current Delta is updated in turn by each Delta in the request. Once all Deltas have been combined, the resulting Delta is simplified.\n\n* All Modules in the `modules.add` property are replaced with the new Delta's values. If the value of a Module is `null`, and the ID is in the `modules.remove` list, it is removed from the `modules.remove` list.\n\n* All IDs listed in `modules.remove` are combined. Any ID in `modules.remove` and also in `modules.add` are removed from `modules.add`\n\n* The lists of JSON Patches in `modules.update` are concatenated or created in `modules.updates`.\n\nSimplification involves:\n\n* Applying any entries in `modules.updates` that have matching IDs in `modules.add` to the `modules.add` entry and removing the `modules.update` entry.\n\n* Reducing the number of JSON Patches in each `modules.update` entry to the smallest set that has the same effect.\n\n**Extension to JSON Patch**\n\nIf a JSON Patch entry needs to be removed, without side effects, the `value` of the `remove` action can be set to `{\"scope\": \"delta\"}. This will result in the remove action being used during simplification but be discarded before the Delta is finalized.\n\nIf the user making the request is not the user who created the Delta and they are not already on the contributors list, they will be added to the contributors list.\n\n_NOTE: If the `id` or `metadata` properties are specified, they will be ignored._",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/DeltaRequest"
                },
                "type": "array"
              },
              "example": [
                {
                  "modules": {
                    "updates": {
                      "module-one": [
                        {
                          "op": "add",
                          "path": "/spec/containers/simple-service/variables/REDIS_URL",
                          "value": "redis://${modules.redis-cache.service.name}"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested Deployment Delta.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeltaResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the Deltas were incompatible.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeltaResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/archived": {
      "put": {
        "tags": [
          "public",
          "Delta",
          "id-96262817857608fe"
        ],
        "summary": "Mark a Delta as \"archived\"",
        "description": "Archived Deltas are still accessible but can no longer be updated.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deltaId",
            "in": "path",
            "description": "ID of the Deployment Delta.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Either `true` or `false`.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              },
              "example": true
            }
          }
        },
        "responses": {
          "204": {
            "description": "Archived state successfully updated.\n\n"
          },
          "404": {
            "description": "No Deployment Delta with ID `deltaId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/env_id": {
      "put": {
        "tags": [
          "public",
          "Delta",
          "id-dca2a04b5dc4903e"
        ],
        "summary": "Change the Environment of a Delta",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deltaId",
            "in": "path",
            "description": "ID of the Deployment Delta.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new Environment ID. (NOTE: The string must still be JSON encoded.)\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "new-env"
            }
          }
        },
        "responses": {
          "204": {
            "description": "Environment ID successfully updated.\n\n"
          },
          "400": {
            "description": "No Environment with specified ID in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Deployment Delta with ID `deltaId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/deltas/{deltaId}/name": {
      "put": {
        "tags": [
          "public",
          "Delta",
          "id-afbc6846b9b2a628"
        ],
        "summary": "Change the name of a Delta",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deltaId",
            "in": "path",
            "description": "ID of the Deployment Delta.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new name.(NOTE: The string must still be JSON encoded.)\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "Update for ticket #s 2568 & 2572"
            }
          }
        },
        "responses": {
          "204": {
            "description": "Name successfully updated.\n\n"
          },
          "404": {
            "description": "No Deployment Delta with ID `deltaId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/sets/{setId}": {
      "get": {
        "tags": [
          "public",
          "Set",
          "id-974799a8d2176238"
        ],
        "summary": "Get a Deployment Set",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setId",
            "in": "path",
            "description": "ID of the Deployment Set.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Requested Deployment Set.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Deployment Set with ID `setId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Set",
          "id-d6b87166851d1d7f"
        ],
        "summary": "Apply a Deployment Delta to a Deployment Set",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setId",
            "in": "path",
            "description": "ID of the Deployment Set.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Delta to apply to the Set.\n\nNOTE: The `id` parameter is ignored if provided. The request body should be the full Delta.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeltaRequest"
              },
              "example": {
                "modules": {
                  "remove": [
                    "module-one"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Deployment Delta which if applied to the Set with ID `sourceSetId` gives the Set with ID `setId`.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeltaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Deployment Deta is incompatible with the Deployment Set specified by `setId`.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No Deployment Set with ID `setId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was unparseable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/sets/{setId}/diff/{sourceSetId}": {
      "get": {
        "tags": [
          "public",
          "Set",
          "id-188756878370e28c"
        ],
        "summary": "Get the difference between 2 Deployment Sets",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setId",
            "in": "path",
            "description": "ID of the Deployment Set.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceSetId",
            "in": "path",
            "description": "ID of the Deployment Set to diff against.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Deployment Delta which if applied to the Set with ID `sourceSetId` gives the Set with ID `setId`.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeltaResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Deployment Set with ID `setId` or `sourceSetId` found in Application.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/jobs": {
      "delete": {
        "tags": [
          "public",
          "Event",
          "id-cf3439c40bef5daa"
        ],
        "summary": "Deletes all Jobs for the Application",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/webhooks": {
      "get": {
        "tags": [
          "public",
          "Event",
          "id-54aa8cf5a4a9a3a1"
        ],
        "summary": "List Webhooks",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Webhooks.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebhookResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Event",
          "id-f7cfaeaeae78afbe"
        ],
        "summary": "Create a new Webhook",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A created webhook.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some of the values supplied are invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "409": {
            "description": "The supplied `id` clashes with an existing Job.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request body was not parsable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/webhooks/{jobId}": {
      "get": {
        "tags": [
          "public",
          "Event",
          "id-fd99afedecd0dafd"
        ],
        "summary": "Get a Webhook",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The Webhook ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested webhook.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested webhook not found.\n\n"
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Event",
          "id-c931cd5bce59ec2c"
        ],
        "summary": "Update a Webhook",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The Webhook ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated successfully, return the webhook\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested webhook not found.\n\n"
          },
          "422": {
            "description": "The request body was not parsable.\n\n"
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Event",
          "id-7f5eb45f5b3c4a39"
        ],
        "summary": "Delete a Webhook",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The Webhook ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully\n\n"
          },
          "404": {
            "description": "The requested webhook not found.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/events": {
      "get": {
        "tags": [
          "public",
          "Event",
          "id-a75e603687977c5"
        ],
        "summary": "List Events",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Events.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/orgs": {
      "get": {
        "tags": [
          "public",
          "Organization",
          "id-4583b24d5271efa7"
        ],
        "summary": "List active organizations the user has access to.",
        "responses": {
          "200": {
            "description": "A list of available organizations (based on the current user access level).\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Required HTTP Authorization header is missing or malformed.\n\n"
          },
          "403": {
            "description": "Current user is not authorized to perform the request.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}": {
      "get": {
        "tags": [
          "public",
          "Organization",
          "id-d078104033e8a68e"
        ],
        "summary": "Get the specified Organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns organization details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters or payload. E.g. invalid `orgId` format.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Required HTTP Authorization header is missing or malformed.\n\n"
          },
          "403": {
            "description": "Current user is not authorized to perform the request.\n\n"
          },
          "409": {
            "description": "Organization can't be accessed with this request.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/registries": {
      "get": {
        "tags": [
          "public",
          "Registry",
          "id-8b8113b67a78bc3f"
        ],
        "summary": "Lists available registries for the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Possibly empty list of Registries.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RegistryResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' does not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Registry",
          "id-f27701fca8b5a3f7"
        ],
        "summary": "Creates a new registry record.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A new record details.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A newly created record details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters or payload are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication token is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' does not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "409": {
            "description": "The record with the same ID or name (prefix) already exists within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/registries/{regId}": {
      "get": {
        "tags": [
          "public",
          "Registry",
          "id-a8bef911c67137ba"
        ],
        "summary": "Loads a registry record details.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regId",
            "in": "path",
            "description": "Unique (alpha-numerical) registry identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A registry details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' or 'regId' do not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Registry",
          "id-64e5e7181118ccd2"
        ],
        "summary": "Deletes an existing registry record and all associated credentials and secrets.",
        "description": "_Deletions are currently irreversible._",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regId",
            "in": "path",
            "description": "Unique (alpha-numerical) registry identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully.\n\n"
          },
          "400": {
            "description": "Request parameters are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Built-in 'humanitec' registry can't be deleted.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' or 'regId' do not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "public",
          "Registry",
          "id-d1246e41218c085d"
        ],
        "summary": "Updates (patches) an existing registry record.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regId",
            "in": "path",
            "description": "Unique (alpha-numerical) registry identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Record details to update.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated record details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters or payload are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Built-in 'humanitec' registry can't be changed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' or 'regId' do not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "409": {
            "description": "The record with the same name (prefix) already exists within the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/registries/{regId}/creds": {
      "get": {
        "tags": [
          "public",
          "Registry",
          "id-909046ec3b701823"
        ],
        "summary": "Returns current account credentials or secret details for the registry.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Unique (alpha-numerical) organization identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regId",
            "in": "path",
            "description": "Unique (alpha-numerical) registry identifier.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current account credentials or secret details for the registry.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryCredsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request parameters are incomplete or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication token is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orgId' or 'regId' do not match any record.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/resources": {
      "get": {
        "tags": [
          "public",
          "ActiveResource",
          "id-458edde8fb58f308"
        ],
        "summary": "List Active Resources provisioned in an environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Active Resources.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActiveResourceResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/account-types": {
      "get": {
        "tags": [
          "public",
          "AccountType",
          "id-6f1473952f969428"
        ],
        "summary": "List Resource Account Types available to the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Resources Accounts Types.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountTypeResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/accounts": {
      "get": {
        "tags": [
          "public",
          "ResourceAccount",
          "id-9dd92f28ae1db94b"
        ],
        "summary": "List Resource Accounts in the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Resources Accounts.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceAccountResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "ResourceAccount",
          "id-d5377a51480dde5e"
        ],
        "summary": "Create a new Resource Account in the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceAccountRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created Resources Account details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication token is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Resources Account already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/accounts/{accId}": {
      "get": {
        "tags": [
          "public",
          "ResourceAccount",
          "id-6399c8aea9c4da36"
        ],
        "summary": "Get a Resource Account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accId",
            "in": "path",
            "description": "The Resource Account ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Resources Account.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resource Account with the 'accId' ID is not found or does not belong to the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "public",
          "ResourceAccount",
          "id-c703b9a3f17895d5"
        ],
        "summary": "Update a Resource Account.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accId",
            "in": "path",
            "description": "The Resource Account ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceAccountRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Resource Account details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resource Account with the 'accId' ID is not found or does not belong to the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
"/orgs/{orgId}/resources/defs": {
      "get": {
        "tags": [
          "public",
          "ResourceDefinition",
          "id-dcfa034d27b23c6d"
        ],
        "summary": "List Resource Definitions.",
        "description": "Filter criteria can be applied to obtain all the resource definitions that could match the filters, grouped by type and sorted by matching rank.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app",
            "in": "query",
            "description": "(Optional) Filter Resource Definitions that may match a specific Application.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env",
            "in": "query",
            "description": "(Optional) Filter Resource Definitions that may match a specific Environment.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "env_type",
            "in": "query",
            "description": "(Optional) Filter Resource Definitions that may match a specific Environment Type.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "res",
            "in": "query",
            "description": "(Optional) Filter Resource Definitions that may match a specific Resource.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "res_type",
            "in": "query",
            "description": "(Optional) Filter Resource Definitions that may match a specific Resource Type.\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Resources Definitions.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceDefinitionResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "ResourceDefinition",
          "id-d1d607767c2fa523"
        ],
        "summary": "Create a new Resource Definition.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Resource Definition details.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceDefinitionRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created Resources Definition details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Resources Definition already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/defs/{defId}": {
      "get": {
        "tags": [
          "public",
          "ResourceDefinition",
          "id-3a2fa8278ffbfb0c"
        ],
        "summary": "Get a specific Resource Definition.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Resources Definition details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDefinitionResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resource Definition with the 'defId' ID is not found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "ResourceDefinition",
          "id-49f0275ef133c098"
        ],
        "summary": "Delete a Resource Definition.",
        "description": "If there **are no** Active Resources provisioned via the current definition, the Resource Definition is deleted immediately.\n\nIf there **are** Active Resources provisioned via the current definition, the request fails. The response will describe the changes to the affected Active Resources if operation is forced.\n\nThe request can take an optional `force` query parameter. If set to `true`, the current Resource Definition is **marked as** pending deletion and will be deleted (purged) as soon as no existing Active Resources reference it. With the next deployment matching criteria for Resources will be re-evaluated, and current Active Resources for the target environment would be either linked to another matching Resource Definition or decommissioned and created using the new or default Resource Definition (when available).\n\nThe Resource Definition that has been marked for deletion cannot be used to provision new resources.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Resource Definition has been marked for deletion.\n\n"
          },
          "404": {
            "description": "A Resource Driver with the 'driverId' ID is not found or is not accessible by the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "List of Active Resources that still reference this Resource Definition.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceDefinitionChangeResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "public",
          "ResourceDefinition",
          "id-ed8f9c6328f59c17"
        ],
        "summary": "Update a Resource Definition.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Resource Definition record details.\n\nThe PATCH operation would change the value of the property if it is included in the request payload JSON, and not `null`. Missing and `null` properties are ignored.\n\nFor the map properties, such as UpdateResourceDefinitionRequest.ResourceParams and UpdateResourceDefinitionRequest.DriverParams, the merge operation is applied.\n\nMerge rules are as follows:\n\n- If a map property has a value, it is replaced (or added).\n\n- If a map property is set to `null`, it is removed.\n\n- If a map property is not included (missing in JSON), it remains unchanged.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceDefinitionRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Resource Definition.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resource Definition with the 'defId' ID is not found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/defs/{defId}/criteria": {
      "post": {
        "tags": [
          "public",
          "ResourceDefinition",
          "MatchingCriteria",
          "id-2ffc55fb05e58182"
        ],
        "summary": "Add a new Matching Criteria to a Resource Definition.",
        "description": "Matching Criteria are combined with Resource Type to select a specific definition. Matching Criteria can be set for any combination of Application ID, Environment ID, Environment Type, and Resource ID. In the event of multiple matches, the most specific match is chosen.\n\nFor example, given 3 sets of matching criteria for the same type:\n\n```\n 1. {\"env_type\":\"test\"}\n 2. {\"env_type\":\"development\"}\n 3. {\"env_type\":\"test\", \"app_id\":\"my-app\"}\n```\n\nIf, a resource of that time was needed in an Application `my-app`, Environment `qa-team` with Type `test` and Resource ID `modules.my-module-externals.my-resource`, there would be two resources definitions matching the criteria: #1 & #3. Definition #3 will be chosen because it's matching criteria is the most specific.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Matching Criteria rules.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingCriteriaRuleRequest"
              },
              "example": {
                "env_id": "production"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly added Matching Criteria details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingCriteriaResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Matching Criteria already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/defs/{defId}/criteria/{criteriaId}": {
      "delete": {
        "tags": [
          "public",
          "ResourceDefinition",
          "MatchingCriteria",
          "id-3dd97c9b90f364ed"
        ],
        "summary": "Delete a Matching Criteria from a Resource Definition.",
        "description": "If there **are no** Active Resources that would match to a different Resource Definition when the current Matching Criteria is deleted, the Matching Criteria is deleted immediately.\n\nIf there **are** Active Resources that would match to a different Resource Definition, the request fails with HTTP status code 409 (Conflict). The response content will list all of affected Active Resources and their new matches.\n\nThe request can take an optional `force` query parameter. If set to `true`, the Matching Criteria is deleted immediately. Referenced Active Resources would match to a different Resource Definition during the next deployment in the target environment.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "criteriaId",
            "in": "path",
            "description": "The Matching Criteria ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted.\n\n"
          },
          "404": {
            "description": "The Resource Definition is not found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "One or more Active Resources reference the Resource Definition through this Matching Criteria.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceDefinitionChangeResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/defs/{defId}/resources": {
      "get": {
        "tags": [
          "public",
          "ResourceDefinition",
          "ActiveResource",
          "id-e64008a9dd7e2425"
        ],
        "summary": "List Active Resources provisioned via a specific Resource Definition.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Active Resources.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActiveResourceResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/drivers": {
      "get": {
        "tags": [
          "public",
          "DriverDefinition",
          "id-4a0527f79ce3a2e7"
        ],
        "summary": "List Resource Drivers.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Resources Drivers.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DriverDefinitionResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "DriverDefinition",
          "id-12bab2e093889169"
        ],
        "summary": "Register a new Resource Driver.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Resources Driver details.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDriverRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly registered Resources Driver details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Resources Driver already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/drivers/{driverId}": {
      "get": {
        "tags": [
          "public",
          "DriverDefinition",
          "id-6dbdf1d38961e24a"
        ],
        "summary": "Get a Resource Driver.",
        "description": "Only drivers that belongs to the given organization or registered as `public` are accessible through this endpoint",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "description": "The Resource Driver ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Resources Driver details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDefinitionResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resource Driver with the 'driverId' ID is not found or is not accessible by the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "public",
          "DriverDefinition",
          "id-a17507305ead668"
        ],
        "summary": "Update a Resource Driver.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "description": "The Resource Driver ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDriverRequestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Resources Driver details.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "A Resources Driver with the 'driverId' ID is not found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "DriverDefinition",
          "id-1410bccc9ddf0fd"
        ],
        "summary": "Delete a Resources Driver.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "description": "The Resources Driver ID to delete.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted.\n\n"
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/resources/static/{defId}": {
      "patch": {
        "tags": [
          "public",
          "StaticDefinition",
          "id-4e60ffdded602983"
        ],
        "summary": "Update a Static Resource Definition",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defId",
            "in": "path",
            "description": "The Resource Definition ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An object containing the values to update.\n\nOnly `data` and `driver_params` can be updated. If a property should be removed, it can be set to `null`. Missing properties indicate that the value should remain unchanged.\n\nAny top level properties other than `data` and `driver_params` are ignored.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object"
              },
              "example": {
                "data": {
                  "secrets": {
                    "password": "newPassword"
                  },
                  "values": {
                    "host": "my-other-app.example.com",
                    "require_ssl": null
                  }
                },
                "driver_data": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Static Resource Definitions.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Some of the values supplied are invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No static resource with that ID found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "The request body was not parsable.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/resources/types": {
      "get": {
        "tags": [
          "public",
          "ResourceType",
          "id-aff079b0c0159d6a"
        ],
        "summary": "List Resource Types.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Resources Types.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResourceTypeResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "500": {
            "description": "Internal application error.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime": {
      "get": {
        "tags": [
          "public",
          "RuntimeInfo",
          "id-4ec56221444edf96"
        ],
        "summary": "Get a Runtime information for the environment",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Runtime info returned.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuntimeInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Environment not found.\n\n"
          },
          "500": {
            "description": "Some unrecoverable error.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/runtime/replicas": {
      "patch": {
        "tags": [
          "public",
          "RuntimeInfo",
          "id-555c96281c1d2504"
        ],
        "summary": "Set number of replicas for the environment's modules",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "map of replicas by modules\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Bad Request.\n\n"
          },
          "401": {
            "description": "Request Unauthorised.\n\n"
          },
          "403": {
            "description": "Forbidden (default cluster limitations or insufficient privileges to perform the action).\n\n"
          },
          "404": {
            "description": "Environment not found.\n\n"
          },
          "500": {
            "description": "Some unrecoverable error.\n\n"
          },
          "501": {
            "description": "The provider is not supported.\n\n"
          }
        }
      }
    },
    "/current-user": {
      "get": {
        "tags": [
          "public",
          "UserProfile",
          "id-19eac471ff71f6c3"
        ],
        "summary": "Gets the extended profile of the current user",
        "responses": {
          "200": {
            "description": "The extended user profile of the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileExtendedResponse"
                }
              }
            }
          },
          "401": {
            "description": "No token supplied.\n\n"
          },
          "403": {
            "description": "Token is not valid for a user.\n\n"
          }
        }
      },
      "patch": {
        "tags": [
          "public",
          "UserProfile",
          "id-3686df27e9ea723d"
        ],
        "summary": "Updates the extended profile of the current user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileExtendedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The extended user profile of the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileExtendedResponse"
                }
              }
            }
          },
          "401": {
            "description": "No token supplied.\n\n"
          },
          "403": {
            "description": "Token is not valid for a user.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/users/{userId}": {
      "get": {
        "tags": [
          "public",
          "UserRole",
          "id-599c18437cdcf891"
        ],
        "summary": "Get the role of a User on an Application",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The User ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The information on the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Object does not exist.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/env-type/{envType}/users/{userId}": {
      "get": {
        "tags": [
          "public",
          "UserRole",
          "id-edc8f96dad1b588d"
        ],
        "summary": "Get the role of a User on an Environment Type",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envType",
            "in": "path",
            "description": "The Environment Type.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The User ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The information on the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleResponse"
                }
              }
            }
          },
          "404": {
            "description": "Object does not exist.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/invitations": {
      "get": {
        "tags": [
          "public",
          "UserInvite",
          "id-3142fa80948aa9b5"
        ],
        "summary": "List the invites issued for the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of the invites issued for the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserInviteResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "UserRole",
          "id-95feb55aec734ca3"
        ],
        "summary": "Invites a user to an Organization with a specified role.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The email and the desired role\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInviteRequestRequest"
              },
              "example": {
                "email": "jane.gonzales@example.com",
                "role": "manager"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An temporary profile for the invited user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserRoleResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "Object does not exist.\n\n"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "public",
          "UserProfile",
          "id-eb53bc5497df7fe6"
        ],
        "summary": "DEPRECATED",
        "responses": {
          "200": {
            "description": "The token structure.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{tokenId}": {
      "delete": {
        "tags": [
          "public",
          "UserProfile",
          "id-58622d721631f57c"
        ],
        "summary": "DEPRECATED",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token ID\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted\n\n"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "public",
          "UserProfile",
          "id-629a398140849841"
        ],
        "summary": "DEPRECATED",
        "responses": {
          "200": {
            "description": "The extended user profile of the user.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "No token supplied.\n\n"
          },
          "403": {
            "description": "Token is not valid for a user.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions": {
      "get": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-15e6d69c476aa3c8"
        ],
        "summary": "List Value Set Versions in an Environment of an App",
        "description": "A new Value Set Version is created on every modification of a Value inside the an Environment of an App. In case this environment has no overrides the response is the same as the App level endpoint.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_changed",
            "in": "query",
            "description": "(Optional) Return only value set version where the specified key changed\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of ValueSetVersion.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValueSetVersionResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}": {
      "get": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-1788e5e056d7e975"
        ],
        "summary": "Get a single Value Set Version in an Environment of an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "ValueSetVersion with `valueSetVersionId` in Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/purge/{key}": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-3274560023b15f46"
        ],
        "summary": "Purge the value of a specific key Value Set Version in an Environment of an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key of the value to be purged.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "204": {
            "description": "key successfully purged\n\n"
          },
          "400": {
            "description": "Input not valid.\n\n"
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App Environment.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-4949e99ea5ffc379"
        ],
        "summary": "Restore a Value Set Version in an Environment of an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "The resulting ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/value-set-versions/{valueSetVersionId}/restore/{key}": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-69a7b420d845fdb7"
        ],
        "summary": "Restore a specific key Value Set Version in an Environment of an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key of the value to be restored.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "The resulting ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App Environment.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/values": {
      "get": {
        "tags": [
          "public",
          "Value",
          "id-96d5dd97b8e37b87"
        ],
        "summary": "List Shared Values in an Environment",
        "description": "The returned values will be the base Application values with the Environment overrides where applicable. The `source` field will specify the level from which the value is from.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Values.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValueResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Value",
          "id-e8db605b46807ac7"
        ],
        "summary": "Create a Shared Value for an Environment",
        "description": "The Shared Value created will only be available to the specific Environment.\n\nIf a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of the new Shared Value.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Value successfully created.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Shared Value already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Value",
          "id-8d90ebaaab97660d"
        ],
        "summary": "Delete all Shared Value for an Environment",
        "description": "All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shared Value successfully deleted.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/envs/{envId}/values/{key}": {
      "put": {
        "tags": [
          "public",
          "Value",
          "id-addaaed3d337c1cc"
        ],
        "summary": "Update Shared Value for an Environment",
        "description": "Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key to update.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Both `value` and `description` must be supplied. All other fields will be ignored.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Value successfully updated.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Shared Value does not exist.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Value",
          "id-bd8b89c992f6fa98"
        ],
        "summary": "Delete Shared Value for an Environment",
        "description": "The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "envId",
            "in": "path",
            "description": "The Environment ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key to update.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shared Value successfully deleted.\n\n"
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Shared Value does not exist.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/value-set-versions": {
      "get": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-6480da2a2cbc873d"
        ],
        "summary": "List Value Set Versions in the App",
        "description": "A new Value Set Version is created on every modification of a Value inside the app.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_changed",
            "in": "query",
            "description": "(Optional) Return only value set version where the specified key changed\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of ValueSetVersion.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValueSetVersionResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}": {
      "get": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-b3e2705703d342e5"
        ],
        "summary": "Get a single Value Set Version from the App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "ValueSetVersion with `valueSetVersionId` in App.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/purge/{key}": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-fe88c1c152f34014"
        ],
        "summary": "Purge the value of a specific key Value Set Version in an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key of the value to be purged.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "204": {
            "description": "key successfully purged\n\n"
          },
          "400": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-a29139d7b2c28b6a"
        ],
        "summary": "Restore a Value Set Version in an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "The resulting ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/value-set-versions/{valueSetVersionId}/restore/{key}": {
      "post": {
        "tags": [
          "public",
          "ValueSetVersion",
          "id-acc5a9be7d0dc366"
        ],
        "summary": "Restore a specific key Value Set Version in an App",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "valueSetVersionId",
            "in": "path",
            "description": "The ValueSetVersion ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key of the value to be restored.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "The resulting ValueSetVersion\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueSetVersionResponse"
                }
              }
            }
          },
          "404": {
            "description": "No ValueSetVersion with `valueSetVersionId` in App.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/values": {
      "get": {
        "tags": [
          "public",
          "Value",
          "id-c3585a7affe88b8f"
        ],
        "summary": "List Shared Values in an Application",
        "description": "The returned values will be the \"base\" values for the Application. The overridden value for the Environment can be retrieved via the `/orgs/{orgId}/apps/{appId}/envs/{envId}/values` endpoint.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Values.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValueResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "Value",
          "id-2eb5ff0a1367081c"
        ],
        "summary": "Create a Shared Value for an Application",
        "description": "The Shared Value created will be available to all Environments in that Application.\n\nIf a Value is marked as a secret, it will be securely stored. It will not be possible to retrieve the value again through the API. The value of the secret can however be updated.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of the new Shared Value.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Value successfully created.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Shared Value already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Value",
          "id-bf24220c37b9378"
        ],
        "summary": "Delete all Shared Value for an App",
        "description": "All Shared Values will be deleted. If the Shared Values are marked as a secret, they will also be deleted.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shared Values successfully deleted.\n\n"
          }
        }
      }
    },
    "/orgs/{orgId}/apps/{appId}/values/{key}": {
      "put": {
        "tags": [
          "public",
          "Value",
          "id-67c480e520050c7c"
        ],
        "summary": "Update Shared Value for an Application",
        "description": "Update the value or description of the Shared Value. Shared Values marked as secret can also be updated.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key to update.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Both `value` and `description` must be supplied. All other fields will be ignored.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shared Value successfully updated.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Shared Value does not exist.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "Value",
          "id-7d0b02819ea91e5e"
        ],
        "summary": "Delete Shared Value for an Application",
        "description": "The specified Shared Value will be permanently deleted. If the Shared Value is marked as a secret, it will also be permanently deleted.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appId",
            "in": "path",
            "description": "The Application ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key to update.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shared Value successfully deleted.\n\n"
          },
          "400": {
            "description": "Input not valid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Shared Value does not exist.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles": {
      "get": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-317a73fed041c22f"
        ],
        "summary": "List workload profiles available to the organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Workload Profiles.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkloadProfileResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-9d6af7bf2193431f"
        ],
        "summary": "Create new Workload Profile",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Workload profile details.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkloadProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created Workload Profile.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkloadProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Request unauthorised.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Workload Profile already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles/{profileId}": {
      "delete": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-285eb1b4df7cecd3"
        ],
        "summary": "Delete a Workload Profile",
        "description": "This will also delete all versions of a workload profile.\n\nIt is not possible to delete profiles of other organizations.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The Workload profile ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Workload Profile has been marked for deletion.\n\n"
          },
          "404": {
            "description": "The Workload Profile is not found or is not accessible by the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles/{profileId}/versions": {
      "post": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-dd2a29fa6db45d7"
        ],
        "summary": "Add new Version of the Workload Profile",
        "description": "Creates a Workload Profile Version from the uploaded Helm chart. The version is retrieved from the chart's metadata (Charts.yaml file).\n\nThe request has content type `multipart/form-data` and the request body includes two parts:\n\n1. `file` with `application/x-gzip` content type which is an archive containing a Helm chart.\n\n2. `metadata` with `application/json` content type which defines the version's metadata.\n\nRequest body example:\n\n```\n    Content-Type: multipart/form-data; boundary=----boundary\n    ----boundary\n    Content-Disposition: form-data; name=\"metadata\"\n    Content-Type: application/json; charset=UTF-8\n    {\n      \"features\": {\n         \"humanitec/service\": {},\n         \"humanitec/volumes\": {},\n         \"custom\": {\"schema\": {}}\n      },\n      \"notes\": \"Notes related to this version of the profile\"\n    }\n    ----boundary\n    Content-Disposition: form-data; name=\"file\"; filename=\"my-workload-1.0.1.tgz\"\n    Content-Type: application/x-gzip\n    [TGZ_DATA]\n    ----boundary\n```\n\n**NOTE:**\n\nA Workload Profile must be created before a version can be added to it.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The Workload Profile ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Workload profile version metadata.\n\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkloadProfileVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created Workload Profile Version metadata.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkloadProfileVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more request parameters is missing or invalid.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Request unauthorised.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "A Workload Profile Version already exists.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request payload is not provided or malformed.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles/{profileId}/versions/{version}": {
      "delete": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-4809ac5071cbe936"
        ],
        "summary": "Delete a Workload Profile Version",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The Workload profile ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The Version.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Workload Profile Version has been marked for deletion.\n\n"
          },
          "404": {
            "description": "The Workload Profile Version is not found or is not accessible by the organization.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles/{profileQid}": {
      "get": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-88d4e89419ae0b79"
        ],
        "summary": "Get a Workload Profile",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileQid",
            "in": "path",
            "description": "The fully qualified Workload ID. (If not a profile from the current org, must be prefixed with `{orgId}.` e.g. `humanitec.default-cronjob`)\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested WorkloadProfile.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkloadProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested WorkloadProfile is not found.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HumanitecErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orgs/{orgId}/workload-profiles/{profileQid}/versions": {
      "get": {
        "tags": [
          "public",
          "WorkloadProfile",
          "id-59de344b5fdd324b"
        ],
        "summary": "List versions of the given workload profile with optional constraint.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "The Organization ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "profileQid",
            "in": "path",
            "description": "The Workload profile qualified ID.\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Optional query parameter, defines version constraint pattern (https://github.com/Masterminds/semver#checking-version-constraints).\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A possibly empty list of Workload Profile Versions.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkloadProfileVersionResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationRequest": {
        "description": "An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.\n\nApps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.",
        "example": {
          "created_at": "2020-05-22T14:53:27Z",
          "created_by": "a.user@example.com",
          "envs": [
            {
              "id": "my-env",
              "name": "My Environment"
            }
          ],
          "id": "my-app",
          "name": "My Application"
        },
        "properties": {
          "id": {
            "description": "The ID which refers to a specific application.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Application.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "ApplicationResponse": {
        "description": "An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.\n\nApps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.",
        "example": {
          "created_at": "2020-05-22T14:53:27Z",
          "created_by": "a.user@example.com",
          "envs": [
            {
              "id": "my-env",
              "name": "My Environment"
            }
          ],
          "id": "my-app",
          "name": "My Application"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp in UTC indicates when the Application was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created the Application.",
            "type": "string"
          },
          "envs": {
            "description": "The Environments associated with the Application.",
            "items": {
              "$ref": "#/components/schemas/EnvironmentBaseResponse"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID which refers to a specific application.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Application.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "created_by",
          "envs"
        ],
        "type": "object"
      },
      "DeploymentErrorRequest": {
        "description": "DeploymentError is an error happening during deployment",
        "example": {
          "code": "CLD-001",
          "message": "Incorrect cloud provider credentials",
          "object_id": "my-workload",
          "scope": "workload",
          "summary": "Provider error"
        },
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentErrorResponse": {
        "description": "DeploymentError is an error happening during deployment",
        "example": {
          "code": "CLD-001",
          "message": "Incorrect cloud provider credentials",
          "object_id": "my-workload",
          "scope": "workload",
          "summary": "Provider error"
        },
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "scope",
          "object_id",
          "code",
          "summary",
          "message"
        ],
        "type": "object"
      },
      "DeploymentRequest": {
        "description": "Deployments represent updates to the running state of an Environment.\n\nDeployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be \"cloned\" into the current Environment with the option to apply a Delta.",
        "example": {
          "comment": "Updated version of module-one to v0.3.1",
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
          "env_id": "my-env",
          "from_id": "42d4b302fd3c",
          "id": "67f1619a57d",
          "status": "in progress",
          "status_changed_at": "2020-05-22T14:59:01Z"
        },
        "properties": {
          "comment": {
            "description": "An optional comment to help communicate the purpose of the Deployment.",
            "type": "string"
          },
          "delta_id": {
            "description": "ID of the Deployment Delta describing the changes to the current Environment for this Deployment.",
            "type": "string"
          },
          "value_set_version_id": {
            "description": "ID of the Value Set Version describe the values to be used for this Deployment.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentResponse": {
        "description": "Deployments represent updates to the running state of an Environment.\n\nDeployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be \"cloned\" into the current Environment with the option to apply a Delta.",
        "example": {
          "comment": "Updated version of module-one to v0.3.1",
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
          "env_id": "my-env",
          "from_id": "42d4b302fd3c",
          "id": "67f1619a57d",
          "status": "in progress",
          "status_changed_at": "2020-05-22T14:59:01Z"
        },
        "properties": {
          "comment": {
            "description": "An optional comment to help communicate the purpose of the Deployment.",
            "type": "string"
          },
          "created_at": {
            "description": "The Timestamp of when the Deployment was initiated.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who initiated the Deployment.",
            "type": "string"
          },
          "delta_id": {
            "description": "ID of the Deployment Delta describing the changes to the current Environment for this Deployment.",
            "type": "string"
          },
          "env_id": {
            "description": "The Environment where the Deployment occurred.",
            "type": "string"
          },
          "export_file": {
            "type": "string"
          },
          "export_status": {
            "type": "string"
          },
          "from_id": {
            "description": "The ID of the Deployment that this Deployment was based on.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the Deployment.",
            "type": "string"
          },
          "set_id": {
            "description": "ID of the Deployment Set describing the state of the Environment after Deployment.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.",
            "type": "string"
          },
          "status_changed_at": {
            "description": "The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "value_set_version_id": {
            "description": "ID of the Value Set Version describe the values to be used for this Deployment.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "set_id",
          "comment",
          "id",
          "env_id",
          "created_at",
          "created_by",
          "status",
          "status_changed_at",
          "from_id",
          "export_status",
          "export_file"
        ],
        "type": "object"
      },
      "DeploymentTimestampsRequest": {
        "description": "DeploymentTimestamps aggregates creation dates of current and next succeful deployments",
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "stopped_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentTimestampsResponse": {
        "description": "DeploymentTimestamps aggregates creation dates of current and next succeful deployments",
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "stopped_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "required": [
          "created_at"
        ],
        "type": "object"
      },
      "EnvironmentBaseRequest": {
        "properties": {
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "EnvironmentBaseResponse": {
        "properties": {
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "EnvironmentDefinitionRequest": {
        "properties": {
          "from_deploy_id": {
            "description": "Defines the existing Deployment the new Environment will be based on.",
            "type": "string"
          },
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "from_deploy_id"
        ],
        "type": "object"
      },
      "EnvironmentDefinitionResponse": {
        "properties": {
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "from_deploy_id"
        ],
        "type": "object"
      },
      "EnvironmentRequest": {
        "description": "Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "from_deploy": {
            "comment": "Updated version of module-one to v0.3.1",
            "created_at": "2020-05-22T14:58:07Z",
            "created_by": "a.user@example.com",
            "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
            "env_id": "my-env",
            "from_id": "42d4b302fd3c",
            "id": "67f1619a57d",
            "status": "in progress",
            "status_changed_at": "2020-05-22T14:59:01Z"
          },
          "id": "feature-test",
          "last_deploy": {
            "comment": "Updated version of module-one to v0.3.1",
            "created_at": "2020-05-22T14:58:07Z",
            "created_by": "a.user@example.com",
            "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
            "env_id": "my-env",
            "from_id": "42d4b302fd3c",
            "id": "67f1619a57d",
            "status": "in progress",
            "status_changed_at": "2020-05-22T14:59:01Z"
          },
          "name": "Feature Test",
          "type": "development"
        },
        "properties": {
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "EnvironmentResponse": {
        "description": "Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "from_deploy": {
            "comment": "Updated version of module-one to v0.3.1",
            "created_at": "2020-05-22T14:58:07Z",
            "created_by": "a.user@example.com",
            "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
            "env_id": "my-env",
            "from_id": "42d4b302fd3c",
            "id": "67f1619a57d",
            "status": "in progress",
            "status_changed_at": "2020-05-22T14:59:01Z"
          },
          "id": "feature-test",
          "last_deploy": {
            "comment": "Updated version of module-one to v0.3.1",
            "created_at": "2020-05-22T14:58:07Z",
            "created_by": "a.user@example.com",
            "delta_id": "df1ad41807b0390a9b0eaf8688e1f5baece9d764",
            "env_id": "my-env",
            "from_id": "42d4b302fd3c",
            "id": "67f1619a57d",
            "status": "in progress",
            "status_changed_at": "2020-05-22T14:59:01Z"
          },
          "name": "Feature Test",
          "type": "development"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp in UTC of when the Environment was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created the Environment",
            "type": "string"
          },
          "from_deploy": {
            "$ref": "#/components/schemas/DeploymentResponse",
            "description": "The Deployment which acts as the base for the next Deployment. Typically this will be identical to last_deploy but can differ if an Environment Rebase occurred.\n\nThis property is not present before the first Deployment in the first Environment in a new Application."
          },
          "id": {
            "description": "The ID the Environment is referenced as.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "last_deploy": {
            "$ref": "#/components/schemas/DeploymentResponse",
            "description": "The last Deployment to have occured in the environment. This is not present if a deployment is yet to occur in the Environment."
          },
          "name": {
            "description": "The Human-friendly name for the Environment.",
            "type": "string"
          },
          "type": {
            "description": "The Environment Type. This is used for organizing and managing Environments.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "created_by"
        ],
        "type": "object"
      },
      "EnvironmentTypeRequest": {
        "description": "Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.\n\nEnvironment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.",
        "example": {
          "description": "Environments used for automated QA.",
          "id": "qa-automation"
        },
        "properties": {
          "description": {
            "description": "A Human-readable description of the Environment Type",
            "type": "string"
          },
          "id": {
            "description": "The ID of the Environment Type. (Must be unique within an Organization.)",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EnvironmentTypeResponse": {
        "description": "Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.\n\nEnvironment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.",
        "example": {
          "description": "Environments used for automated QA.",
          "id": "qa-automation"
        },
        "properties": {
          "description": {
            "description": "A Human-readable description of the Environment Type",
            "type": "string"
          },
          "id": {
            "description": "The ID of the Environment Type. (Must be unique within an Organization.)",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "description"
        ],
        "type": "object"
      },
      "ExportFileRequest": {
        "description": "ExportFile is export file URL and metadata, it's  what export endpoint returns",
        "properties": {
          "created": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportFileResponse": {
        "description": "ExportFile is export file URL and metadata, it's  what export endpoint returns",
        "properties": {
          "created": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "name",
          "size",
          "created"
        ],
        "type": "object"
      },
      "ObjectUserRoleRequest": {
        "description": "ObjectUserRole holds the mapping of a Role that a User holds for a particular Object.",
        "example": {
          "object": "/orgs/my-org",
          "role": "manager",
          "user": "61048226-642c-438e-974f-ce5c013d94f8"
        },
        "properties": {
          "object": {
            "description": "The Object the the User holds the Role on",
            "type": "string"
          },
          "role": {
            "description": "The Role that this User holds on the Object",
            "type": "string"
          },
          "user": {
            "description": "The User ID that hold the Role on the Object",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectUserRoleResponse": {
        "description": "ObjectUserRole holds the mapping of a Role that a User holds for a particular Object.",
        "example": {
          "object": "/orgs/my-org",
          "role": "manager",
          "user": "61048226-642c-438e-974f-ce5c013d94f8"
        },
        "properties": {
          "object": {
            "description": "The Object the the User holds the Role on",
            "type": "string"
          },
          "role": {
            "description": "The Role that this User holds on the Object",
            "type": "string"
          },
          "user": {
            "description": "The User ID that hold the Role on the Object",
            "type": "string"
          }
        },
        "required": [
          "user",
          "role",
          "object"
        ],
        "type": "object"
      },
      "AddArtefactVersionPayloadRequest": {
        "description": "AddArtefactVersionPayload describes the payload for a new ArtefactVersion request.",
        "example": {
          "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
          "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
          "name": "registry.humanitec.io/my-org/my-service",
          "ref": "refs/heads/main",
          "type": "container",
          "version": "1.2.7"
        },
        "properties": {
          "commit": {
            "description": "(Optional) The commit ID the Artefact Version was built on.",
            "pattern": "^[0-9a-f]{5,40}$",
            "type": "string"
          },
          "digest": {
            "description": "(Optional) The Artefact Version digest.",
            "type": "string"
          },
          "name": {
            "description": "The Artefact name.",
            "type": "string"
          },
          "ref": {
            "description": "(Optional) The ref the Artefact Version was built from.",
            "type": "string"
          },
          "type": {
            "description": "The Artefact Version type.",
            "type": "string"
          },
          "version": {
            "description": "(Optional) The Artefact Version.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "AddArtefactVersionPayloadResponse": {
        "description": "AddArtefactVersionPayload describes the payload for a new ArtefactVersion request.",
        "example": {
          "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
          "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
          "name": "registry.humanitec.io/my-org/my-service",
          "ref": "refs/heads/main",
          "type": "container",
          "version": "1.2.7"
        },
        "properties": {
          "commit": {
            "description": "(Optional) The commit ID the Artefact Version was built on.",
            "pattern": "^[0-9a-f]{5,40}$",
            "type": "string"
          },
          "digest": {
            "description": "(Optional) The Artefact Version digest.",
            "type": "string"
          },
          "name": {
            "description": "The Artefact name.",
            "type": "string"
          },
          "ref": {
            "description": "(Optional) The ref the Artefact Version was built from.",
            "type": "string"
          },
          "type": {
            "description": "The Artefact Version type.",
            "type": "string"
          },
          "version": {
            "description": "(Optional) The Artefact Version.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "version",
          "type",
          "commit",
          "ref",
          "digest"
        ],
        "type": "object"
      },
      "ArtefactRequest": {
        "description": "Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.",
        "example": {
          "created_at": "2020-05-12T16:12:13Z",
          "created_by": "123456789",
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "name": "registry.humanitec.io/my-org/my-service",
          "type": "container",
          "updated_at": "2020-06-12T16:12:13Z",
          "updated_by": "987654321"
        },
        "properties": {
          "id": {
            "description": "The UUID of the Artefact.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Artefact.",
            "type": "string"
          },
          "type": {
            "description": "The type of the Artefact.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "ArtefactResponse": {
        "description": "Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.",
        "example": {
          "created_at": "2020-05-12T16:12:13Z",
          "created_by": "123456789",
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "name": "registry.humanitec.io/my-org/my-service",
          "type": "container",
          "updated_at": "2020-06-12T16:12:13Z",
          "updated_by": "987654321"
        },
        "properties": {
          "created_at": {
            "description": "The time when the Artefact was added to Humanitec.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user ID of the user who added the Artefact to Humanitec.",
            "type": "string"
          },
          "id": {
            "description": "The UUID of the Artefact.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Artefact.",
            "type": "string"
          },
          "type": {
            "description": "The type of the Artefact.",
            "type": "string"
          },
          "updated_at": {
            "description": "The time when the Artefact was updated for the last time.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "updated_by": {
            "description": "The user ID of the user who updated the Artefact for the last time.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "ArtefactVersionRequest": {
        "description": "An Artefact Version represents a particular version of an Artefact that can be added to an Application.",
        "example": {
          "archived": false,
          "artefact_id": "123e4567-e89b-12d3-a456-426614174000",
          "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
          "created_at": "2020-05-25T17:41:57Z",
          "created_by": "987654321",
          "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
          "id": "b4c9e4e2-b3e5-11ec-b909-0242ac120002",
          "name": "registry.humanitec.io/my-org/my-service",
          "ref": "refs/heads/main",
          "updated_at": "2020-06-25T17:41:57Z",
          "updated_by": "123456789",
          "version": "1.2.6"
        },
        "properties": {
          "archived": {
            "description": "If the Artefact Version is archived.",
            "type": "boolean"
          },
          "artefact_id": {
            "description": "The UUID of the Artefact.",
            "type": "string"
          },
          "commit": {
            "description": "(Optional) The commit ID the Artefact Version was built on.",
            "type": "string"
          },
          "digest": {
            "description": "(Optional) The Artefact Version digest.",
            "type": "string"
          },
          "id": {
            "description": "The UUID of the Artefact Version.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Artefact.",
            "type": "string"
          },
          "ref": {
            "description": "(Optional) The ref the Artefact Version was built from.",
            "type": "string"
          },
          "version": {
            "description": "(Optional) The version of the Artefact Version.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "artefact_id"
        ],
        "type": "object"
      },
      "ArtefactVersionResponse": {
        "description": "An Artefact Version represents a particular version of an Artefact that can be added to an Application.",
        "example": {
          "archived": false,
          "artefact_id": "123e4567-e89b-12d3-a456-426614174000",
          "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
          "created_at": "2020-05-25T17:41:57Z",
          "created_by": "987654321",
          "digest": "sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244",
          "id": "b4c9e4e2-b3e5-11ec-b909-0242ac120002",
          "name": "registry.humanitec.io/my-org/my-service",
          "ref": "refs/heads/main",
          "updated_at": "2020-06-25T17:41:57Z",
          "updated_by": "123456789",
          "version": "1.2.6"
        },
        "properties": {
          "archived": {
            "description": "If the Artefact Version is archived.",
            "type": "boolean"
          },
          "artefact_id": {
            "description": "The UUID of the Artefact.",
            "type": "string"
          },
          "commit": {
            "description": "(Optional) The commit ID the Artefact Version was built on.",
            "type": "string"
          },
          "created_at": {
            "description": "The time when the Artefact Version was added to Humanitec.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user ID of the user who added the Artefact Version to Humanitec.",
            "type": "string"
          },
          "digest": {
            "description": "(Optional) The Artefact Version digest.",
            "type": "string"
          },
          "id": {
            "description": "The UUID of the Artefact Version.",
            "type": "string"
          },
          "name": {
            "description": "The name of the Artefact.",
            "type": "string"
          },
          "ref": {
            "description": "(Optional) The ref the Artefact Version was built from.",
            "type": "string"
          },
          "updated_at": {
            "description": "The time when the Artefact Version was updated for the last time.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "updated_by": {
            "description": "The user ID of the user who performed the last updated on the Artefact Version.",
            "type": "string"
          },
          "version": {
            "description": "(Optional) The version of the Artefact Version.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "artefact_id",
          "commit",
          "ref",
          "digest",
          "archived"
        ],
        "type": "object"
      },
      "HumanitecErrorRequest": {
        "description": "HumanitecError represents a standard Humanitec Error",
        "example": {
          "error": "Could not validate token.",
          "message": "Could not validate token."
        },
        "properties": {
          "details": {
            "additionalProperties": true,
            "type": "object",
            "description": "(Optional) Additional information is enclosed here."
          },
          "error": {
            "type": "string",
            "description": "A short code to help with error identification."
          },
          "message": {
            "type": "string",
            "description": "A Human readable message about the error."
          }
        },
        "type": "object"
      },
      "HumanitecErrorResponse": {
        "description": "HumanitecError represents a standard Humanitec Error",
        "example": {
          "error": "Could not validate token.",
          "message": "Could not validate token."
        },
        "properties": {
          "details": {
            "additionalProperties": true,
            "type": "object",
            "description": "(Optional) Additional information is enclosed here."
          },
          "error": {
            "type": "string",
            "description": "A short code to help with error identification."
          },
          "message": {
            "type": "string",
            "description": "A Human readable message about the error."
          }
        },
        "required": [
          "error",
          "message"
        ],
        "type": "object"
      },
      "ImageBuildRequest": {
        "description": "DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nHolds the metadata associated withe a Container Image Build",
        "properties": {
          "branch": {
            "description": "The branch name of the branch the build was built on",
            "type": "string"
          },
          "commit": {
            "description": "The commit ID that this build was built from.",
            "type": "string"
          },
          "image": {
            "description": "The fully qualified Image URL including registry, repository and tag.",
            "pattern": "^((?:[\\w.\\-_]+(?:(?::\\d+|)(?=/[a-z0-9._-]+/[a-z0-9._-]+))|)(?:/|)(?:[a-z0-9.\\-_]+(?:/[a-z0-9.\\-_]+|)))(?::)?((?:[\\w.\\-]{1,127}|)(?:0[xX][0-9a-fA-F]+|))?$'",
            "type": "string"
          },
          "tags": {
            "description": "The tag that the build was built from.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImageBuildResponse": {
        "description": "DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nHolds the metadata associated withe a Container Image Build",
        "properties": {
          "added_at": {
            "description": "The time when the build was added to Humanitec.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "branch": {
            "description": "The branch name of the branch the build was built on",
            "type": "string"
          },
          "commit": {
            "description": "The commit ID that this build was built from.",
            "type": "string"
          },
          "image": {
            "description": "The fully qualified Image URL including registry, repository and tag.",
            "pattern": "^((?:[\\w.\\-_]+(?:(?::\\d+|)(?=/[a-z0-9._-]+/[a-z0-9._-]+))|)(?:/|)(?:[a-z0-9.\\-_]+(?:/[a-z0-9.\\-_]+|)))(?::)?((?:[\\w.\\-]{1,127}|)(?:0[xX][0-9a-fA-F]+|))?$'",
            "type": "string"
          },
          "tags": {
            "description": "The tag that the build was built from.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "image",
          "commit",
          "branch",
          "tags"
        ],
        "type": "object"
      },
      "ImageRequest": {
        "description": "DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nContainer Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.",
        "example": {
          "added_at": "22020-06-25T17:41:57Z",
          "builds": [
            {
              "added_at": "2020-06-25T19:37:22Z",
              "branch": "master",
              "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
              "image": "registry.humanitec.io/my-org/my-service:1.2.7"
            },
            {
              "added_at": "2020-06-25T17:41:57Z",
              "branch": "master",
              "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
              "image": "registry.humanitec.io/my-org/my-service:1.2.6"
            }
          ],
          "id": "my-service",
          "source": "github"
        },
        "properties": {
          "added_at": {
            "description": "The time the first build of this Image was added to the organization",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "builds": {
            "description": "A list of Image Builds ordered by addition date.",
            "items": {
              "$ref": "#/components/schemas/ImageBuildRequest"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID used to group different builds of the same Image together.",
            "type": "string"
          },
          "source": {
            "description": "The Image Source that this Image is added via",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageResponse": {
        "description": "DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nContainer Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.",
        "example": {
          "added_at": "22020-06-25T17:41:57Z",
          "builds": [
            {
              "added_at": "2020-06-25T19:37:22Z",
              "branch": "master",
              "commit": "884bccaa807ea27cc1997a7492a3b6279fd7bd55",
              "image": "registry.humanitec.io/my-org/my-service:1.2.7"
            },
            {
              "added_at": "2020-06-25T17:41:57Z",
              "branch": "master",
              "commit": "060c3d6530a881afb808f105f36af25e1ad1b2f3",
              "image": "registry.humanitec.io/my-org/my-service:1.2.6"
            }
          ],
          "id": "my-service",
          "source": "github"
        },
        "properties": {
          "added_at": {
            "description": "The time the first build of this Image was added to the organization",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "builds": {
            "description": "A list of Image Builds ordered by addition date.",
            "items": {
              "$ref": "#/components/schemas/ImageBuildResponse"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID used to group different builds of the same Image together.",
            "type": "string"
          },
          "source": {
            "description": "The Image Source that this Image is added via",
            "type": "string"
          }
        },
        "required": [
          "id",
          "source",
          "builds",
          "added_at"
        ],
        "type": "object"
      },
      "UpdateArtefactVersionPayloadRequest": {
        "description": "UpdateArtefactVersionPayload contains the `archived` field that should be set in the Artefact Version to update.",
        "example": {
          "archived": true
        },
        "properties": {
          "archived": {
            "description": "The Value of the archived value.",
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "archived"
        ],
        "type": "object"
      },
      "UpdateArtefactVersionPayloadResponse": {
        "description": "UpdateArtefactVersionPayload contains the `archived` field that should be set in the Artefact Version to update.",
        "example": {
          "archived": true
        },
        "properties": {
          "archived": {
            "description": "The Value of the archived value.",
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "archived"
        ],
        "type": "object"
      },
      "ObjectRoleRequest": {
        "description": "IdP metadata needed by Humanitec to interact with a SAML IdP",
        "example": {
          "object": "/orgs/example-org/apps/example-app",
          "role": "developer"
        },
        "properties": {
          "object": {
            "description": "The ID of the object",
            "type": "string"
          },
          "role": {
            "description": "The Role that this User holds on the Object",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectRoleResponse": {
        "description": "IdP metadata needed by Humanitec to interact with a SAML IdP",
        "example": {
          "object": "/orgs/example-org/apps/example-app",
          "role": "developer"
        },
        "properties": {
          "object": {
            "description": "The ID of the object",
            "type": "string"
          },
          "role": {
            "description": "The Role that this User holds on the Object",
            "type": "string"
          }
        },
        "required": [
          "role"
        ],
        "type": "object"
      },
      "UserRoleRequest": {
        "description": "UserRole holds the mapping of role to user for a particular object.",
        "example": {
          "role": "manager",
          "user": "61048226-642c-438e-974f-ce5c013d94f8",
          "email": "jo.trigg@awesomecorp.com",
          "id": "730c1f96-8ee5-4bff-8c22-898e0530b924",
          "invite": "accepted",
          "name": "Jo Trigg"
        },
        "properties": {
          "role": {
            "description": "The role that this user holds",
            "type": "string"
          },
          "user": {
            "description": "The user ID that hold the role",
            "type": "string"
          },
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "invite": {
            "description": "The status of an invitation (If applicable)",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserRoleResponse": {
        "description": "UserRole holds the mapping of role to user for a particular object.",
        "example": {
          "role": "manager",
          "user": "61048226-642c-438e-974f-ce5c013d94f8",
          "email": "jo.trigg@awesomecorp.com",
          "id": "730c1f96-8ee5-4bff-8c22-898e0530b924",
          "invite": "accepted",
          "name": "Jo Trigg"
        },
        "properties": {
          "role": {
            "description": "The role that this user holds",
            "type": "string"
          },
          "user": {
            "description": "The user ID that hold the role",
            "type": "string"
          },
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "invite": {
            "description": "The status of an invitation (If applicable)",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "role"
        ],
        "type": "object"
      },
      "AutomationRuleRequest": {
        "description": "An Automation Rule defining how and when artefacts in an environment should be updated.",
        "example": {
          "active": true,
          "artefacts_filter": [
            "http://registry.org/sample-service"
          ],
          "created_at": "2021-07-22T14:53:27Z",
          "created_by": "0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70",
          "exclude_artefacts_filter": false,
          "exclude_images_filter": false,
          "id": "923486d012f20324",
          "images_filter": [
            "sample-service"
          ],
          "match": "^pr-[0-9]+-.*$",
          "match_ref": "^refs/heads/pr-[0-9]+-.*$",
          "type": "update",
          "update_to": "branch"
        },
        "properties": {
          "active": {
            "description": "Whether the rule will be processed or not.",
            "type": "boolean"
          },
          "artefacts_filter": {
            "description": "A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exclude_artefacts_filter": {
            "description": "Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.",
            "type": "boolean"
          },
          "exclude_images_filter": {
            "description": "DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.",
            "type": "boolean"
          },
          "images_filter": {
            "description": "DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "match": {
            "description": "DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.",
            "type": "string"
          },
          "match_ref": {
            "description": "A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.",
            "type": "string"
          },
          "type": {
            "description": "Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `\"update\"`.",
            "pattern": "^(?:update)$",
            "type": "string"
          },
          "update_to": {
            "description": "DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `\"branch\"` or `\"tag\"`.",
            "pattern": "^(?:branch|tag)$",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AutomationRuleResponse": {
        "description": "An Automation Rule defining how and when artefacts in an environment should be updated.",
        "example": {
          "active": true,
          "artefacts_filter": [
            "http://registry.org/sample-service"
          ],
          "created_at": "2021-07-22T14:53:27Z",
          "created_by": "0dbbdc88-b125-47f1-9a96-6c4c9d6ddc70",
          "exclude_artefacts_filter": false,
          "exclude_images_filter": false,
          "id": "923486d012f20324",
          "images_filter": [
            "sample-service"
          ],
          "match": "^pr-[0-9]+-.*$",
          "match_ref": "^refs/heads/pr-[0-9]+-.*$",
          "type": "update",
          "update_to": "branch"
        },
        "properties": {
          "active": {
            "description": "Whether the rule will be processed or not.",
            "type": "boolean"
          },
          "artefacts_filter": {
            "description": "A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "description": "The timestamp in UTC of when the Automation Rule was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "exclude_artefacts_filter": {
            "description": "Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.",
            "type": "boolean"
          },
          "exclude_images_filter": {
            "description": "DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique ID for this rule.",
            "type": "string"
          },
          "images_filter": {
            "description": "DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "match": {
            "description": "DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.",
            "type": "string"
          },
          "match_ref": {
            "description": "A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.",
            "type": "string"
          },
          "type": {
            "description": "Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `\"update\"`.",
            "pattern": "^(?:update)$",
            "type": "string"
          },
          "update_to": {
            "description": "DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `\"branch\"` or `\"tag\"`.",
            "pattern": "^(?:branch|tag)$",
            "type": "string"
          },
          "updated_at": {
            "description": "The timestamp in UTC of when the Automation Rule was updated.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "active",
          "type",
          "images_filter",
          "artefacts_filter",
          "exclude_images_filter",
          "exclude_artefacts_filter",
          "update_to",
          "match",
          "match_ref",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      },
      "ErrorInfoRequest": {
        "description": "ErrorInfo is returned by a handler in case of an error.",
        "properties": {
          "error": {
            "description": "An error details",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorInfoResponse": {
        "description": "ErrorInfo is returned by a handler in case of an error.",
        "properties": {
          "error": {
            "description": "An error details",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "DeltaMetadataRequest": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "contributers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "env_id": {
            "type": "string"
          },
          "last_modified_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shared": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeltaMetadataResponse": {
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "contributers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "env_id": {
            "type": "string"
          },
          "last_modified_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shared": {
            "type": "boolean"
          }
        },
        "required": [
          "created_by",
          "created_at",
          "last_modified_at",
          "archived"
        ],
        "type": "object"
      },
      "DeltaRequest": {
        "description": "A Deployment Delta (or just \"Delta\") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.\n\nDeployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Delta.>,\n   \"metadata\": {\n     <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>\n   }\n   \"modules\" : {\n     \"add\" : {\n       <ID of Module to add to the Deployment Set> : {\n         <An entire Modules object>\n       }\n     },\n     \"remove\": [\n       <An array of Module IDs that should be removed from the Deployment Set>\n     ],\n    \"update\": {\n       <ID of Module already in the Set to be updated> : [\n         <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>\n       ]\n     }\n   }\n }\n```",
        "example": {
          "id": "49393b5004d072000b8abfd910c61685eb9235f5",
          "metadata": {},
          "modules": {
            "add": {
              "redis-cache": {
                "profile": "humanitec/redis"
              }
            },
            "remove": [
              "simple-service"
            ],
            "update": {
              "module-one": [
                {
                  "op": "replace",
                  "path": "/spec/containers/core-service/variables/EXAMPLE",
                  "value": "New Value"
                }
              ]
            }
          }
        },
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DeltaMetadataRequest",
            "description": "Holds various metadata such as a Human-friendly name, collaborators, and Environment it is associated with."
          },
          "modules": {
            "$ref": "#/components/schemas/ModuleDeltasRequest",
            "description": "A dictionary of the Modules this Delta has operations for."
          },
          "shared": {
            "items": {
              "$ref": "#/components/schemas/UpdateActionRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeltaResponse": {
        "description": "A Deployment Delta (or just \"Delta\") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.\n\nDeployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Delta.>,\n   \"metadata\": {\n     <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>\n   }\n   \"modules\" : {\n     \"add\" : {\n       <ID of Module to add to the Deployment Set> : {\n         <An entire Modules object>\n       }\n     },\n     \"remove\": [\n       <An array of Module IDs that should be removed from the Deployment Set>\n     ],\n    \"update\": {\n       <ID of Module already in the Set to be updated> : [\n         <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>\n       ]\n     }\n   }\n }\n```",
        "example": {
          "id": "49393b5004d072000b8abfd910c61685eb9235f5",
          "metadata": {},
          "modules": {
            "add": {
              "redis-cache": {
                "profile": "humanitec/redis"
              }
            },
            "remove": [
              "simple-service"
            ],
            "update": {
              "module-one": [
                {
                  "op": "replace",
                  "path": "/spec/containers/core-service/variables/EXAMPLE",
                  "value": "New Value"
                }
              ]
            }
          }
        },
        "properties": {
          "id": {
            "description": "A unique ID for the Delta",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/DeltaMetadataResponse",
            "description": "Holds various metadata such as a Human-friendly name, collaborators, and Environment it is associated with."
          },
          "modules": {
            "$ref": "#/components/schemas/ModuleDeltasResponse",
            "description": "A dictionary of the Modules this Delta has operations for."
          },
          "shared": {
            "items": {
              "$ref": "#/components/schemas/UpdateActionResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "metadata",
          "modules",
          "shared"
        ],
        "type": "object"
      },
      "ModuleDeltasRequest": {
        "description": "ModuleDeltas groups the different operations together.",
        "properties": {
          "add": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object"
          },
          "remove": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "update": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/UpdateActionRequest"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ModuleDeltasResponse": {
        "description": "ModuleDeltas groups the different operations together.",
        "properties": {
          "add": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object"
          },
          "remove": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "update": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/UpdateActionResponse"
              },
              "type": "array"
            },
            "type": "object"
          }
        },
        "required": [
          "add",
          "remove",
          "update"
        ],
        "type": "object"
      },
      "SetRequest": {
        "description": "A Deployment Set (or just \"Set\") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.\n\nDeployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.\n\nDeployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Set>,\n   \"modules\" : {\n     <ID of Module> : {\n       \"profile\": <Defines how the optional \"spec\" property is interpreted>\n       \"spec\": {\n         <Properties that depend on the \"profile\" property.>\n       }\n       \"externals\": {\n         <External Resource Name> : {\n           \"type\": <Resource Type>,\n           \"params\": {\n             <Properties which parametrize the resource depending on the Resource Type.>\n           }\n         }\n       }\n     }\n   }\n }\n```\n\nFor details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].",
        "example": {
          "modules": {
            "module-one": {
              "externals": {
                "db-one": {
                  "params": {
                    "extensions": {
                      "uuid-ossp": {}
                    }
                  },
                  "type": "postgres"
                }
              },
              "profile": "humanitec/default-module",
              "spec": {
                "containers": {
                  "core-service": {
                    "id": "core-service",
                    "image": "registry.humanitec.io/my-org/core-service:VERSION_ONE",
                    "readiness_probe": {
                      "path": "/healtz",
                      "port": 8080,
                      "type": "http"
                    },
                    "variables": {
                      "DBHOST": "${externals.db-one.name}",
                      "DBNAME": "${externals.db-one.name}",
                      "DBPASSWORD": "${externals.db-one.password}",
                      "DBUSERNAME": "${externals.db-one.username}",
                      "REDIS_URL": "redis://${modules.redis-cache.service.name}"
                    }
                  }
                }
              }
            },
            "redis-cache": {
              "profile": "humanitec/redis"
            }
          }
        },
        "properties": {
          "modules": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "description": "The Modules that make up the Set",
            "type": "object"
          },
          "shared": {
            "additionalProperties": true,
            "description": "Resources that are shared across the set",
            "type": "object"
          },
          "version": {
            "description": "The version of the Deployment Set Schema to use. (Currently, only 0 is supported, and if omitted, version 0 is assumed.)",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SetResponse": {
        "description": "A Deployment Set (or just \"Set\") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.\n\nDeployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.\n\nDeployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Set>,\n   \"modules\" : {\n     <ID of Module> : {\n       \"profile\": <Defines how the optional \"spec\" property is interpreted>\n       \"spec\": {\n         <Properties that depend on the \"profile\" property.>\n       }\n       \"externals\": {\n         <External Resource Name> : {\n           \"type\": <Resource Type>,\n           \"params\": {\n             <Properties which parametrize the resource depending on the Resource Type.>\n           }\n         }\n       }\n     }\n   }\n }\n```\n\nFor details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].",
        "example": {
          "modules": {
            "module-one": {
              "externals": {
                "db-one": {
                  "params": {
                    "extensions": {
                      "uuid-ossp": {}
                    }
                  },
                  "type": "postgres"
                }
              },
              "profile": "humanitec/default-module",
              "spec": {
                "containers": {
                  "core-service": {
                    "id": "core-service",
                    "image": "registry.humanitec.io/my-org/core-service:VERSION_ONE",
                    "readiness_probe": {
                      "path": "/healtz",
                      "port": 8080,
                      "type": "http"
                    },
                    "variables": {
                      "DBHOST": "${externals.db-one.name}",
                      "DBNAME": "${externals.db-one.name}",
                      "DBPASSWORD": "${externals.db-one.password}",
                      "DBUSERNAME": "${externals.db-one.username}",
                      "REDIS_URL": "redis://${modules.redis-cache.service.name}"
                    }
                  }
                }
              }
            },
            "redis-cache": {
              "profile": "humanitec/redis"
            }
          }
        },
        "properties": {
          "id": {
            "description": "The ID which is a hash of the content of the Deployment Set.",
            "type": "string"
          },
          "modules": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "description": "The Modules that make up the Set",
            "type": "object"
          },
          "shared": {
            "additionalProperties": true,
            "description": "Resources that are shared across the set",
            "type": "object"
          },
          "version": {
            "description": "The version of the Deployment Set Schema to use. (Currently, only 0 is supported, and if omitted, version 0 is assumed.)",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "modules",
          "shared",
          "version"
        ],
        "type": "object"
      },
      "UpdateActionRequest": {
        "description": "A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:\n\n* Only `add`, `remove` and `replace` are supported\n\n* `remove` can have have its scope of application applied in its `value`. e.g. `{\"scope\":\"delta\"}",
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "UpdateActionResponse": {
        "description": "A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:\n\n* Only `add`, `remove` and `replace` are supported\n\n* `remove` can have have its scope of application applied in its `value`. e.g. `{\"scope\":\"delta\"}",
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "EventBaseRequest": {
        "description": "Properties which identify an event .",
        "properties": {
          "scope": {
            "description": "Event scope",
            "type": "string"
          },
          "type": {
            "description": "Event type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventBaseResponse": {
        "description": "Properties which identify an event .",
        "properties": {
          "scope": {
            "description": "Event scope",
            "type": "string"
          },
          "type": {
            "description": "Event type",
            "type": "string"
          }
        },
        "required": [
          "scope",
          "type"
        ],
        "type": "object"
      },
      "EventRequest": {
        "description": "Events available for triggering automated jobs.",
        "properties": {
          "properties": {
            "description": "List of event properties which can be used as variables for this event",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scope": {
            "description": "Event scope",
            "type": "string"
          },
          "type": {
            "description": "Event type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventResponse": {
        "description": "Events available for triggering automated jobs.",
        "properties": {
          "properties": {
            "description": "List of event properties which can be used as variables for this event",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scope": {
            "description": "Event scope",
            "type": "string"
          },
          "type": {
            "description": "Event type",
            "type": "string"
          }
        },
        "required": [
          "scope",
          "type",
          "properties"
        ],
        "type": "object"
      },
      "JSONFieldRequest": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "JSONFieldResponse": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "WebhookRequest": {
        "description": "Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.",
        "properties": {
          "disabled": {
            "description": "Defines whether this job is currently disabled.",
            "nullable": true,
            "type": "boolean"
          },
          "headers": {
            "$ref": "#/components/schemas/JSONFieldRequest",
            "description": "Thw webhook's HTTP headers"
          },
          "id": {
            "description": "Job ID, unique within the Organization",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/JSONFieldRequest",
            "description": "Thw webhook's HTTP headers"
          },
          "triggers": {
            "description": "A list of Events by which the Job is triggered",
            "items": {
              "$ref": "#/components/schemas/EventBaseRequest"
            },
            "type": "array"
          },
          "url": {
            "description": "Thw webhook's URL (without protocol, only HTTPS is supported)",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookResponse": {
        "description": "Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.",
        "properties": {
          "created_at": {
            "description": "The timestamp of when this Job was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this Job",
            "type": "string"
          },
          "disabled": {
            "description": "Defines whether this job is currently disabled.",
            "nullable": true,
            "type": "boolean"
          },
          "headers": {
            "$ref": "#/components/schemas/JSONFieldResponse",
            "description": "Thw webhook's HTTP headers"
          },
          "id": {
            "description": "Job ID, unique within the Organization",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/JSONFieldResponse",
            "description": "Thw webhook's HTTP headers"
          },
          "triggers": {
            "description": "A list of Events by which the Job is triggered",
            "items": {
              "$ref": "#/components/schemas/EventBaseResponse"
            },
            "type": "array"
          },
          "url": {
            "description": "Thw webhook's URL (without protocol, only HTTPS is supported)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "disabled",
          "triggers",
          "url",
          "headers",
          "payload"
        ],
        "type": "object"
      },
      "CreateOrganizationRequestRequest": {
        "properties": {
          "id": {
            "description": "Unique ID for the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "Human friendly name for the Organization.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "CreateOrganizationRequestResponse": {
        "properties": {
          "id": {
            "description": "Unique ID for the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "Human friendly name for the Organization.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "OrganizationRequest": {
        "description": "An Organization is the top level object in Humanitec. All other objects belong to an Organization.",
        "properties": {
          "id": {
            "description": "Unique ID for the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "Human friendly name for the Organization.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationResponse": {
        "description": "An Organization is the top level object in Humanitec. All other objects belong to an Organization.",
        "properties": {
          "created_at": {
            "description": "Timestamp when the Organization was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "User ID that created the Organization.",
            "type": "string"
          },
          "id": {
            "description": "Unique ID for the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "Human friendly name for the Organization.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "created_by"
        ],
        "type": "object"
      },
      "AccountCredsRequest": {
        "description": "AccountCreds represents an account credentials (either, username- or token-based).",
        "example": {
          "expires": "2020-05-22T14:53:27Z",
          "password": "",
          "username": ""
        },
        "properties": {
          "expires": {
            "description": "Account credentials expiration timestamp.",
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "password": {
            "description": "Account password or token secret.",
            "type": "string"
          },
          "username": {
            "description": "Security account login or token.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "type": "object"
      },
      "AccountCredsResponse": {
        "description": "AccountCreds represents an account credentials (either, username- or token-based).",
        "example": {
          "expires": "2020-05-22T14:53:27Z",
          "password": "",
          "username": ""
        },
        "properties": {
          "expires": {
            "description": "Account credentials expiration timestamp.",
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "password": {
            "description": "Account password or token secret.",
            "type": "string"
          },
          "username": {
            "description": "Security account login or token.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ],
        "type": "object"
      },
      "ClusterSecretRequest": {
        "description": "ClusterSecret represents Kubernetes secret reference.",
        "example": {
          "namespace": "dev-secrets",
          "secret": "custom-regcred"
        },
        "properties": {
          "namespace": {
            "description": "Namespace to look for the Kubernetes secret definition in.",
            "type": "string"
          },
          "secret": {
            "description": "Name that identifies the Kubernetes secret.",
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "secret"
        ],
        "type": "object"
      },
      "ClusterSecretResponse": {
        "description": "ClusterSecret represents Kubernetes secret reference.",
        "example": {
          "namespace": "dev-secrets",
          "secret": "custom-regcred"
        },
        "properties": {
          "namespace": {
            "description": "Namespace to look for the Kubernetes secret definition in.",
            "type": "string"
          },
          "secret": {
            "description": "Name that identifies the Kubernetes secret.",
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "secret"
        ],
        "type": "object"
      },
      "ClusterSecretsMapRequest": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ClusterSecretRequest"
        },
        "description": "ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.",
        "example": {
          "*": {
            "namespace": "dev-secrets",
            "secret": "custom-regcred"
          },
          "cluster-A": {
            "namespace": "prod-secrets",
            "secret": "custom-regcred"
          }
        },
        "type": "object"
      },
      "ClusterSecretsMapResponse": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ClusterSecretResponse"
        },
        "description": "ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.",
        "example": {
          "*": {
            "namespace": "dev-secrets",
            "secret": "custom-regcred"
          },
          "cluster-A": {
            "namespace": "prod-secrets",
            "secret": "custom-regcred"
          }
        },
        "type": "object"
      },
      "ImagesRegistryCredsRequest": {
        "description": "ImagesRegistryCreds stores registry credentials details alongside with associated images.",
        "properties": {
          "images": {
            "description": "List of images associated with the registry.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapRequest",
            "description": "A list of Kuberenetes secret references for the target deployment clusters."
          }
        },
        "required": [
          "registry",
          "images"
        ],
        "type": "object"
      },
      "ImagesRegistryCredsResponse": {
        "description": "ImagesRegistryCreds stores registry credentials details alongside with associated images.",
        "properties": {
          "images": {
            "description": "List of images associated with the registry.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapResponse",
            "description": "A list of Kuberenetes secret references for the target deployment clusters."
          }
        },
        "required": [
          "registry",
          "secrets",
          "images"
        ],
        "type": "object"
      },
      "RegistriesCredsRequestRequest": {
        "description": "Registries credentials look-up request.",
        "example": [
          "registry.humanitec.io/public/sample-app:1.3.0",
          "registry.humanitec.io/public/sample-service:1.3.0",
          "gcr.io/sample-project/sample-proxy:1.0.0"
        ],
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "RegistriesCredsRequestResponse": {
        "description": "Registries credentials look-up request.",
        "example": [
          "registry.humanitec.io/public/sample-app:1.3.0",
          "registry.humanitec.io/public/sample-service:1.3.0",
          "gcr.io/sample-project/sample-proxy:1.0.0"
        ],
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "RegistriesCredsResponseRequest": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ImagesRegistryCredsRequest"
        },
        "description": "Registries credentials look-up response.",
        "example": {
          "gcr": {
            "images": [
              "gcr.io/sample-project/sample-proxy:1.0.0"
            ],
            "registry": "gcr-io/sample-project",
            "secrets": {
              "*": {
                "namespace": "gcr-secrets",
                "secret": "gcr-regcred"
              }
            }
          },
          "humanitec": {
            "images": [
              "registry.humanitec.io/public/sample-app:1.3.0",
              "registry.humanitec.io/public/sample-service:1.3.0"
            ],
            "password": "S54f$lgO-45",
            "registry": "registry.humanitec.io",
            "username": "test-org.harbor@humanitec.com"
          }
        },
        "type": "object"
      },
      "RegistriesCredsResponseResponse": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ImagesRegistryCredsResponse"
        },
        "description": "Registries credentials look-up response.",
        "example": {
          "gcr": {
            "images": [
              "gcr.io/sample-project/sample-proxy:1.0.0"
            ],
            "registry": "gcr-io/sample-project",
            "secrets": {
              "*": {
                "namespace": "gcr-secrets",
                "secret": "gcr-regcred"
              }
            }
          },
          "humanitec": {
            "images": [
              "registry.humanitec.io/public/sample-app:1.3.0",
              "registry.humanitec.io/public/sample-service:1.3.0"
            ],
            "password": "S54f$lgO-45",
            "registry": "registry.humanitec.io",
            "username": "test-org.harbor@humanitec.com"
          }
        },
        "type": "object"
      },
      "RegistryCredsRequest": {
        "description": "RegistryCreds represents current registry credentials (either, username- or token-based).",
        "example": {
          "expires": "2020-05-22T14:53:27Z",
          "password": "",
          "registry": "registry.io/project",
          "secrets": {
            "*": {
              "namespace": "dev-secrets",
              "secret": "custom-regcred"
            },
            "cluster-A": {
              "namespace": "prod-secrets",
              "secret": "custom-regcred"
            }
          },
          "username": ""
        },
        "properties": {
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapRequest",
            "description": "A list of Kuberenetes secret references for the target deployment clusters."
          }
        },
        "required": [
          "registry",
          "secrets"
        ],
        "type": "object"
      },
      "RegistryCredsResponse": {
        "description": "RegistryCreds represents current registry credentials (either, username- or token-based).",
        "example": {
          "expires": "2020-05-22T14:53:27Z",
          "password": "",
          "registry": "registry.io/project",
          "secrets": {
            "*": {
              "namespace": "dev-secrets",
              "secret": "custom-regcred"
            },
            "cluster-A": {
              "namespace": "prod-secrets",
              "secret": "custom-regcred"
            }
          },
          "username": ""
        },
        "properties": {
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapResponse",
            "description": "A list of Kuberenetes secret references for the target deployment clusters."
          }
        },
        "required": [
          "registry",
          "secrets"
        ],
        "type": "object"
      },
      "RegistryRequest": {
        "description": "Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.\n\nHumanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.",
        "example": {
          "created_at": "2020-05-22T14:53:27Z",
          "created_by": "a.user@example.com",
          "enable_ci": false,
          "id": "humanitec",
          "registry": "registry.humanitec.io",
          "secrets": {
            "*": {
              "namespace": "dev-secrets",
              "secret": "custom-regcred"
            },
            "cluster-A": {
              "namespace": "prod-secrets",
              "secret": "custom-regcred"
            }
          },
          "type": "basic"
        },
        "properties": {
          "creds": {
            "$ref": "#/components/schemas/AccountCredsRequest",
            "description": "Registry security account credentials."
          },
          "enable_ci": {
            "description": "Indicates if registry secrets and credentials should be exposed to CI agents.",
            "type": "boolean"
          },
          "id": {
            "description": "Registry ID, unique within the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapRequest",
            "description": "Secrets stores references to the Kubernetes secret objects to be copied to the target clusters, identified by the map key."
          },
          "type": {
            "description": "Registry type, describes the registry authentication method, and defines the schema for the credentials.\n\nSupported values:\n\n- `public`\n\n- `basic`\n\n- `google_gcr`\n\n- `amazon_ecr`\n\n- `secret_ref`",
            "type": "string"
          }
        },
        "required": [
          "id",
          "registry",
          "type"
        ],
        "type": "object"
      },
      "RegistryResponse": {
        "description": "Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.\n\nHumanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.",
        "example": {
          "created_at": "2020-05-22T14:53:27Z",
          "created_by": "a.user@example.com",
          "enable_ci": false,
          "id": "humanitec",
          "registry": "registry.humanitec.io",
          "secrets": {
            "*": {
              "namespace": "dev-secrets",
              "secret": "custom-regcred"
            },
            "cluster-A": {
              "namespace": "prod-secrets",
              "secret": "custom-regcred"
            }
          },
          "type": "basic"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when this record was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "nullable": true,
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this record.",
            "type": "string"
          },
          "enable_ci": {
            "description": "Indicates if registry secrets and credentials should be exposed to CI agents.",
            "type": "boolean"
          },
          "id": {
            "description": "Registry ID, unique within the Organization.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "registry": {
            "description": "Registry name, usually in a \"{domain}\" or \"{domain}/{project}\" format.",
            "type": "string"
          },
          "secrets": {
            "$ref": "#/components/schemas/ClusterSecretsMapResponse",
            "description": "Secrets stores references to the Kubernetes secret objects to be copied to the target clusters, identified by the map key."
          },
          "type": {
            "description": "Registry type, describes the registry authentication method, and defines the schema for the credentials.\n\nSupported values:\n\n- `public`\n\n- `basic`\n\n- `google_gcr`\n\n- `amazon_ecr`\n\n- `secret_ref`",
            "type": "string"
          }
        },
        "required": [
          "id",
          "registry",
          "type",
          "enable_ci"
        ],
        "type": "object"
      },
      "AccountTypeRequest": {
        "description": "Resource Account Types define cloud providers or protocols to which a resource account can belong.",
        "example": {
          "name": "GCP",
          "type": "gcp"
        },
        "properties": {
          "name": {
            "description": "Display Name.",
            "type": "string"
          },
          "type": {
            "description": "Unique account type identifier (system-wide, across all organizations).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTypeResponse": {
        "description": "Resource Account Types define cloud providers or protocols to which a resource account can belong.",
        "example": {
          "name": "GCP",
          "type": "gcp"
        },
        "properties": {
          "name": {
            "description": "Display Name.",
            "type": "string"
          },
          "type": {
            "description": "Unique account type identifier (system-wide, across all organizations).",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "ActiveResourceRequest": {
        "description": "Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.\n\nActive Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.",
        "example": {
          "app_id": "test-app",
          "def_id": "gcp-dev-postgres",
          "env_id": "gcp-dev",
          "env_type": "development",
          "org_id": "test-org",
          "outputs": {
            "values": {
              "host": "127.0.0.1",
              "name": "db_33c7ef9b_8d90-4c62_a1cf_0cdd30fd29a9",
              "port": 5432
            }
          },
          "res_id": "modules.my-module.externals.my-db",
          "type": "postgres",
          "updated_at": "2020-06-23T16:53:12Z"
        },
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "DEPRECATED: For backward compatibility only. Use `resource` property instead.",
            "type": "object"
          },
          "def_id": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "env_type": {
            "description": "The Environment Type of the Environment specified by env_id.",
            "type": "string"
          },
          "org_id": {
            "description": "the ID of the Organization the Active Resource is associated with.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "The data that the resource passes into the deployment ('values' only).",
            "type": "object"
          },
          "status": {
            "description": "Current resource status: 'pending', 'active', or 'deleting'.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type of the resource",
            "type": "string"
          },
          "updated_at": {
            "description": "The time the resource was last provisioned as part of a deployment.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActiveResourceResponse": {
        "description": "Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.\n\nActive Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.",
        "example": {
          "app_id": "test-app",
          "def_id": "gcp-dev-postgres",
          "env_id": "gcp-dev",
          "env_type": "development",
          "org_id": "test-org",
          "outputs": {
            "values": {
              "host": "127.0.0.1",
              "name": "db_33c7ef9b_8d90-4c62_a1cf_0cdd30fd29a9",
              "port": 5432
            }
          },
          "res_id": "modules.my-module.externals.my-db",
          "type": "postgres",
          "updated_at": "2020-06-23T16:53:12Z"
        },
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "DEPRECATED: For backward compatibility only. Use `resource` property instead.",
            "type": "object"
          },
          "def_id": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "env_type": {
            "description": "The Environment Type of the Environment specified by env_id.",
            "type": "string"
          },
          "org_id": {
            "description": "the ID of the Organization the Active Resource is associated with.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "The data that the resource passes into the deployment ('values' only).",
            "type": "object"
          },
          "status": {
            "description": "Current resource status: 'pending', 'active', or 'deleting'.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type of the resource",
            "type": "string"
          },
          "updated_at": {
            "description": "The time the resource was last provisioned as part of a deployment.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "app_id",
          "env_id",
          "env_type",
          "res_id",
          "def_id",
          "type",
          "status",
          "resource",
          "data",
          "updated_at"
        ],
        "type": "object"
      },
      "AsyncProgressHintRequest": {
        "description": "AsyncProgressHint describes ongoing asynchronous operation.",
        "example": {
          "deadline": "2021-02-22T09:02:00Z",
          "estimate": "2021-02-22T09:00:10Z",
          "status": "pending|deleting",
          "timestamp": "2021-02-22T09:00:00Z"
        },
        "properties": {
          "deadline": {
            "description": "The date and time of when the operation will be aborted if not yet finished.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "estimate": {
            "description": "Estimated date and time of when the operation is expected to be completed.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "status": {
            "description": "Current status.",
            "type": "string"
          },
          "timestamp": {
            "description": "Current (reference) date and time.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AsyncProgressHintResponse": {
        "description": "AsyncProgressHint describes ongoing asynchronous operation.",
        "example": {
          "deadline": "2021-02-22T09:02:00Z",
          "estimate": "2021-02-22T09:00:10Z",
          "status": "pending|deleting",
          "timestamp": "2021-02-22T09:00:00Z"
        },
        "properties": {
          "deadline": {
            "description": "The date and time of when the operation will be aborted if not yet finished.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "estimate": {
            "description": "Estimated date and time of when the operation is expected to be completed.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "status": {
            "description": "Current status.",
            "type": "string"
          },
          "timestamp": {
            "description": "Current (reference) date and time.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "CreateDriverRequestRequest": {
        "description": "CreateDriverRequest describes the new resource driver registration request.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "id": "route53",
          "inputs_schema": {},
          "is_public": false,
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID for this driver. Is used as `driver_type`.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateDriverRequestResponse": {
        "description": "CreateDriverRequest describes the new resource driver registration request.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "id": "route53",
          "inputs_schema": {},
          "is_public": false,
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID for this driver. Is used as `driver_type`.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "url_prefix",
          "is_public",
          "inputs_schema",
          "param_schema",
          "account_types"
        ],
        "type": "object"
      },
      "CreateResourceAccountRequestRequest": {
        "description": "CreateResourceAccountRequest describes the request to create a new security account.",
        "example": {
          "credentials": {
            "password": "***",
            "username": "***"
          },
          "id": "gcp-dev-postgres",
          "name": "GCP Dev Postgres",
          "type": "gcp-service-account"
        },
        "properties": {
          "credentials": {
            "additionalProperties": true,
            "description": "Credentials associated with the account.",
            "type": "object"
          },
          "id": {
            "description": "Unique identifier for the account (in scope of the organization it belongs to).",
            "type": "string"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateResourceAccountRequestResponse": {
        "description": "CreateResourceAccountRequest describes the request to create a new security account.",
        "example": {
          "credentials": {
            "password": "***",
            "username": "***"
          },
          "id": "gcp-dev-postgres",
          "name": "GCP Dev Postgres",
          "type": "gcp-service-account"
        },
        "properties": {
          "credentials": {
            "additionalProperties": true,
            "description": "Credentials associated with the account.",
            "type": "object"
          },
          "id": {
            "description": "Unique identifier for the account (in scope of the organization it belongs to).",
            "type": "string"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "CreateResourceDefinitionRequestRequest": {
        "description": "CreateResourceDefinitionRequest describes a new ResourceDefinition request.",
        "example": {
          "criteria": [],
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "secrets": {
              "dbcredentials": {
                "password": "***",
                "username": "***"
              }
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/cloudsql",
          "id": "dev-postgres",
          "name": "Dev Postgres Instance",
          "type": "postgres"
        },
        "properties": {
          "criteria": {
            "description": "(Optional) The criteria to use when looking for a Resource Definition during the deployment.",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaRequest"
            },
            "type": "array"
          },
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "driver_type": {
            "description": "The driver to be used to create the resource.",
            "type": "string"
          },
          "id": {
            "description": "The Resource Definition ID.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The display name.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "driver_type"
        ],
        "type": "object"
      },
      "CreateResourceDefinitionRequestResponse": {
        "description": "CreateResourceDefinitionRequest describes a new ResourceDefinition request.",
        "example": {
          "criteria": [],
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "secrets": {
              "dbcredentials": {
                "password": "***",
                "username": "***"
              }
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/cloudsql",
          "id": "dev-postgres",
          "name": "Dev Postgres Instance",
          "type": "postgres"
        },
        "properties": {
          "criteria": {
            "description": "(Optional) The criteria to use when looking for a Resource Definition during the deployment.",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaResponse"
            },
            "type": "array"
          },
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "driver_type": {
            "description": "The driver to be used to create the resource.",
            "type": "string"
          },
          "id": {
            "description": "The Resource Definition ID.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "The display name.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "driver_type",
          "driver_account",
          "driver_inputs"
        ],
        "type": "object"
      },
      "DriverDefinitionRequest": {
        "description": "DriverDefinition describes the resource driver.\n\nResource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "id": "route53",
          "inputs_schema": {},
          "is_public": false,
          "org_id": "test-org",
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID for this driver. Is used as `driver_type`.",
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "org_id": {
            "description": "The Organization this driver exists under. Useful as public drivers are accessible to other orgs.",
            "type": "string"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "types": {
            "description": "DEPRECATED: Array of the resource types produced by this driver. Use 'type' instead.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see `url_prefix`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DriverDefinitionResponse": {
        "description": "DriverDefinition describes the resource driver.\n\nResource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "id": "route53",
          "inputs_schema": {},
          "is_public": false,
          "org_id": "test-org",
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID for this driver. Is used as `driver_type`.",
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "org_id": {
            "description": "The Organization this driver exists under. Useful as public drivers are accessible to other orgs.",
            "type": "string"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "types": {
            "description": "DEPRECATED: Array of the resource types produced by this driver. Use 'type' instead.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see `url_prefix`.",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "id",
          "type",
          "is_public",
          "inputs_schema",
          "param_schema",
          "account_types"
        ],
        "type": "object"
      },
      "DriverInputsRequest": {
        "description": "DriverInputs describes the resource and the input paramaters for the driver.",
        "example": {
          "driver": {
            "secrets": {
              "account": {
                "password": "<secret>",
                "user": "<secret>"
              },
              "key": "<secret>"
            },
            "values": {
              "instance": "database"
            }
          },
          "resource": {},
          "type": "postgres"
        },
        "properties": {
          "driver": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "The driver-specific parameters passed from the Resource Definition for the Environment."
          },
          "resource": {
            "additionalProperties": true,
            "description": "The resource-related parameters passed from the deployment set (if any).",
            "type": "object"
          },
          "type": {
            "description": "The type of the resource to generate.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DriverInputsResponse": {
        "description": "DriverInputs describes the resource and the input paramaters for the driver.",
        "example": {
          "driver": {
            "secrets": {
              "account": {
                "password": "<secret>",
                "user": "<secret>"
              },
              "key": "<secret>"
            },
            "values": {
              "instance": "database"
            }
          },
          "resource": {},
          "type": "postgres"
        },
        "properties": {
          "driver": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "The driver-specific parameters passed from the Resource Definition for the Environment."
          },
          "resource": {
            "additionalProperties": true,
            "description": "The resource-related parameters passed from the deployment set (if any).",
            "type": "object"
          },
          "type": {
            "description": "The type of the resource to generate.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "resource",
          "driver"
        ],
        "type": "object"
      },
      "DriverOutputsRequest": {
        "description": "DriverOutputs stores all the necessary information about the provisioned resource.",
        "example": {
          "id": "{guresid}",
          "manifests": [],
          "resource": {
            "secrets": {
              "password": "<secret>",
              "user": "<secret>"
            },
            "values": {
              "host": "127.0.0.1",
              "name": "my-database"
            }
          },
          "type": "postgres"
        },
        "properties": {
          "id": {
            "description": "The resource GUResID.",
            "type": "string"
          },
          "manifests": {
            "description": "The resource definition manifests (if any).",
            "items": {
              "$ref": "#/components/schemas/ManifestRequest"
            },
            "type": "array"
          },
          "resource": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "The resource usage parameters and secrets."
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DriverOutputsResponse": {
        "description": "DriverOutputs stores all the necessary information about the provisioned resource.",
        "example": {
          "id": "{guresid}",
          "manifests": [],
          "resource": {
            "secrets": {
              "password": "<secret>",
              "user": "<secret>"
            },
            "values": {
              "host": "127.0.0.1",
              "name": "my-database"
            }
          },
          "type": "postgres"
        },
        "properties": {
          "id": {
            "description": "The resource GUResID.",
            "type": "string"
          },
          "manifests": {
            "description": "The resource definition manifests (if any).",
            "items": {
              "$ref": "#/components/schemas/ManifestResponse"
            },
            "type": "array"
          },
          "resource": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "The resource usage parameters and secrets."
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "resource",
          "manifests"
        ],
        "type": "object"
      },
      "DynamicDefinitionRequest": {
        "description": "Dynamic Resource Definitions provide a way of provisioning and destroying External Resources as needed by Environments. Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, it will be used to provision a new resource known as an Active Resource. In general, Active Resources are only deleted when their introductory Environment is deleted.\n\nDynamic Resource Definitions provide a mapping between a Resource Type and a Resource Driver. The Resource Driver is code that is responsible for actually creating and destroying the resource. The Dynamic Resource Definition can also provide driver-specific configuration.\n\nA common use case is to provide a new database within a pre-existing database instance for dynamically created environments. For example, creating a Dynamic Resource Definition to provision Progressive’s Databases on a specific Google CloudSQL instance for Environments with type `development`. The Resource Definition would have a type of `postgres` and  driver-specific parameters defining the instance to create databases on.",
        "example": {
          "account": "gcp-dev-cloudsql",
          "created_at": "2020-05-23T12:32:16Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_type": "development"
            }
          ],
          "driver_params": {
            "secrets": {
              "dbcredentials": "*****"
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/cloudsql",
          "id": "dev-postgres",
          "name": "Dev Postgres Instance",
          "type": "postgres"
        },
        "properties": {
          "account_id": {
            "description": "The ID of the account this resource is associated with.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "criteria": {
            "description": "The criteria used for matching this StaticDefinition",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaRequest"
            },
            "type": "array"
          },
          "driver_params": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "Parameters to be passed to the driver on every resource creation. (Note, this does not include resource parameters)"
          },
          "driver_type": {
            "description": "The type of the driver used to create the resource",
            "type": "string"
          },
          "id": {
            "description": "The ID for this Resource Definition",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "A Human-friendly name for the Resource Definition",
            "type": "string"
          },
          "type": {
            "description": "The type of the resource for this Definition",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "criteria",
          "driver_type",
          "account_id",
          "driver_params"
        ],
        "type": "object"
      },
      "DynamicDefinitionResponse": {
        "description": "Dynamic Resource Definitions provide a way of provisioning and destroying External Resources as needed by Environments. Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, it will be used to provision a new resource known as an Active Resource. In general, Active Resources are only deleted when their introductory Environment is deleted.\n\nDynamic Resource Definitions provide a mapping between a Resource Type and a Resource Driver. The Resource Driver is code that is responsible for actually creating and destroying the resource. The Dynamic Resource Definition can also provide driver-specific configuration.\n\nA common use case is to provide a new database within a pre-existing database instance for dynamically created environments. For example, creating a Dynamic Resource Definition to provision Progressive’s Databases on a specific Google CloudSQL instance for Environments with type `development`. The Resource Definition would have a type of `postgres` and  driver-specific parameters defining the instance to create databases on.",
        "example": {
          "account": "gcp-dev-cloudsql",
          "created_at": "2020-05-23T12:32:16Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_type": "development"
            }
          ],
          "driver_params": {
            "secrets": {
              "dbcredentials": "*****"
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/cloudsql",
          "id": "dev-postgres",
          "name": "Dev Postgres Instance",
          "type": "postgres"
        },
        "properties": {
          "account_id": {
            "description": "The ID of the account this resource is associated with.",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "created_at": {
            "description": "The timestamp of when this Resource Definition was first created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this Resource Definition",
            "type": "string"
          },
          "criteria": {
            "description": "The criteria used for matching this StaticDefinition",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaResponse"
            },
            "type": "array"
          },
          "driver_params": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "Parameters to be passed to the driver on every resource creation. (Note, this does not include resource parameters)"
          },
          "driver_type": {
            "description": "The type of the driver used to create the resource",
            "type": "string"
          },
          "id": {
            "description": "The ID for this Resource Definition",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "is_default": {
            "description": "If true this resource is default (provided by Humanitec in demo purposes)",
            "type": "boolean"
          },
          "name": {
            "description": "A Human-friendly name for the Resource Definition",
            "type": "string"
          },
          "pending_deletion": {
            "description": "If true, the definition is still being referenced by an Active Resource. Once there are no more references, the definition will be removed.",
            "type": "boolean"
          },
          "type": {
            "description": "The type of the resource for this Definition",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "is_default",
          "pending_deletion",
          "criteria",
          "driver_type",
          "account_id",
          "driver_params"
        ],
        "type": "object"
      },
      "InternalActiveResourceRequest": {
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "DEPRECATED: For backward compatibility only. Use `resource` property instead.",
            "type": "object"
          },
          "def_id": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "env_type": {
            "description": "The Environment Type of the Environment specified by env_id.",
            "type": "string"
          },
          "gu_res_id": {
            "description": "Globally unique resource id",
            "type": "string"
          },
          "org_id": {
            "description": "The ID of the Organization the Active Resource is associated with.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "The data that the resource passes into the deployment ('values' only).",
            "type": "object"
          },
          "status": {
            "description": "Current resource status: 'pending', 'active', or 'deleting'.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type of the resource.",
            "type": "string"
          },
          "updated_at": {
            "description": "The time the resource was last provisioned as part of a deployment.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InternalActiveResourceResponse": {
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "data": {
            "additionalProperties": true,
            "description": "DEPRECATED: For backward compatibility only. Use `resource` property instead.",
            "type": "object"
          },
          "def_id": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "env_type": {
            "description": "The Environment Type of the Environment specified by env_id.",
            "type": "string"
          },
          "gu_res_id": {
            "description": "Globally unique resource id",
            "type": "string"
          },
          "org_id": {
            "description": "The ID of the Organization the Active Resource is associated with.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "The data that the resource passes into the deployment ('values' only).",
            "type": "object"
          },
          "status": {
            "description": "Current resource status: 'pending', 'active', or 'deleting'.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type of the resource.",
            "type": "string"
          },
          "updated_at": {
            "description": "The time the resource was last provisioned as part of a deployment.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "app_id",
          "env_id",
          "env_type",
          "res_id",
          "def_id",
          "type",
          "status",
          "resource",
          "data",
          "updated_at",
          "gu_res_id"
        ],
        "type": "object"
      },
      "ManifestRequest": {
        "description": "Manifest represents a complete or a partial Kubernetes manifest, and a location for its injection.",
        "properties": {
          "data": {
            "description": "Manifest data to inject.",
            "type": "object"
          },
          "location": {
            "description": "Location to inject the Manifest at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManifestResponse": {
        "description": "Manifest represents a complete or a partial Kubernetes manifest, and a location for its injection.",
        "properties": {
          "data": {
            "description": "Manifest data to inject.",
            "type": "object"
          },
          "location": {
            "description": "Location to inject the Manifest at.",
            "type": "string"
          }
        },
        "required": [
          "location",
          "data"
        ],
        "type": "object"
      },
      "MatchingCriteriaRequest": {
        "description": "Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.\n\nMatching criteria are made up in order of specificity with least specific first:\n\n- Environment Type (`env_type`)\n\n- Application (`app_id`)\n\n- Environment (`env_id`)\n\n- Resource (`res_id`)\n\nWhen selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.\n\n**NOTE:**\n\nHumanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.",
        "properties": {
          "app_id": {
            "description": "(Optional) The ID of the Application that the Resources should belong to.",
            "type": "string"
          },
          "env_id": {
            "description": "(Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.",
            "type": "string"
          },
          "env_type": {
            "description": "(Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.",
            "type": "string"
          },
          "id": {
            "description": "Matching Criteria ID",
            "type": "string"
          },
          "res_id": {
            "description": "(Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MatchingCriteriaResponse": {
        "description": "Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.\n\nMatching criteria are made up in order of specificity with least specific first:\n\n- Environment Type (`env_type`)\n\n- Application (`app_id`)\n\n- Environment (`env_id`)\n\n- Resource (`res_id`)\n\nWhen selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.\n\n**NOTE:**\n\nHumanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.",
        "properties": {
          "app_id": {
            "description": "(Optional) The ID of the Application that the Resources should belong to.",
            "type": "string"
          },
          "env_id": {
            "description": "(Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.",
            "type": "string"
          },
          "env_type": {
            "description": "(Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.",
            "type": "string"
          },
          "id": {
            "description": "Matching Criteria ID",
            "type": "string"
          },
          "res_id": {
            "description": "(Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MatchingCriteriaRuleRequest": {
        "description": "MatchingCriteriaRule describes Matching Criteria rules.",
        "properties": {
          "app_id": {
            "description": "(Optional) The ID of the Application that the Resources should belong to.",
            "type": "string"
          },
          "env_id": {
            "description": "(Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.",
            "type": "string"
          },
          "env_type": {
            "description": "(Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.",
            "type": "string"
          },
          "res_id": {
            "description": "(Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MatchingCriteriaRuleResponse": {
        "description": "MatchingCriteriaRule describes Matching Criteria rules.",
        "properties": {
          "app_id": {
            "description": "(Optional) The ID of the Application that the Resources should belong to.",
            "type": "string"
          },
          "env_id": {
            "description": "(Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.",
            "type": "string"
          },
          "env_type": {
            "description": "(Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.",
            "type": "string"
          },
          "res_id": {
            "description": "(Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceAccountRequest": {
        "description": "ResourceAccount represents the account being used to access a resource.\n\nResource Accounts hold credentials that are required to provision and manage resources.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "test-user",
          "id": "gcp-dev-postgres",
          "is_default": false,
          "is_used": true,
          "name": "GCP Dev Postgres",
          "type": "gcp"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when the account was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The ID of the user who created the account.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the account (in scope of the organization it belongs to).",
            "type": "string"
          },
          "is_used": {
            "description": "Indicates if this account is being used (referenced) by any resource definition.",
            "type": "boolean"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceAccountResponse": {
        "description": "ResourceAccount represents the account being used to access a resource.\n\nResource Accounts hold credentials that are required to provision and manage resources.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "test-user",
          "id": "gcp-dev-postgres",
          "is_default": false,
          "is_used": true,
          "name": "GCP Dev Postgres",
          "type": "gcp"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when the account was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The ID of the user who created the account.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the account (in scope of the organization it belongs to).",
            "type": "string"
          },
          "is_used": {
            "description": "Indicates if this account is being used (referenced) by any resource definition.",
            "type": "boolean"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "type": {
            "description": "The type of the account",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "is_used",
          "created_by",
          "created_at"
        ],
        "type": "object"
      },
      "ResourceDefinitionChangeRequest": {
        "description": "ResourceDefinitionChange describes the effects of a Resource Definition or Matching Criteria update/deletion.",
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "from_def": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "to_def": {
            "description": "The Resource Definition that resource *will be* provisioned from if the change is applied.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceDefinitionChangeResponse": {
        "description": "ResourceDefinitionChange describes the effects of a Resource Definition or Matching Criteria update/deletion.",
        "properties": {
          "app_id": {
            "description": "The ID of the App the resource is associated with.",
            "type": "string"
          },
          "env_id": {
            "description": "The ID of the Environment the resource is associated with.",
            "type": "string"
          },
          "from_def": {
            "description": "The Resource Definition that this resource was provisioned from.",
            "type": "string"
          },
          "res_id": {
            "description": "The ID of the resource",
            "type": "string"
          },
          "to_def": {
            "description": "The Resource Definition that resource *will be* provisioned from if the change is applied.",
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "env_id",
          "res_id",
          "from_def",
          "to_def"
        ],
        "type": "object"
      },
      "ResourceDefinitionRequest": {
        "description": "A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.\n\nThe schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.",
        "example": {
          "created_at": "2020-05-23T12:32:16Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_type": "development",
              "id": "123456"
            }
          ],
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/postgres-cloudsql",
          "id": "dev-postgres",
          "is_default": false,
          "is_deleted": false,
          "name": "Dev Postgres Instance",
          "org_id": "test-org",
          "type": "postgres"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when this record has been created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this record.",
            "type": "string"
          },
          "criteria": {
            "description": "(Optional) The criteria to use when looking for a Resource Definition during the deployment.",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaRequest"
            },
            "type": "array"
          },
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "driver_type": {
            "description": "The driver to be used to create the resource.",
            "type": "string"
          },
          "id": {
            "description": "The Resource Definition ID.",
            "type": "string"
          },
          "is_default": {
            "description": "Indicates this definition is a built-in one (provided by Humanitec).",
            "type": "boolean"
          },
          "is_deleted": {
            "description": "Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.",
            "type": "boolean"
          },
          "name": {
            "description": "The display name.",
            "type": "string"
          },
          "org_id": {
            "description": "The Organization ID.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceDefinitionResponse": {
        "description": "A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.\n\nThe schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.",
        "example": {
          "created_at": "2020-05-23T12:32:16Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_type": "development",
              "id": "123456"
            }
          ],
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          },
          "driver_type": "humanitec/postgres-cloudsql",
          "id": "dev-postgres",
          "is_default": false,
          "is_deleted": false,
          "name": "Dev Postgres Instance",
          "org_id": "test-org",
          "type": "postgres"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when this record has been created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this record.",
            "type": "string"
          },
          "criteria": {
            "description": "(Optional) The criteria to use when looking for a Resource Definition during the deployment.",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaResponse"
            },
            "type": "array"
          },
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "driver_type": {
            "description": "The driver to be used to create the resource.",
            "type": "string"
          },
          "id": {
            "description": "The Resource Definition ID.",
            "type": "string"
          },
          "is_default": {
            "description": "Indicates this definition is a built-in one (provided by Humanitec).",
            "type": "boolean"
          },
          "is_deleted": {
            "description": "Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.",
            "type": "boolean"
          },
          "name": {
            "description": "The display name.",
            "type": "string"
          },
          "org_id": {
            "description": "The Organization ID.",
            "type": "string"
          },
          "type": {
            "description": "The Resource Type.",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "id",
          "name",
          "type"
        ],
        "type": "object"
      },
      "ResourceOutputsRequest": {
        "description": "ResourceOutputs stores all the necessary information about the provisioned resource.",
        "example": {
          "def_id": "default-humanitec-postgres",
          "id": "modules.robot-walhall-debug.externals.postgres",
          "manifests": [],
          "resource": {
            "secrets": {
              "password": "vault/path/to/secrets/./password",
              "user": "vault/path/to/secrets/./user"
            },
            "values": {
              "host": "127.0.0.1",
              "name": "my-database"
            }
          },
          "status": "pending|active|deleting",
          "type": "postgres"
        },
        "properties": {
          "def_id": {
            "description": "The Resource Definitions ID that was used to provision the resource.",
            "type": "string"
          },
          "id": {
            "description": "The resource ID.",
            "type": "string"
          },
          "manifests": {
            "description": "The resource definition manifests (if any). Only available when status is 'active'.",
            "items": {
              "$ref": "#/components/schemas/ManifestRequest"
            },
            "type": "array"
          },
          "resource": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "The resource usage parameters and secrets. Only available when status is 'active'."
          },
          "status": {
            "description": "The resource availability status: pending, active, or deleting.",
            "type": "string"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceOutputsResponse": {
        "description": "ResourceOutputs stores all the necessary information about the provisioned resource.",
        "example": {
          "def_id": "default-humanitec-postgres",
          "id": "modules.robot-walhall-debug.externals.postgres",
          "manifests": [],
          "resource": {
            "secrets": {
              "password": "vault/path/to/secrets/./password",
              "user": "vault/path/to/secrets/./user"
            },
            "values": {
              "host": "127.0.0.1",
              "name": "my-database"
            }
          },
          "status": "pending|active|deleting",
          "type": "postgres"
        },
        "properties": {
          "def_id": {
            "description": "The Resource Definitions ID that was used to provision the resource.",
            "type": "string"
          },
          "id": {
            "description": "The resource ID.",
            "type": "string"
          },
          "manifests": {
            "description": "The resource definition manifests (if any). Only available when status is 'active'.",
            "items": {
              "$ref": "#/components/schemas/ManifestResponse"
            },
            "type": "array"
          },
          "resource": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "The resource usage parameters and secrets. Only available when status is 'active'."
          },
          "status": {
            "description": "The resource availability status: pending, active, or deleting.",
            "type": "string"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "def_id",
          "status",
          "resource",
          "manifests"
        ],
        "type": "object"
      },
      "ResourceProvisionRequestLegacyRequest": {
        "description": "ResourceProvisionRequestLegacy is the payload passed to the resource provisioner",
        "example": {
          "resource": {
            "host": "127.0.0.1",
            "name": "my-database"
          },
          "type": "postgres"
        },
        "properties": {
          "resource": {
            "additionalProperties": true,
            "description": "(Optional) The input parameters for the resource passed from the deployment set",
            "type": "object"
          },
          "type": {
            "description": "The resource type",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ResourceProvisionRequestLegacyResponse": {
        "description": "ResourceProvisionRequestLegacy is the payload passed to the resource provisioner",
        "example": {
          "resource": {
            "host": "127.0.0.1",
            "name": "my-database"
          },
          "type": "postgres"
        },
        "properties": {
          "resource": {
            "additionalProperties": true,
            "description": "(Optional) The input parameters for the resource passed from the deployment set",
            "type": "object"
          },
          "type": {
            "description": "The resource type",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ResourceProvisionRequestRequest": {
        "description": "ResourceProvisionRequest is the payload passed to the resource provisioner",
        "example": {
          "id": "shared.postgres",
          "resource": {
            "host": "127.0.0.1",
            "name": "my-database"
          },
          "type": "postgres"
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "(Optional) The input parameters for the resource passed from the deployment set",
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ResourceProvisionRequestResponse": {
        "description": "ResourceProvisionRequest is the payload passed to the resource provisioner",
        "example": {
          "id": "shared.postgres",
          "resource": {
            "host": "127.0.0.1",
            "name": "my-database"
          },
          "type": "postgres"
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "resource": {
            "additionalProperties": true,
            "description": "(Optional) The input parameters for the resource passed from the deployment set",
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ResourceTypeRequest": {
        "description": "Resources Types define the technology that Applications can have dependencies on.\n\nEach Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.",
        "example": {
          "inputs_schema": {
            "values": {
              "properties": {
                "extensions": {
                  "additionalProperties": {
                    "properties": {
                      "schema": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "name": "PostgreSQL",
          "outputs_schema": {
            "secrets": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            },
            "values": {
              "properties": {
                "host": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "host",
                "port"
              ],
              "type": "object"
            }
          },
          "type": "postgres"
        },
        "properties": {
          "category": {
            "description": "Category name (used to group similar resources on the UI).",
            "type": "string"
          },
          "data_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the type-specific data passed to the deployment (output). Use 'outputs_schema' instead.",
            "type": "object"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the type-specific parameters for the driver (input).",
            "type": "object"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "outputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the type-specific data passed to the deployment (output).",
            "type": "object"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the type-specific parameters for the driver (input). Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "Unique resource type identifier (system-wide, across all organizations).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceTypeResponse": {
        "description": "Resources Types define the technology that Applications can have dependencies on.\n\nEach Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.",
        "example": {
          "inputs_schema": {
            "values": {
              "properties": {
                "extensions": {
                  "additionalProperties": {
                    "properties": {
                      "schema": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            }
          },
          "name": "PostgreSQL",
          "outputs_schema": {
            "secrets": {
              "properties": {
                "password": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            },
            "values": {
              "properties": {
                "host": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "host",
                "port"
              ],
              "type": "object"
            }
          },
          "type": "postgres"
        },
        "properties": {
          "category": {
            "description": "Category name (used to group similar resources on the UI).",
            "type": "string"
          },
          "data_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the type-specific data passed to the deployment (output). Use 'outputs_schema' instead.",
            "type": "object"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the type-specific parameters for the driver (input).",
            "type": "object"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          },
          "outputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the type-specific data passed to the deployment (output).",
            "type": "object"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the type-specific parameters for the driver (input). Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "Unique resource type identifier (system-wide, across all organizations).",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "category",
          "inputs_schema",
          "param_schema",
          "outputs_schema",
          "data_schema"
        ],
        "type": "object"
      },
      "StaticDefinitionRequest": {
        "description": "Static Resource Definitions provide a way of using External Resources that are not managed by Humanitec. (This is distinct from Dynamic Resource Definitions where the lifecycle is managed by Humanitec.) Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, the data required for the application to access the resource is returned. (As this data is defined and does not change, it is known as \"static\".)\n\nA common use case is to provide a DNS name for the production environment. The appropriate DNS name is pointed to the cluster load balancer. A Static Resource definition is then created so that the deployment knows what DNS name to configure Ingress for and the TLS certificates to use to secure the requests.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_id": "production"
            }
          ],
          "data": {
            "secrets": {
              "tls": "******"
            },
            "values": {
              "host": "my-app.example.com"
            }
          },
          "driver_data": {},
          "driver_type": "empty",
          "id": "prod-dns",
          "is_default": false,
          "name": "Production DNS",
          "pending_deletion": false,
          "type": "dns"
        },
        "properties": {
          "criteria": {
            "description": "The criteria used for matching this StaticDefinition",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaRequest"
            },
            "type": "array"
          },
          "data": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "What would be returned as the output of type. Must match the Schema specified in the Resource Type"
          },
          "driver_data": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "What would be returned as the output of the driver. Must match the Schema specified in the Driver Type."
          },
          "driver_type": {
            "description": "The Type of the driver. Can be `\"empty\"` to specify no driver needed.",
            "type": "string"
          },
          "id": {
            "description": "The ID for this Resource Definition",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "name": {
            "description": "A Human-friendly name for the Resource Definition",
            "type": "string"
          },
          "type": {
            "description": "The type of the resource for this Definition",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "criteria",
          "data",
          "driver_type",
          "driver_data"
        ],
        "type": "object"
      },
      "StaticDefinitionResponse": {
        "description": "Static Resource Definitions provide a way of using External Resources that are not managed by Humanitec. (This is distinct from Dynamic Resource Definitions where the lifecycle is managed by Humanitec.) Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, the data required for the application to access the resource is returned. (As this data is defined and does not change, it is known as \"static\".)\n\nA common use case is to provide a DNS name for the production environment. The appropriate DNS name is pointed to the cluster load balancer. A Static Resource definition is then created so that the deployment knows what DNS name to configure Ingress for and the TLS certificates to use to secure the requests.",
        "example": {
          "created_at": "2020-05-22T14:58:07Z",
          "created_by": "a.user@example.com",
          "criteria": [
            {
              "env_id": "production"
            }
          ],
          "data": {
            "secrets": {
              "tls": "******"
            },
            "values": {
              "host": "my-app.example.com"
            }
          },
          "driver_data": {},
          "driver_type": "empty",
          "id": "prod-dns",
          "is_default": false,
          "name": "Production DNS",
          "pending_deletion": false,
          "type": "dns"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp of when this Resource Definition was first created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The user who created this Resource Definition",
            "type": "string"
          },
          "criteria": {
            "description": "The criteria used for matching this StaticDefinition",
            "items": {
              "$ref": "#/components/schemas/MatchingCriteriaResponse"
            },
            "type": "array"
          },
          "data": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "What would be returned as the output of type. Must match the Schema specified in the Resource Type"
          },
          "driver_data": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "What would be returned as the output of the driver. Must match the Schema specified in the Driver Type."
          },
          "driver_type": {
            "description": "The Type of the driver. Can be `\"empty\"` to specify no driver needed.",
            "type": "string"
          },
          "id": {
            "description": "The ID for this Resource Definition",
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "is_default": {
            "description": "If true this resource is default (provided by Humanitec in demo purposes)",
            "type": "boolean"
          },
          "name": {
            "description": "A Human-friendly name for the Resource Definition",
            "type": "string"
          },
          "pending_deletion": {
            "description": "If true, the definition is still being referenced by an Active Resource. Once there are no more references, the definition will be removed.",
            "type": "boolean"
          },
          "type": {
            "description": "The type of the resource for this Definition",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "is_default",
          "pending_deletion",
          "criteria",
          "data",
          "driver_type",
          "driver_data"
        ],
        "type": "object"
      },
      "UpdateDriverRequestRequest": {
        "description": "UpdateDriverRequest describes the update driver details request.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "inputs_schema": {},
          "is_public": false,
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateDriverRequestResponse": {
        "description": "UpdateDriverRequest describes the update driver details request.",
        "example": {
          "account_types": [
            "gcp",
            "aws"
          ],
          "inputs_schema": {},
          "is_public": false,
          "type": "dns",
          "url_prefix": "https://drivers.example.com/route53/"
        },
        "properties": {
          "account_types": {
            "description": "List of resources accounts types supported by the driver",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "A JSON Schema specifying the driver-specific input parameters.",
            "type": "object"
          },
          "is_public": {
            "description": "Defines whether this driver is accessible to all Organizations.",
            "type": "boolean"
          },
          "param_schema": {
            "additionalProperties": true,
            "description": "DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.",
            "type": "object"
          },
          "type": {
            "description": "The type of resource produced by this driver",
            "type": "string"
          },
          "url_prefix": {
            "description": "The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "url_prefix",
          "is_public",
          "inputs_schema",
          "param_schema",
          "account_types"
        ],
        "type": "object"
      },
      "UpdateResourceAccountRequestRequest": {
        "description": "UpdateResourceAccountRequest describes the request to update the security account details.",
        "example": {
          "credentials": {
            "password": "***",
            "username": "***"
          },
          "name": "GCP Dev Postgres"
        },
        "properties": {
          "credentials": {
            "additionalProperties": true,
            "description": "Credentials associated with the account.",
            "type": "object"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateResourceAccountRequestResponse": {
        "description": "UpdateResourceAccountRequest describes the request to update the security account details.",
        "example": {
          "credentials": {
            "password": "***",
            "username": "***"
          },
          "name": "GCP Dev Postgres"
        },
        "properties": {
          "credentials": {
            "additionalProperties": true,
            "description": "Credentials associated with the account.",
            "type": "object"
          },
          "name": {
            "description": "Display name.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateResourceDefinitionRequestRequest": {
        "description": "UpdateResourceDefinitionRequest describes a ResourceDefinition change request.",
        "example": {
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "secrets": {
              "dbcredentials": {
                "password": "***",
                "username": "***"
              }
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          }
        },
        "properties": {
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "nullable": true,
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsRequest",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "name": {
            "description": "(Optional) Resource display name",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateResourceDefinitionRequestResponse": {
        "description": "UpdateResourceDefinitionRequest describes a ResourceDefinition change request.",
        "example": {
          "driver_account": "gcp-dev-cloudsql",
          "driver_inputs": {
            "secrets": {
              "dbcredentials": {
                "password": "***",
                "username": "***"
              }
            },
            "values": {
              "instance": "my-dev-project:my-region:dev-db"
            }
          }
        },
        "properties": {
          "driver_account": {
            "description": "(Optional) Security account required by the driver.",
            "nullable": true,
            "pattern": "^[a-z0-9][a-z0-9-]+[a-z0-9]$",
            "type": "string"
          },
          "driver_inputs": {
            "$ref": "#/components/schemas/ValuesSecretsResponse",
            "description": "(Optional) Additional input data to be passed to the driver."
          },
          "name": {
            "description": "(Optional) Resource display name",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "driver_account",
          "driver_inputs"
        ],
        "type": "object"
      },
      "UpdateResourceTypeRequestRequest": {
        "properties": {
          "category": {
            "description": "(Optional) Category name (used to group similar resources on the UI).",
            "nullable": true,
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "(Optional) A JSON Schema specifying the type-specific parameters for the driver (input).",
            "type": "object"
          },
          "name": {
            "description": "(Optional) Resource display name",
            "nullable": true,
            "type": "string"
          },
          "outputs_schema": {
            "additionalProperties": true,
            "description": "(Optional) A JSON Schema specifying the type-specific data passed to the deployment (output).",
            "type": "object"
          }
        },
        "type": "object"
      },
      "UpdateResourceTypeRequestResponse": {
        "properties": {
          "category": {
            "description": "(Optional) Category name (used to group similar resources on the UI).",
            "nullable": true,
            "type": "string"
          },
          "inputs_schema": {
            "additionalProperties": true,
            "description": "(Optional) A JSON Schema specifying the type-specific parameters for the driver (input).",
            "type": "object"
          },
          "name": {
            "description": "(Optional) Resource display name",
            "nullable": true,
            "type": "string"
          },
          "outputs_schema": {
            "additionalProperties": true,
            "description": "(Optional) A JSON Schema specifying the type-specific data passed to the deployment (output).",
            "type": "object"
          }
        },
        "required": [
          "name",
          "category",
          "inputs_schema",
          "outputs_schema"
        ],
        "type": "object"
      },
      "ValuesSecretsRequest": {
        "description": "ValuesSecrets stores data that should be passed around split by sensitivity.",
        "example": {
          "secrets": {
            "password": "vault/path/to/data/.secrets/password",
            "user": "vault/path/to/data/.secrets/user"
          },
          "values": {
            "host": "127.0.0.1",
            "name": "my-database"
          }
        },
        "properties": {
          "secrets": {
            "additionalProperties": true,
            "description": "Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.",
            "type": "object"
          },
          "values": {
            "additionalProperties": true,
            "description": "Values section of the data set. Passed around as-is.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ValuesSecretsResponse": {
        "description": "ValuesSecrets stores data that should be passed around split by sensitivity.",
        "example": {
          "secrets": {
            "password": "vault/path/to/data/.secrets/password",
            "user": "vault/path/to/data/.secrets/user"
          },
          "values": {
            "host": "127.0.0.1",
            "name": "my-database"
          }
        },
        "properties": {
          "secrets": {
            "additionalProperties": true,
            "description": "Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.",
            "type": "object"
          },
          "values": {
            "additionalProperties": true,
            "description": "Values section of the data set. Passed around as-is.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ControllerRequest": {
        "description": "Controller represents deployment, stateful set etc",
        "properties": {
          "kind": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "pods": {
            "items": {
              "$ref": "#/components/schemas/PodStateRequest"
            },
            "type": "array"
          },
          "replicas": {
            "type": "integer"
          },
          "revision": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ControllerResponse": {
        "description": "Controller represents deployment, stateful set etc",
        "properties": {
          "kind": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "pods": {
            "items": {
              "$ref": "#/components/schemas/PodStateResponse"
            },
            "type": "array"
          },
          "replicas": {
            "type": "integer"
          },
          "revision": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "kind",
          "replicas",
          "status",
          "message",
          "pods",
          "revision"
        ],
        "type": "object"
      },
      "ModuleRequest": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ControllerRequest"
        },
        "description": "Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module",
        "type": "object"
      },
      "ModuleResponse": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ControllerResponse"
        },
        "description": "Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module",
        "type": "object"
      },
      "PodStateRequest": {
        "description": "PodState represents single pod status",
        "properties": {
          "containerStatuses": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array"
          },
          "phase": {
            "type": "string"
          },
          "podName": {
            "type": "string"
          },
          "revision": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PodStateResponse": {
        "description": "PodState represents single pod status",
        "properties": {
          "containerStatuses": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array"
          },
          "phase": {
            "type": "string"
          },
          "podName": {
            "type": "string"
          },
          "revision": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "podName",
          "revision",
          "phase",
          "status",
          "containerStatuses"
        ],
        "type": "object"
      },
      "RuntimeInfoRequest": {
        "description": "RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).",
        "properties": {
          "modules": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ModuleRequest"
            },
            "type": "object"
          },
          "namespace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeInfoResponse": {
        "description": "RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).",
        "properties": {
          "modules": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ModuleResponse"
            },
            "type": "object"
          },
          "namespace": {
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "modules"
        ],
        "type": "object"
      },
      "IdPRequest": {
        "description": "IdP metadata needed by Humanitec to interact with a SAML IdP",
        "example": {
          "authorizing_user_id": "example-user",
          "domains": [
            "example.com"
          ],
          "id": "example-idp",
          "metadata": "",
          "object_roles": [
            {
              "object": "/orgs/example-org/apps/example-app",
              "role": "developer"
            }
          ],
          "org_id": "example-org",
          "role": "member"
        },
        "properties": {
          "authorizing_user_id": {
            "description": "ID of an existing user with permissions to apply roles to new users within the org.",
            "type": "string"
          },
          "domains": {
            "description": "One or more domains that this IdP should be associated to.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "ID used to refere to the IdP in Humanitec",
            "type": "string"
          },
          "metadata": {
            "description": "Base64 encoded SAML IdP Metadata XML",
            "items": {
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "object_roles": {
            "description": "A possibly empty array of additional roles on objects that the user should have.",
            "items": {
              "$ref": "#/components/schemas/ObjectRoleRequest"
            },
            "type": "array"
          },
          "org_id": {
            "description": "ID of the Organization that the new user should be added to.",
            "type": "string"
          },
          "role": {
            "description": "The role that the new user should have on the organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "metadata",
          "authorizing_user_id",
          "org_id",
          "role",
          "domains",
          "object_roles"
        ],
        "type": "object"
      },
      "IdPResponse": {
        "description": "IdP metadata needed by Humanitec to interact with a SAML IdP",
        "example": {
          "authorizing_user_id": "example-user",
          "domains": [
            "example.com"
          ],
          "id": "example-idp",
          "metadata": "PCEtLSBUaGUgZW50aXR5IGRlc2NyaWJpbmcgdGhlIFNBTUx0ZXN0IElkUCwgbmFtZWQgYnkgdGhlIGVudGl0eUlEIGJlbG93IC0tPiAKCjxFbnRpdHlEZXNjcmlwdG9yIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bWV0YWRhdGEiIElEPSJTQU1MdGVzdElkUCIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiIHhtbG5zOnNoaWJtZD0idXJuOm1hY2U6c2hpYmJvbGV0aDptZXRhZGF0YToxLjAiIHhtbG5zOnhtbD0iaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlIiB4bWxuczptZHVpPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDptZXRhZGF0YTp1aSIgdmFsaWRVbnRpbD0iMjEwMC0wMS0wMVQwMDowMDo0MloiIGVudGl0eUlEPSJodHRwczovL3NhbWx0ZXN0LmlkL3NhbWwvaWRwIj4KCiAgICA8SURQU1NPRGVzY3JpcHRvciBwcm90b2NvbFN1cHBvcnRFbnVtZXJhdGlvbj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIHVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpwcm90b2NvbCB1cm46bWFjZTpzaGliYm9sZXRoOjEuMCI+CgogICAgICAgIDxFeHRlbnNpb25zPgo8IS0tIEFuIGVudW1lcmF0aW9uIG9mIHRoZSBkb21haW5zIHRoaXMgSWRQIGlzIGFibGUgdG8gYXNzZXJ0IHNjb3BlZCBhdHRyaWJ1dGVzLCB3aGljaCBhcmUKdHlwaWNhbGx5IHRob3NlIHdpdGggYSBAIGRlbGltaXRlciwgbGlrZSBtYWlsLiAgTW9zdCBJZFAncyBzZXJ2ZSBvbmx5IGEgc2luZ2xlIGRvbWFpbi4gIEl0J3MgY3J1Y2lhbApmb3IgdGhlIFNQIHRvIGNoZWNrIHJlY2VpdmVkIGF0dHJpYnV0ZSB2YWx1ZXMgbWF0Y2ggcGVybWl0dGVkIGRvbWFpbnMgdG8gcHJldmVudCBhIHJlY29nbml6ZWQgSWRQIGZyb20gCnNlbmRpbmcgYXR0cmlidXRlIHZhbHVlcyBmb3Igd2hpY2ggYSBkaWZmZXJlbnQgcmVjb2duaXplZCBJZFAgaXMgYXV0aG9yaXRhdGl2ZS4gLS0+CiAgICAgICAgICAgIDxzaGlibWQ6U2NvcGUgcmVnZXhwPSJmYWxzZSI+c2FtbHRlc3QuaWQ8L3NoaWJtZDpTY29wZT4KCjwhLS0gRGlzcGxheSBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIElkUCB0aGF0IGNhbiBiZSB1c2VkIGJ5IFNQJ3MgYW5kIGRpc2NvdmVyeQpzZXJ2aWNlcyB0byBpZGVudGlmeSB0aGUgSWRQIG1lYW5pbmdmdWxseSBmb3IgZW5kIHVzZXJzIC0tPiAKICAgICAgICAgICAgPG1kdWk6VUlJbmZvPgogICAgICAgICAgICAgICAgPG1kdWk6RGlzcGxheU5hbWUgeG1sOmxhbmc9ImVuIj5TQU1MdGVzdCBJZFA8L21kdWk6RGlzcGxheU5hbWU+CiAgICAgICAgICAgICAgICA8bWR1aTpEZXNjcmlwdGlvbiB4bWw6bGFuZz0iZW4iPkEgZnJlZSBhbmQgYmFzaWMgSWRQIGZvciB0ZXN0aW5nIFNBTUwgZGVwbG95bWVudHM8L21kdWk6RGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8bWR1aTpMb2dvIGhlaWdodD0iOTAiIHdpZHRoPSIyMjUiPmh0dHBzOi8vc2FtbHRlc3QuaWQvc2FtbC9sb2dvLnBuZzwvbWR1aTpMb2dvPgogICAgICAgICAgICA8L21kdWk6VUlJbmZvPgogICAgICAgIDwvRXh0ZW5zaW9ucz4KCiAgICAgICAgPEtleURlc2NyaXB0b3IgdXNlPSJzaWduaW5nIj4KICAgICAgICAgICAgPGRzOktleUluZm8+CiAgICAgICAgICAgICAgICAgICAgPGRzOlg1MDlEYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPgpNSUlERVRDQ0FmbWdBd0lCQWdJVVpScERoa05LbDVlV3RKcWswQnUxQmdUVGFyZ3dEUVlKS29aSWh2Y05BUUVMCkJRQXdGakVVTUJJR0ExVUVBd3dMYzJGdGJIUmxjM1F1YVdRd0hoY05NVGd3T0RJME1qRXhOREV3V2hjTk16Z3cKT0RJME1qRXhOREV3V2pBV01SUXdFZ1lEVlFRRERBdHpZVzFzZEdWemRDNXBaRENDQVNJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSnJoOS9QY0RzaXYzVWVMOEl2OXJmNFdmTFB4dU9tOVc2YUNudEVBCjhsNmMxTFExWnlyeitYYS80MFpnUDI5RU5mM29LS2JQQ3pEY2M2em9vSE1qaTJmQm1nWHA2TGkzZlFVenU3eWQKK25JQzJ0ZWVqaWpWdHJOTGpuMVdVVHdtcWpMdHV6cktDL2VQb1p5SVJqcG9VeHlFTUpvcEFkNGRKbUFjQ3EvSwprMmVZWDlHWVJscXZJakxGb0dOZ3kyUjRkV3dBS3dsanloNnBkblBVZ3lPL1dqUkRycVVCUkZyTFFKb3JSMmtECmM0c2VaVWJtcFpaZnA0TWptV01EZ3lHTTFablIwWHZOTHRZZVdBeXQwS2tTdkZvT01qWlVlVksvNHhSNzRGOGUKOFRvUHFMbVpFZzlaVXgrNHoyS2pWSzAwTHBkUmtIOVV4aGgwM1JRMEZhYkhXNlVDQXdFQUFhTlhNRlV3SFFZRApWUjBPQkJZRUZKRGJlNnVTbVlRU2N4cFZKaG10N1BzQ0c0SWVNRFFHQTFVZEVRUXRNQ3VDQzNOaGJXeDBaWE4wCkxtbGtoaHhvZEhSd2N6b3ZMM05oYld4MFpYTjBMbWxrTDNOaGJXd3ZhV1J3TUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQk5jRjN6a3cvZzUxcTI2dXhneXV5NGdRd25TcjAxTWh2aXgzRGovR2FrNHRjNFh3dnhVZExRcStqQwpjeHIyUGllOTZrbFdoWS92L0ppSERVMkZKbzkvVld4bWMvWU9rODN3aHZOZDdtV2FOTVVzWDN4R3Y2QWxadENPCkwzSmhDcEhqaU4ra0JjTWdTNWpydEdnVjFMejMvMXpwR3h5a2R2UzBCNHNQbkZPY2FDd0hlMkI5U09DV2JEQU4KSlhwVGp6MURtSk80SW15V1BKcE4xeHNZS3RtNjdQZWZ4bW4wYXgwdUUydXV6cTI1aDB4YlRrcUlRZ0p6eW9FLwpEUGtCRksxdkRrTWZBVzExZFEwQlhhdEVuVzdHdGtjMGxoMi9QSWJIV2o0QXp4WU15QmY1R3k2SFNWT2Z0d2pDCnZvUVIycXIyeEpCaXhzZytNSU9SS3RtS0hMZlUKICAgICAgICAgICAgICAgICAgICAgICAgPC9kczpYNTA5Q2VydGlmaWNhdGU+CiAgICAgICAgICAgICAgICAgICAgPC9kczpYNTA5RGF0YT4KICAgICAgICAgICAgPC9kczpLZXlJbmZvPgoKICAgICAgICA8L0tleURlc2NyaXB0b3I+CiAgICAgICAgPEtleURlc2NyaXB0b3IgdXNlPSJzaWduaW5nIj4KICAgICAgICAgICAgPGRzOktleUluZm8+CiAgICAgICAgICAgICAgICAgICAgPGRzOlg1MDlEYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPgpNSUlERWpDQ0FmcWdBd0lCQWdJVkFNRUNRMXRqZ2hhZm01T3hXRGg5aHdaZnh0aFdNQTBHQ1NxR1NJYjNEUUVCCkN3VUFNQll4RkRBU0JnTlZCQU1NQzNOaGJXeDBaWE4wTG1sa01CNFhEVEU0TURneU5ESXhNVFF3T1ZvWERUTTQKTURneU5ESXhNVFF3T1Zvd0ZqRVVNQklHQTFVRUF3d0xjMkZ0YkhSbGMzUXVhV1F3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMwWjRRWDFORktzNzF1ZmJRd29Rb1c3cWtOQUpSSUFOR0E0aU0wClRoWWdodWwzcEMrRndyR3YzN2FUeFdYZkExVUc5bmpLYmJEcmVpREFaS25nQ2d5anhqMHVKNGxBcmdrcjRBT0UKamo1elhBODF1R0hBUmZVQmN0dlFjc1pwQkl4RE92VVVJbUFsKzNOcUxnTUdGMmZrdHhNRzdrWDNHRVZOYzFrbApiTjNkZllzYXc1ZFVydzI1RGhlTDlucDdHLysyOEd3SFB2TGI0YXB0T2lPTmJDYVZ2aDlVTUhFQTlGN2MwemZGCi9jTDVmT3BkVmE1NHdUSTB1MTJDc0ZLdDc4aDZsRUdHNWpVcy9xWDljbFpuY0pNN0VGa04zaW1QUHkrMEhDOG4Kc3BYaUgvTVpXOG8yY3FXUmtydzNNekJaVzNPams1blFqNDBWNk5VYmpiN2tmZWp6QWdNQkFBR2pWekJWTUIwRwpBMVVkRGdRV0JCUVQ2WTlKM1R3L2hPR2M4UE5WN0pFRTRrMlpOVEEwQmdOVkhSRUVMVEFyZ2d0ellXMXNkR1Z6CmRDNXBaSVljYUhSMGNITTZMeTl6WVcxc2RHVnpkQzVwWkM5ellXMXNMMmxrY0RBTkJna3Foa2lHOXcwQkFRc0YKQUFPQ0FRRUFTazNndUtmVGtWaEVhSVZ2eEVQTlIydzN2V3QzZndtd0pDY2NXOThYWExXZ05idTNZYU1iMlJTbgo3VGg0cDNoK21meWsyZG9uNmF1N1V5emMxSmQzOVJOdjgwVEc1aVFveGZDZ3BoeTFGWW1tZGFTZk84d3ZEdEhUClROaUxBckF4T1l0emZZYnpiNVFyTk5IL2dRRU44UkphRWYvZy8xR1R3OXgvMTAzZFNNSzBSWHRsK2ZSczJuYmwKRDFKSktTUTNBZGh4Sy93ZVAzYVVQdEx4VlZKOXdNT1FPZmN5MDJsK2hITWI2dUFqc1BPcE9WS3FpM004WG1jVQpaT3B4NHN3dGdHZGVvU3BlUnlydE12UndkY2NpTkJwOVVab21lNDRxWkFZSDFpcXJwbW1qc2ZJOXBKSXRzZ1d1CjNrWFBqaFNmajFBSkdSMWw5Skd2SnJIa2kxaUhUQT09CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZHM6WDUwOUNlcnRpZmljYXRlPgogICAgICAgICAgICAgICAgICAgIDwvZHM6WDUwOURhdGE+CiAgICAgICAgICAgIDwvZHM6S2V5SW5mbz4KCiAgICAgICAgPC9LZXlEZXNjcmlwdG9yPgogICAgICAgIDxLZXlEZXNjcmlwdG9yIHVzZT0iZW5jcnlwdGlvbiI+CiAgICAgICAgICAgIDxkczpLZXlJbmZvPgogICAgICAgICAgICAgICAgICAgIDxkczpYNTA5RGF0YT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRzOlg1MDlDZXJ0aWZpY2F0ZT4KTUlJREVqQ0NBZnFnQXdJQkFnSVZBUFZib2RvOFN1Ny9CYUhYVUh5a3gwUGk1Q0ZhTUEwR0NTcUdTSWIzRFFFQgpDd1VBTUJZeEZEQVNCZ05WQkFNTUMzTmhiV3gwWlhOMExtbGtNQjRYRFRFNE1EZ3lOREl4TVRRd09Wb1hEVE00Ck1EZ3lOREl4TVRRd09Wb3dGakVVTUJJR0ExVUVBd3dMYzJGdGJIUmxjM1F1YVdRd2dnRWlNQTBHQ1NxR1NJYjMKRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDUWIrMWE3dURkVFRCQkZmd09VdW4zSVE5bkV1S005OFNtSkRXYQpNd004NzdlbHN3S1VUSUJWaDVnQjJSSVhBUFp0N0ovS0dxeXBtZ3c5VU5YRm5vc2xwZVpiQTlmY0FxcXUyOFo0CnNTYjJZU2FqVjFaZ0VZUFVLdlh3UUVtTFdONmFEaGtuOEhuRVpOcm1lWGloVEZkeXI3d2pzTGowSnBRK1ZVbGMKNC9KK2hOdVU3ckdZWjFyS1k4QUEzNHFEVmQ0RGlKK0RYVzJQRVNmT3U4bEpTT3RlRWFOdGJtbnZIOEtsd2tEcwoxTnZQVHNJMFcvbTRTSzBVZFhvNkxMYVY4c2FJcEpmbmtWQy9Gd3BCb2xCclJDL0VtNjRVbEJzUlptMlQ4OWNhCnV6RGVlMnlQVXZiQmQ1a0xFcncrc0M3aTR4WGEyckdtc1FMWWNCUGhzUndubUJtbEFnTUJBQUdqVnpCVk1CMEcKQTFVZERnUVdCQlJaM2V4RXU2ckN3UmU1QzdmNVFyUGNBS1JQVWpBMEJnTlZIUkVFTFRBcmdndHpZVzFzZEdWegpkQzVwWklZY2FIUjBjSE02THk5ellXMXNkR1Z6ZEM1cFpDOXpZVzFzTDJsa2NEQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBQlpERlJOdGNidklSbWJsblpJdG9XQ0ZoVlVscTgxY2VTUWRkTFlzOERxSzM0MC8vaFdOQWJZZGoKV2NQODVIaElabnJ3Nk5HQ080YlVpcHhaWGhpcVRBL0E5ZDFCVWxsMHZZQjhxY2tZREVkUERkdVlDT1llbUtrRApkbW5ITVFXczlZNnpXaVl1TktFSjltZjMrMU44a25OL1BLMFRZVmpWalhBZjJDbk9FVERiTHRsajZOcWI4TGEzCnNRa1ltVSthVWRvcGJqZDVKRkZ3YlpSYWo2S2lIWEh0bklSZ3U4c1VYTlByZ2lwVWdaVU9WaFAwQzBONU9mRTQKSlc4WkJyS2dRQy82dkoyclNhOVRsekk2SkFhNVd3N2dNWE1QOU0rY0pVTlFrbGNxK1NCblRLOEcrdUJIZ1BLUgp6QkRzTUlFelJ0UVptNEdJb0hKYWU0em1uQ2Vra1E9PQogICAgICAgICAgICAgICAgICAgICAgICA8L2RzOlg1MDlDZXJ0aWZpY2F0ZT4KICAgICAgICAgICAgICAgICAgICA8L2RzOlg1MDlEYXRhPgogICAgICAgICAgICA8L2RzOktleUluZm8+CgogICAgICAgIDwvS2V5RGVzY3JpcHRvcj4KCjwhLS0gQW4gZW5kcG9pbnQgZm9yIGFydGlmYWN0IHJlc29sdXRpb24uICBQbGVhc2Ugc2VlIFdpa2lwZWRpYSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IFNBTUwKICAgICBhcnRpZmFjdHMgYW5kIHdoZW4geW91IG1heSBmaW5kIHRoZW0gdXNlZnVsLiAtLT4KCiAgICAgICAgPEFydGlmYWN0UmVzb2x1dGlvblNlcnZpY2UgQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOlNPQVAiIExvY2F0aW9uPSJodHRwczovL3NhbWx0ZXN0LmlkL2lkcC9wcm9maWxlL1NBTUwyL1NPQVAvQXJ0aWZhY3RSZXNvbHV0aW9uIiBpbmRleD0iMSIgLz4KCjwhLS0gQSBzZXQgb2YgZW5kcG9pbnRzIHdoZXJlIHRoZSBJZFAgY2FuIHJlY2VpdmUgbG9nb3V0IG1lc3NhZ2VzLiBUaGVzZSBtdXN0IG1hdGNoIHRoZSBwdWJsaWMKZmFjaW5nIGFkZHJlc3NlcyBpZiB0aGlzIElkUCBpcyBob3N0ZWQgYmVoaW5kIGEgcmV2ZXJzZSBwcm94eS4gIC0tPiAKICAgICAgICA8U2luZ2xlTG9nb3V0U2VydmljZSBCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1SZWRpcmVjdCIgTG9jYXRpb249Imh0dHBzOi8vc2FtbHRlc3QuaWQvaWRwL3Byb2ZpbGUvU0FNTDIvUmVkaXJlY3QvU0xPIi8+CiAgICAgICAgPFNpbmdsZUxvZ291dFNlcnZpY2UgQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgTG9jYXRpb249Imh0dHBzOi8vc2FtbHRlc3QuaWQvaWRwL3Byb2ZpbGUvU0FNTDIvUE9TVC9TTE8iLz4KICAgICAgICA8U2luZ2xlTG9nb3V0U2VydmljZSBCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1QT1NULVNpbXBsZVNpZ24iIExvY2F0aW9uPSJodHRwczovL3NhbWx0ZXN0LmlkL2lkcC9wcm9maWxlL1NBTUwyL1BPU1QtU2ltcGxlU2lnbi9TTE8iLz4KCjwhLS0gQSBzZXQgb2YgZW5kcG9pbnRzIHRoZSBTUCBjYW4gc2VuZCBBdXRoblJlcXVlc3RzIHRvIGluIG9yZGVyIHRvIHRyaWdnZXIgdXNlciBhdXRoZW50aWNhdGlvbi4gLS0+CiAgICAgICAgPFNpbmdsZVNpZ25PblNlcnZpY2UgQmluZGluZz0idXJuOm1hY2U6c2hpYmJvbGV0aDoxLjA6cHJvZmlsZXM6QXV0aG5SZXF1ZXN0IiBMb2NhdGlvbj0iaHR0cHM6Ly9zYW1sdGVzdC5pZC9pZHAvcHJvZmlsZS9TaGliYm9sZXRoL1NTTyIvPgogICAgICAgIDxTaW5nbGVTaWduT25TZXJ2aWNlIEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLVBPU1QiIExvY2F0aW9uPSJodHRwczovL3NhbWx0ZXN0LmlkL2lkcC9wcm9maWxlL1NBTUwyL1BPU1QvU1NPIi8+CiAgICAgICAgPFNpbmdsZVNpZ25PblNlcnZpY2UgQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVC1TaW1wbGVTaWduIiBMb2NhdGlvbj0iaHR0cHM6Ly9zYW1sdGVzdC5pZC9pZHAvcHJvZmlsZS9TQU1MMi9QT1NULVNpbXBsZVNpZ24vU1NPIi8+CiAgICAgICAgPFNpbmdsZVNpZ25PblNlcnZpY2UgQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUmVkaXJlY3QiIExvY2F0aW9uPSJodHRwczovL3NhbWx0ZXN0LmlkL2lkcC9wcm9maWxlL1NBTUwyL1JlZGlyZWN0L1NTTyIvPgogICAgICAgIDxTaW5nbGVTaWduT25TZXJ2aWNlIEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpTT0FQIiBMb2NhdGlvbj0iaHR0cHM6Ly9zYW1sdGVzdC5pZC9pZHAvcHJvZmlsZS9TQU1MMi9TT0FQL0VDUCIvPgoKICAgIDwvSURQU1NPRGVzY3JpcHRvcj4KCjwvRW50aXR5RGVzY3JpcHRvcj4K",
          "object_roles": [
            {
              "object": "/orgs/example-org/apps/example-app",
              "role": "developer"
            }
          ],
          "org_id": "example-org",
          "role": "member"
        },
        "properties": {
          "authorizing_user_id": {
            "description": "ID of an existing user with permissions to apply roles to new users within the org.",
            "type": "string"
          },
          "domains": {
            "description": "One or more domains that this IdP should be associated to.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "ID used to refere to the IdP in Humanitec",
            "type": "string"
          },
          "metadata": {
            "description": "Base64 encoded SAML IdP Metadata XML",
            "items": {
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "object_roles": {
            "description": "A possibly empty array of additional roles on objects that the user should have.",
            "items": {
              "$ref": "#/components/schemas/ObjectRoleResponse"
            },
            "type": "array"
          },
          "org_id": {
            "description": "ID of the Organization that the new user should be added to.",
            "type": "string"
          },
          "role": {
            "description": "The role that the new user should have on the organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "metadata",
          "authorizing_user_id",
          "org_id",
          "role",
          "domains",
          "object_roles"
        ],
        "type": "object"
      },
      "IdentityTokenRequest": {
        "description": "IdentityToken holds the Identity providers temporary token along with the provider it is associated to.",
        "example": {
          "provider": "github",
          "token": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "provider": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityTokenResponse": {
        "description": "IdentityToken holds the Identity providers temporary token along with the provider it is associated to.",
        "example": {
          "provider": "github",
          "token": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "provider": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "token"
        ],
        "type": "object"
      },
      "LegacyTokenRequestRequest": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LegacyTokenRequestResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "id",
          "label"
        ],
        "type": "object"
      },
      "NewServiceUserRequest": {
        "description": "NewServiceUser holds the definition of a new service user.",
        "example": {
          "email": "ci-service-notifications@awesomecorp.com",
          "name": "CI Robot",
          "role": "artefactContributer"
        },
        "properties": {
          "email": {
            "description": "The email address that should get notifications about this service user. (Optional)",
            "type": "string"
          },
          "name": {
            "description": "The name that should be shown for this service user.",
            "type": "string"
          },
          "role": {
            "description": "The role that the service user should have on the organization it is created in",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewServiceUserResponse": {
        "description": "NewServiceUser holds the definition of a new service user.",
        "example": {
          "email": "ci-service-notifications@awesomecorp.com",
          "name": "CI Robot",
          "role": "artefactContributer"
        },
        "properties": {
          "email": {
            "description": "The email address that should get notifications about this service user. (Optional)",
            "type": "string"
          },
          "name": {
            "description": "The name that should be shown for this service user.",
            "type": "string"
          },
          "role": {
            "description": "The role that the service user should have on the organization it is created in",
            "type": "string"
          }
        },
        "required": [
          "name",
          "role"
        ],
        "type": "object"
      },
      "RegisterIdentityTokenRequest": {
        "description": "RegisterIdentityToken holds the Identity providers temporary token along with the provider it is associated to. It also has a required field of `privacy_policy_accepted`.",
        "example": {
          "privacy_policy_accepted": true,
          "provider": "github",
          "token": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "privacy_policy_accepted": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "signup_ref": {
            "description": "(optional) The reference to the source of the signup.",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegisterIdentityTokenResponse": {
        "description": "RegisterIdentityToken holds the Identity providers temporary token along with the provider it is associated to. It also has a required field of `privacy_policy_accepted`.",
        "example": {
          "privacy_policy_accepted": true,
          "provider": "github",
          "token": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "privacy_policy_accepted": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "signup_ref": {
            "description": "(optional) The reference to the source of the signup.",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "token",
          "privacy_policy_accepted",
          "signup_ref"
        ],
        "type": "object"
      },
      "TokenDefinitionRequest": {
        "description": "Defines the token to be created.",
        "example": {
          "description": "Humanitec API Calls from CircleCI Pipelines",
          "expires_at": "2022-04-30T19:47:01UTC",
          "id": "circle-ci-token",
          "type": "static"
        },
        "properties": {
          "description": {
            "type": "string"
          },
          "expires_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenDefinitionResponse": {
        "description": "Defines the token to be created.",
        "example": {
          "description": "Humanitec API Calls from CircleCI Pipelines",
          "expires_at": "2022-04-30T19:47:01UTC",
          "id": "circle-ci-token",
          "type": "static"
        },
        "properties": {
          "description": {
            "type": "string"
          },
          "expires_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "description"
        ],
        "type": "object"
      },
      "TokenInfoRequest": {
        "description": "Holds metadata about a token. `expires_at` is excluded if token does not expire.",
        "example": {
          "created_at": "2021-04-30T19:47:01UTC",
          "description": "Humanitec API Calls from CircleCI Pipelines",
          "expires_at": "2022-04-30T19:47:01UTC",
          "id": "circle-ci-token",
          "type": "static",
          "user_id": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expires_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenInfoResponse": {
        "description": "Holds metadata about a token. `expires_at` is excluded if token does not expire.",
        "example": {
          "created_at": "2021-04-30T19:47:01UTC",
          "description": "Humanitec API Calls from CircleCI Pipelines",
          "expires_at": "2022-04-30T19:47:01UTC",
          "id": "circle-ci-token",
          "type": "static",
          "user_id": "a7a04740ae985f12af58545e4edbac6a"
        },
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expires_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "created_by",
          "created_at",
          "type",
          "id",
          "description"
        ],
        "type": "object"
      },
      "TokenRequest": {
        "description": "Token holds the token and its type.",
        "example": {
          "token": "a7a04740ae985f12af58545e4edbac6a",
          "type": "jwt"
        },
        "properties": {
          "token": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenResponse": {
        "description": "Token holds the token and its type.",
        "example": {
          "token": "a7a04740ae985f12af58545e4edbac6a",
          "type": "jwt"
        },
        "properties": {
          "token": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "UserInviteRequest": {
        "description": "UserInvite stores the invitation details.",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "created_by": "admin-user-id",
          "email": "jo.trigg@awesomecorp.com",
          "expires_at": "2020-12-30T09:32:46Z",
          "user_id": "new-user-id"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp this invitation was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The ID of the user who created this invitation.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile.",
            "type": "string"
          },
          "expires_at": {
            "description": "The timestamp this invitation would expire.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "user_id": {
            "description": "The User ID for this user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInviteRequestRequest": {
        "description": "UserInviteRequest describes a new user invitation.",
        "example": {
          "email": "jo.trigg@awesomecorp.com",
          "role": "manager"
        },
        "properties": {
          "email": {
            "description": "The email address of the user from the profile.",
            "type": "string"
          },
          "role": {
            "description": "The role that this user would hold.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "type": "object"
      },
      "UserInviteRequestResponse": {
        "description": "UserInviteRequest describes a new user invitation.",
        "example": {
          "email": "jo.trigg@awesomecorp.com",
          "role": "manager"
        },
        "properties": {
          "email": {
            "description": "The email address of the user from the profile.",
            "type": "string"
          },
          "role": {
            "description": "The role that this user would hold.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "role"
        ],
        "type": "object"
      },
      "UserInviteResponse": {
        "description": "UserInvite stores the invitation details.",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "created_by": "admin-user-id",
          "email": "jo.trigg@awesomecorp.com",
          "expires_at": "2020-12-30T09:32:46Z",
          "user_id": "new-user-id"
        },
        "properties": {
          "created_at": {
            "description": "The timestamp this invitation was created.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "The ID of the user who created this invitation.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile.",
            "type": "string"
          },
          "expires_at": {
            "description": "The timestamp this invitation would expire.",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "user_id": {
            "description": "The User ID for this user.",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "expires_at",
          "created_by",
          "created_at"
        ],
        "type": "object"
      },
      "UserProfileExtendedRequest": {
        "description": "UserProfileExtended holds the profile information of a user including properties only accessible to the user.",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "email": "jo.trigg@awesomecorp.com",
          "id": "d510224a-4641-48fd-8054-68efd3537ee2",
          "name": "Jo Trigg",
          "properties": {
            "dont_show_welcome_screen": true
          }
        },
        "properties": {
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object"
          },
          "roles": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserProfileExtendedResponse": {
        "description": "UserProfileExtended holds the profile information of a user including properties only accessible to the user.",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "email": "jo.trigg@awesomecorp.com",
          "id": "d510224a-4641-48fd-8054-68efd3537ee2",
          "name": "Jo Trigg",
          "properties": {
            "dont_show_welcome_screen": true
          }
        },
        "properties": {
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object"
          },
          "roles": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "properties",
          "roles"
        ],
        "type": "object"
      },
      "UserProfileRequest": {
        "description": "UserProfile holds the profile information of a user",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "email": "jo.trigg@awesomecorp.com",
          "id": "d510224a-4641-48fd-8054-68efd3537ee2",
          "name": "Jo Trigg"
        },
        "properties": {
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserProfileResponse": {
        "description": "UserProfile holds the profile information of a user",
        "example": {
          "created_at": "2020-12-19T09:32:46Z",
          "email": "jo.trigg@awesomecorp.com",
          "id": "d510224a-4641-48fd-8054-68efd3537ee2",
          "name": "Jo Trigg"
        },
        "properties": {
          "created_at": {
            "description": "The time the user was first registered with Humanitec",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user from the profile",
            "type": "string"
          },
          "id": {
            "description": "The User ID for this user",
            "type": "string"
          },
          "name": {
            "description": "The name the user goes by",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "created_at"
        ],
        "type": "object"
      },
      "InternalJSONPatchRequest": {
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/InternalValueRequest"
          }
        },
        "type": "object"
      },
      "InternalJSONPatchResponse": {
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/InternalValueResponse"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "InternalJSONPatchesRequest": {
        "items": {
          "$ref": "#/components/schemas/InternalJSONPatchRequest"
        },
        "type": "array"
      },
      "InternalJSONPatchesResponse": {
        "items": {
          "$ref": "#/components/schemas/InternalJSONPatchResponse"
        },
        "type": "array"
      },
      "InternalValueRequest": {
        "properties": {
          "description": {
            "description": "A Human friendly description of what the Shared Value is.",
            "type": "string"
          },
          "is_secret": {
            "description": "Specified that the Shared Value contains a secret.",
            "type": "boolean"
          },
          "key": {
            "description": "The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.",
            "type": "string"
          },
          "secret_version": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "description": "The value that will be stored. (Will be always empty for secrets.)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InternalValueResponse": {
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "description": {
            "description": "A Human friendly description of what the Shared Value is.",
            "type": "string"
          },
          "is_secret": {
            "description": "Specified that the Shared Value contains a secret.",
            "type": "boolean"
          },
          "key": {
            "description": "The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.",
            "type": "string"
          },
          "secret_version": {
            "nullable": true,
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "value": {
            "description": "The value that will be stored. (Will be always empty for secrets.)",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value",
          "is_secret",
          "description",
          "created_at",
          "updated_at",
          "source",
          "secret_version"
        ],
        "type": "object"
      },
      "InternalValueSetRequest": {
        "additionalProperties": {
          "$ref": "#/components/schemas/InternalValueRequest"
        },
        "type": "object"
      },
      "InternalValueSetResponse": {
        "additionalProperties": {
          "$ref": "#/components/schemas/InternalValueResponse"
        },
        "type": "object"
      },
      "InternalValueSetVersionRequest": {
        "properties": {
          "change": {
            "$ref": "#/components/schemas/InternalJSONPatchesRequest"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "result_of": {
            "nullable": true,
            "type": "string"
          },
          "source_value_set_version_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "values": {
            "$ref": "#/components/schemas/InternalValueSetRequest"
          }
        },
        "type": "object"
      },
      "InternalValueSetVersionResponse": {
        "properties": {
          "change": {
            "$ref": "#/components/schemas/InternalJSONPatchesResponse"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "result_of": {
            "nullable": true,
            "type": "string"
          },
          "source_value_set_version_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "values": {
            "$ref": "#/components/schemas/InternalValueSetResponse"
          }
        },
        "required": [
          "id",
          "values",
          "change",
          "created_at",
          "created_by",
          "updated_at",
          "result_of",
          "comment",
          "source_value_set_version_id"
        ],
        "type": "object"
      },
      "JSONPatchRequest": {
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ValueRequest"
          }
        },
        "type": "object"
      },
      "JSONPatchResponse": {
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/ValueResponse"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "type": "object"
      },
      "JSONPatchesRequest": {
        "items": {
          "$ref": "#/components/schemas/JSONPatchRequest"
        },
        "type": "array"
      },
      "JSONPatchesResponse": {
        "items": {
          "$ref": "#/components/schemas/JSONPatchResponse"
        },
        "type": "array"
      },
      "ValueRequest": {
        "description": "Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.\n\nShared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.\n\nFor example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.",
        "example": {
          "description": "The message to show me.",
          "is_secret": false,
          "key": "MY_MSG",
          "value": "Hello World"
        },
        "properties": {
          "description": {
            "description": "A Human friendly description of what the Shared Value is.",
            "type": "string"
          },
          "is_secret": {
            "description": "Specified that the Shared Value contains a secret.",
            "type": "boolean"
          },
          "key": {
            "description": "The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.",
            "type": "string"
          },
          "value": {
            "description": "The value that will be stored. (Will be always empty for secrets.)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValueResponse": {
        "description": "Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.\n\nShared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.\n\nFor example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.",
        "example": {
          "description": "The message to show me.",
          "is_secret": false,
          "key": "MY_MSG",
          "value": "Hello World"
        },
        "properties": {
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "description": {
            "description": "A Human friendly description of what the Shared Value is.",
            "type": "string"
          },
          "is_secret": {
            "description": "Specified that the Shared Value contains a secret.",
            "type": "boolean"
          },
          "key": {
            "description": "The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.",
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "value": {
            "description": "The value that will be stored. (Will be always empty for secrets.)",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value",
          "is_secret",
          "description",
          "created_at",
          "updated_at",
          "source"
        ],
        "type": "object"
      },
      "ValueSetRequest": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ValueRequest"
        },
        "type": "object"
      },
      "ValueSetResponse": {
        "additionalProperties": {
          "$ref": "#/components/schemas/ValueResponse"
        },
        "type": "object"
      },
      "ValueSetVersionRequest": {
        "description": "Value Set Version can be used as a track record of Shared Value changes, restore to a previous Shared Value or purge an accidentally added Shared Value.",
        "properties": {
          "change": {
            "$ref": "#/components/schemas/JSONPatchesRequest"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "result_of": {
            "nullable": true,
            "type": "string"
          },
          "source_value_set_version_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "values": {
            "$ref": "#/components/schemas/ValueSetRequest"
          }
        },
        "type": "object"
      },
      "ValueSetVersionResponse": {
        "description": "Value Set Version can be used as a track record of Shared Value changes, restore to a previous Shared Value or purge an accidentally added Shared Value.",
        "properties": {
          "change": {
            "$ref": "#/components/schemas/JSONPatchesResponse"
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "result_of": {
            "nullable": true,
            "type": "string"
          },
          "source_value_set_version_id": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "values": {
            "$ref": "#/components/schemas/ValueSetResponse"
          }
        },
        "required": [
          "id",
          "values",
          "change",
          "created_at",
          "created_by",
          "updated_at",
          "result_of",
          "comment",
          "source_value_set_version_id"
        ],
        "type": "object"
      },
      "WorkloadProfileRequest": {
        "description": "Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.\n\nWorkloads in Humanitec are implemented as Helm Charts which must implement a specific schema.",
        "properties": {
          "id": {
            "description": "Workload Profile ID",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "WorkloadProfileResponse": {
        "description": "Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.\n\nWorkloads in Humanitec are implemented as Helm Charts which must implement a specific schema.",
        "properties": {
          "created_at": {
            "description": "Creation date",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "User created the profile",
            "type": "string"
          },
          "id": {
            "description": "Workload Profile ID",
            "type": "string"
          },
          "latest": {
            "description": "The latest version of the profile",
            "type": "string"
          },
          "org_id": {
            "description": "Organization ID",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "id",
          "created_at",
          "created_by",
          "latest"
        ],
        "type": "object"
      },
      "WorkloadProfileVersionRequest": {
        "description": "Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.",
        "properties": {
          "features": {
            "additionalProperties": true,
            "description": "A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.\n\n{\n\n}",
            "type": "object"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkloadProfileVersionResponse": {
        "description": "Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.",
        "properties": {
          "created_at": {
            "description": "Creation date",
            "example": "2020-06-22T09:37:23.523Z",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{3})?Z$",
            "title": "Simplified extended ISO format date/time string.",
            "type": "string"
          },
          "created_by": {
            "description": "User created the profile",
            "type": "string"
          },
          "features": {
            "additionalProperties": true,
            "description": "A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.\n\n{\n\n}",
            "type": "object"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "org_id": {
            "description": "Organization ID",
            "type": "string"
          },
          "profile_id": {
            "description": "Workload Profile ID",
            "type": "string"
          },
          "version": {
            "description": "Version",
            "type": "string"
          }
        },
        "required": [
          "org_id",
          "profile_id",
          "version",
          "features",
          "notes",
          "created_at",
          "created_by"
        ],
        "type": "object"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.humanitec.io/"
    }
  ],
  "externalDocs": {
    "description": "Find out more about how to use Humanitec in your every-day development work.",
    "url": "https://docs.humanitec.com"
  },
  "x-tagGroups": [
    {
      "name": "Core",
      "tags": [
        "Application",
        "Artefact",
        "ArtefactVersion",
        "Deployment",
        "EnvironmentType",
        "Environment",
        "Image",
        "Organization",
        "Registry",
        "RuntimeInfo",
        "Value"
      ]
    },
    {
      "name": "App Configuration",
      "tags": [
        "Delta",
        "Set",
        "WorkloadProfile"
      ]
    },
    {
      "name": "Resources",
      "tags": [
        "ActiveResource",
        "DriverDefinition",
        "MatchingCriteria",
        "ResourceDefinition",
        "ResourceAccount",
        "ResourceType"
      ]
    },
    {
      "name": "Automation",
      "tags": [
        "AutomationRule",
        "Webhook"
      ]
    },
    {
      "name": "Users",
      "tags": [
        "UserProfile",
        "UserRole"
      ]
    }
  ],
  "tags": [
    {
      "name": "MatchingCriteria",
      "x-displayName": "MatchingCriteria",
      "description": "Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.\n\nMatching criteria are made up in order of specificity with least specific first:\n\n- Environment Type (`env_type`)\n\n- Application (`app_id`)\n\n- Environment (`env_id`)\n\n- Resource (`res_id`)\n\nWhen selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.\n\n**NOTE:**\n\nHumanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.\n<SchemaDefinition schemaRef=\"#/components/schemas/MatchingCriteriaRequest\" />\n"
    },
    {
      "name": "Organization",
      "x-displayName": "Organization",
      "description": "An Organization is the top level object in Humanitec. All other objects belong to an Organization.\n<SchemaDefinition schemaRef=\"#/components/schemas/OrganizationRequest\" />\n"
    },
    {
      "name": "ResourceDefinition",
      "x-displayName": "Definitions",
      "description": "A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.\n\nThe schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.\n<SchemaDefinition schemaRef=\"#/components/schemas/ResourceDefinitionRequest\" />\n"
    },
    {
      "name": "RuntimeInfo",
      "x-displayName": "Runtime Information",
      "description": "RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).\n<SchemaDefinition schemaRef=\"#/components/schemas/RuntimeInfoRequest\" />\n"
    },
    {
      "name": "UserProfile",
      "x-displayName": "User Profiles",
      "description": "UserProfile holds the profile information of a user\n<SchemaDefinition schemaRef=\"#/components/schemas/UserProfileRequest\" />\n"
    },
    {
      "name": "UserRole",
      "x-displayName": "User Roles",
      "description": "UserRole holds the mapping of role to user for a particular object.\n<SchemaDefinition schemaRef=\"#/components/schemas/UserRoleRequest\" />\n"
    },
    {
      "name": "WorkloadProfile",
      "x-displayName": "Workload Profiles",
      "description": "Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.\n\nWorkloads in Humanitec are implemented as Helm Charts which must implement a specific schema.\n<SchemaDefinition schemaRef=\"#/components/schemas/WorkloadProfileRequest\" />\n"
    },
    {
      "name": "AccountType",
      "x-displayName": "Account Types",
      "description": "Resource Account Types define cloud providers or protocols to which a resource account can belong.\n<SchemaDefinition schemaRef=\"#/components/schemas/AccountTypeRequest\" />\n"
    },
    {
      "name": "ActiveResource",
      "x-displayName": "Active Resources",
      "description": "Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.\n\nActive Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.\n<SchemaDefinition schemaRef=\"#/components/schemas/ActiveResourceRequest\" />\n"
    },
    {
      "name": "Application",
      "x-displayName": "Applications",
      "description": "An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.\n\nApps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.\n<SchemaDefinition schemaRef=\"#/components/schemas/ApplicationRequest\" />\n"
    },
    {
      "name": "Artefact",
      "x-displayName": "Artefact",
      "description": "Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.\n<SchemaDefinition schemaRef=\"#/components/schemas/ArtefactRequest\" />\n"
    },
    {
      "name": "ArtefactVersion",
      "x-displayName": "Artefact Version",
      "description": "An Artefact Version represents a particular version of an Artefact that can be added to an Application.\n<SchemaDefinition schemaRef=\"#/components/schemas/ArtefactVersionRequest\" />\n"
    },
    {
      "name": "AutomationRule",
      "x-displayName": "Automation Rules",
      "description": "An Automation Rule defining how and when artefacts in an environment should be updated.\n<SchemaDefinition schemaRef=\"#/components/schemas/AutomationRuleRequest\" />\n"
    },
    {
      "name": "Delta",
      "x-displayName": "Deployment Deltas",
      "description": "A Deployment Delta (or just \"Delta\") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.\n\nDeployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Delta.>,\n   \"metadata\": {\n     <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>\n   }\n   \"modules\" : {\n     \"add\" : {\n       <ID of Module to add to the Deployment Set> : {\n         <An entire Modules object>\n       }\n     },\n     \"remove\": [\n       <An array of Module IDs that should be removed from the Deployment Set>\n     ],\n    \"update\": {\n       <ID of Module already in the Set to be updated> : [\n         <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>\n       ]\n     }\n   }\n }\n```\n<SchemaDefinition schemaRef=\"#/components/schemas/DeltaRequest\" />\n"
    },
    {
      "name": "Deployment",
      "x-displayName": "Deployments",
      "description": "Deployments represent updates to the running state of an Environment.\n\nDeployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be \"cloned\" into the current Environment with the option to apply a Delta.\n<SchemaDefinition schemaRef=\"#/components/schemas/DeploymentRequest\" />\n"
    },
    {
      "name": "DriverDefinition",
      "x-displayName": "Resource Drivers",
      "description": "DriverDefinition describes the resource driver.\n\nResource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.\n<SchemaDefinition schemaRef=\"#/components/schemas/DriverDefinitionRequest\" />\n"
    },
    {
      "name": "Environment",
      "x-displayName": "Environments",
      "description": "Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.\n<SchemaDefinition schemaRef=\"#/components/schemas/EnvironmentRequest\" />\n"
    },
    {
      "name": "EnvironmentType",
      "x-displayName": "Environment Types",
      "description": "Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.\n\nEnvironment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.\n<SchemaDefinition schemaRef=\"#/components/schemas/EnvironmentTypeRequest\" />\n"
    },
    {
      "name": "Image",
      "x-displayName": "Image",
      "description": "DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.\n\nContainer Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built."    },
    {
      "name": "Registry",
      "x-displayName": "Registry",
      "description": "Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.\n\nHumanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.\n<SchemaDefinition schemaRef=\"#/components/schemas/RegistryRequest\" />\n"
    },
    {
      "name": "Replicas",
      "x-displayName": "Replicas",
      "description": "null\n<SchemaDefinition schemaRef=\"#/components/schemas/ReplicasRequest\" />\n"
    },
    {
      "name": "ResourceAccount",
      "x-displayName": "Resource Accounts",
      "description": "ResourceAccount represents the account being used to access a resource.\n\nResource Accounts hold credentials that are required to provision and manage resources.\n<SchemaDefinition schemaRef=\"#/components/schemas/ResourceAccountRequest\" />\n"
    },
    {
      "name": "ResourceType",
      "x-displayName": "Resources Types",
      "description": "Resources Types define the technology that Applications can have dependencies on.\n\nEach Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.\n<SchemaDefinition schemaRef=\"#/components/schemas/ResourceTypeRequest\" />\n"
    },
    {
      "name": "Set",
      "x-displayName": "Deployment Sets",
      "description": "A Deployment Set (or just \"Set\") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.\n\nDeployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.\n\nDeployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.\n\n**Basic Structure**\n\n```\n {\n   \"id\": <ID of the Deployment Set>,\n   \"modules\" : {\n     <ID of Module> : {\n       \"profile\": <Defines how the optional \"spec\" property is interpreted>\n       \"spec\": {\n         <Properties that depend on the \"profile\" property.>\n       }\n       \"externals\": {\n         <External Resource Name> : {\n           \"type\": <Resource Type>,\n           \"params\": {\n             <Properties which parametrize the resource depending on the Resource Type.>\n           }\n         }\n       }\n     }\n   }\n }\n```\n\nFor details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].\n<SchemaDefinition schemaRef=\"#/components/schemas/SetRequest\" />\n"
    },
    {
      "name": "Value",
      "x-displayName": "Shared Values",
      "description": "Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.\n\nShared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.\n\nFor example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.\n<SchemaDefinition schemaRef=\"#/components/schemas/ValueRequest\" />\n"
    },
    {
      "name": "Webhook",
      "x-displayName": "Webhooks",
      "description": "Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.\n<SchemaDefinition schemaRef=\"#/components/schemas/WebhookRequest\" />\n"
    }
  ]
}
