// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// AccountCreds represents an account credentials (either, username- or token-based).
type AccountCredsRequest struct {
	// Account credentials expiration timestamp.
	Expires *string `json:"expires"`

	// Account password or token secret.
	Password string `json:"password"`

	// Security account login or token.
	Username string `json:"username"`
}

// Resource Account Types define cloud providers or protocols to which a resource account can belong.
type AccountTypeResponse struct {
	// Display Name.
	Name string `json:"name"`

	// Unique account type identifier (system-wide, across all organizations).
	Type string `json:"type"`
}

// Active Resources represent the concrete resources provisioned for an Environment. They are provisioned on the first deployment after a dependency on a particular resource type is introduced into an Environment. In general, Active Resources are only deleted when their introductory Environment is deleted.
//
// Active Resources are provisioned based on a Resource Definition. The Resource Definition describes how to provision a concrete resource based on a Resource Type and metadata about the Environment (for example the Environment Type or the Application ID). The criteria for how to choose a Resource Definition is known as a Matching Criteria. If the Matching Criteria changes or the Resource Definition is deleted, the concrete resource represented by an Active Resource might be deleted and reprovisioned when a deployment occurs in the Environment.
type ActiveResourceResponse struct {
	// The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// DEPRECATED: For backward compatibility only. Use `resource` property instead.
	Data ActiveResourceResponse_Data `json:"data"`

	// The Resource Definition that this resource was provisioned from.
	DefId string `json:"def_id"`

	// The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// The Environment Type of the Environment specified by env_id.
	EnvType string `json:"env_type"`

	// the ID of the Organization the Active Resource is associated with.
	OrgId string `json:"org_id"`

	// The ID of the resource
	ResId string `json:"res_id"`

	// The data that the resource passes into the deployment ('values' only).
	Resource ActiveResourceResponse_Resource `json:"resource"`

	// Current resource status: 'pending', 'active', or 'deleting'.
	Status string `json:"status"`

	// The Resource Type of the resource
	Type string `json:"type"`

	// The time the resource was last provisioned as part of a deployment.
	UpdatedAt string `json:"updated_at"`
}

// DEPRECATED: For backward compatibility only. Use `resource` property instead.
type ActiveResourceResponse_Data struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// The data that the resource passes into the deployment ('values' only).
type ActiveResourceResponse_Resource struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AddArtefactVersionPayload describes the payload for a new ArtefactVersion request.
type AddArtefactVersionPayloadRequest struct {
	// (Optional) The commit ID the Artefact Version was built on.
	Commit *string `json:"commit,omitempty"`

	// (Optional) The Artefact Version digest.
	Digest *string `json:"digest,omitempty"`

	// The Artefact name.
	Name string `json:"name"`

	// (Optional) The ref the Artefact Version was built from.
	Ref *string `json:"ref,omitempty"`

	// The Artefact Version type.
	Type string `json:"type"`

	// (Optional) The Artefact Version.
	Version *string `json:"version,omitempty"`
}

// An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.
//
// Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
type ApplicationRequest struct {
	// The ID which refers to a specific application.
	Id string `json:"id"`

	// The Human-friendly name for the Application.
	Name string `json:"name"`
}

// An Application is a collection of Modules that work together. When deployed, all Modules in an Application are deployed to the same namespace.
//
// Apps are the root of the configuration tree holding Environments, Deployments, Shared Values, and Secrets.
type ApplicationResponse struct {
	// The timestamp in UTC indicates when the Application was created.
	CreatedAt string `json:"created_at"`

	// The user who created the Application.
	CreatedBy string `json:"created_by"`

	// The Environments associated with the Application.
	Envs []EnvironmentBaseResponse `json:"envs"`

	// The ID which refers to a specific application.
	Id string `json:"id"`

	// The Human-friendly name for the Application.
	Name string `json:"name"`
}

// Artefacts can be registered with Humanitec. Continuous Integration (CI) pipelines notify Humanitec when a new version of an Artefact becomes available. Humanitec tracks the Artefact along with metadata about how it was built.
type ArtefactResponse struct {
	// The time when the Artefact was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// The user ID of the user who added the Artefact to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// The UUID of the Artefact.
	Id string `json:"id"`

	// The name of the Artefact.
	Name string `json:"name"`

	// The type of the Artefact.
	Type string `json:"type"`

	// The time when the Artefact was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// The user ID of the user who updated the Artefact for the last time.
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// An Artefact Version represents a particular version of an Artefact that can be added to an Application.
type ArtefactVersionResponse struct {
	// If the Artefact Version is archived.
	Archived bool `json:"archived"`

	// The UUID of the Artefact.
	ArtefactId string `json:"artefact_id"`

	// (Optional) The commit ID the Artefact Version was built on.
	Commit string `json:"commit"`

	// The time when the Artefact Version was added to Humanitec.
	CreatedAt *string `json:"created_at,omitempty"`

	// The user ID of the user who added the Artefact Version to Humanitec.
	CreatedBy *string `json:"created_by,omitempty"`

	// (Optional) The Artefact Version digest.
	Digest string `json:"digest"`

	// The UUID of the Artefact Version.
	Id string `json:"id"`

	// The name of the Artefact.
	Name string `json:"name"`

	// (Optional) The ref the Artefact Version was built from.
	Ref string `json:"ref"`

	// The time when the Artefact Version was updated for the last time.
	UpdatedAt *string `json:"updated_at,omitempty"`

	// The user ID of the user who performed the last updated on the Artefact Version.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// (Optional) The version of the Artefact Version.
	Version string `json:"version"`
}

// An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleRequest struct {
	// Whether the rule will be processed or not.
	Active *bool `json:"active,omitempty"`

	// A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter *[]string `json:"artefacts_filter,omitempty"`

	// Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter *bool `json:"exclude_artefacts_filter,omitempty"`

	// DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter *bool `json:"exclude_images_filter,omitempty"`

	// DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter *[]string `json:"images_filter,omitempty"`

	// DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match *string `json:"match,omitempty"`

	// A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef *string `json:"match_ref,omitempty"`

	// Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo *string `json:"update_to,omitempty"`
}

// An Automation Rule defining how and when artefacts in an environment should be updated.
type AutomationRuleResponse struct {
	// Whether the rule will be processed or not.
	Active bool `json:"active"`

	// A list of artefact names to be processed by the rule. If the array is empty, it implies include all. If `exclude_artefacts_filter` is true, this list describes the artefacts to exclude.
	ArtefactsFilter []string `json:"artefacts_filter"`

	// The timestamp in UTC of when the Automation Rule was created.
	CreatedAt string `json:"created_at"`

	// Whether the artefacts specified in `artefacts_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeArtefactsFilter bool `json:"exclude_artefacts_filter"`

	// DEPRECATED: Whether the images specified in `images_filter` should be excluded (true) or included (false) in the automation rule.
	ExcludeImagesFilter bool `json:"exclude_images_filter"`

	// The unique ID for this rule.
	Id string `json:"id"`

	// DEPRECATED: A list of image IDs to be processed by the rule. If the array is empty, it implies include all. If `exclude_images_filter` is true, this list describes images to exclude.
	ImagesFilter []string `json:"images_filter"`

	// DEPRECATED: A regular expression applied to the branch or tag name depending on the value of `update_to`. Defaults to match all if omitted or empty.
	Match string `json:"match"`

	// A regular expression applied to the ref of a new artefact version. Defaults to match all if omitted or empty.
	MatchRef string `json:"match_ref"`

	// Specifies the type of event. Currently, only updates to either branches or tags are supported. Must be `"update"`.
	Type string `json:"type"`

	// DEPRECATED: Specifies whether the update occurs on commit to branch or creation of tag. Must be one of `"branch"` or `"tag"`.
	UpdateTo string `json:"update_to"`

	// The timestamp in UTC of when the Automation Rule was updated.
	UpdatedAt string `json:"updated_at"`
}

// ClusterSecret represents Kubernetes secret reference.
type ClusterSecretRequest struct {
	// Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecret represents Kubernetes secret reference.
type ClusterSecretResponse struct {
	// Namespace to look for the Kubernetes secret definition in.
	Namespace string `json:"namespace"`

	// Name that identifies the Kubernetes secret.
	Secret string `json:"secret"`
}

// ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapRequest struct {
	AdditionalProperties map[string]ClusterSecretRequest `json:"-"`
}

// ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
type ClusterSecretsMapResponse struct {
	AdditionalProperties map[string]ClusterSecretResponse `json:"-"`
}

// Controller represents deployment, stateful set etc
type ControllerResponse struct {
	Kind     string             `json:"kind"`
	Message  string             `json:"message"`
	Pods     []PodStateResponse `json:"pods"`
	Replicas int                `json:"replicas"`
	Revision int                `json:"revision"`
	Status   string             `json:"status"`
}

// CreateDriverRequest describes the new resource driver registration request.
type CreateDriverRequestRequest struct {
	// List of resources accounts types supported by the driver
	AccountTypes *[]string `json:"account_types,omitempty"`

	// The ID for this driver. Is used as `driver_type`.
	Id *string `json:"id,omitempty"`

	// A JSON Schema specifying the driver-specific input parameters.
	InputsSchema *CreateDriverRequestRequest_InputsSchema `json:"inputs_schema,omitempty"`

	// Defines whether this driver is accessible to all Organizations.
	IsPublic *bool `json:"is_public,omitempty"`

	// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
	ParamSchema *CreateDriverRequestRequest_ParamSchema `json:"param_schema,omitempty"`

	// The type of resource produced by this driver
	Type *string `json:"type,omitempty"`

	// The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// A JSON Schema specifying the driver-specific input parameters.
type CreateDriverRequestRequest_InputsSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
type CreateDriverRequestRequest_ParamSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CreateResourceAccountRequest describes the request to create a new security account.
type CreateResourceAccountRequestRequest struct {
	// Credentials associated with the account.
	Credentials *CreateResourceAccountRequestRequest_Credentials `json:"credentials,omitempty"`

	// Unique identifier for the account (in scope of the organization it belongs to).
	Id *string `json:"id,omitempty"`

	// Display name.
	Name *string `json:"name,omitempty"`

	// The type of the account
	Type *string `json:"type,omitempty"`
}

// Credentials associated with the account.
type CreateResourceAccountRequestRequest_Credentials struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CreateResourceDefinitionRequest describes a new ResourceDefinition request.
type CreateResourceDefinitionRequestRequest struct {
	// (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaRequest `json:"criteria,omitempty"`

	// (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// ValuesSecrets stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRequest `json:"driver_inputs,omitempty"`

	// The driver to be used to create the resource.
	DriverType string `json:"driver_type"`

	// The Resource Definition ID.
	Id string `json:"id"`

	// The display name.
	Name string `json:"name"`

	// The Resource Type.
	Type string `json:"type"`
}

// DeltaMetadataRequest defines model for DeltaMetadataRequest.
type DeltaMetadataRequest struct {
	Archived       *bool     `json:"archived,omitempty"`
	Contributers   *[]string `json:"contributers,omitempty"`
	CreatedAt      *string   `json:"created_at,omitempty"`
	CreatedBy      *string   `json:"created_by,omitempty"`
	EnvId          *string   `json:"env_id,omitempty"`
	LastModifiedAt *string   `json:"last_modified_at,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Shared         *bool     `json:"shared,omitempty"`
}

// DeltaMetadataResponse defines model for DeltaMetadataResponse.
type DeltaMetadataResponse struct {
	Archived       bool      `json:"archived"`
	Contributers   *[]string `json:"contributers,omitempty"`
	CreatedAt      string    `json:"created_at"`
	CreatedBy      string    `json:"created_by"`
	EnvId          *string   `json:"env_id,omitempty"`
	LastModifiedAt string    `json:"last_modified_at"`
	Name           *string   `json:"name,omitempty"`
	Shared         *bool     `json:"shared,omitempty"`
}

// A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//  {
//    "id": <ID of the Deployment Delta.>,
//    "metadata": {
//      <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//    }
//    "modules" : {
//      "add" : {
//        <ID of Module to add to the Deployment Set> : {
//          <An entire Modules object>
//        }
//      },
//      "remove": [
//        <An array of Module IDs that should be removed from the Deployment Set>
//      ],
//     "update": {
//        <ID of Module already in the Set to be updated> : [
//          <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//        ]
//      }
//    }
//  }
// ```
type DeltaRequest struct {
	Metadata *DeltaMetadataRequest `json:"metadata,omitempty"`

	// ModuleDeltas groups the different operations together.
	Modules *ModuleDeltasRequest   `json:"modules,omitempty"`
	Shared  *[]UpdateActionRequest `json:"shared,omitempty"`
}

// A Deployment Delta (or just "Delta") describes the changes that must be applied to one Deployment Set to generate another Deployment Set. Deployment Deltas are the only way to create new Deployment Sets.
//
// Deployment Deltas can be created fully formed or combined together via PATCHing. They can also be generated from the difference between two Deployment Sets.
//
// **Basic Structure**
//
// ```
//  {
//    "id": <ID of the Deployment Delta.>,
//    "metadata": {
//      <Properties such as who created the Delta, which Environment it is associated to and a Human-friendly name>
//    }
//    "modules" : {
//      "add" : {
//        <ID of Module to add to the Deployment Set> : {
//          <An entire Modules object>
//        }
//      },
//      "remove": [
//        <An array of Module IDs that should be removed from the Deployment Set>
//      ],
//     "update": {
//        <ID of Module already in the Set to be updated> : [
//          <An array of JSON Patch (Search Results (RFC 6902) objects scoped to the module>
//        ]
//      }
//    }
//  }
// ```
type DeltaResponse struct {
	// A unique ID for the Delta
	Id       string                `json:"id"`
	Metadata DeltaMetadataResponse `json:"metadata"`

	// ModuleDeltas groups the different operations together.
	Modules ModuleDeltasResponse   `json:"modules"`
	Shared  []UpdateActionResponse `json:"shared"`
}

// DeploymentError is an error happening during deployment
type DeploymentErrorResponse struct {
	Code     string `json:"code"`
	Message  string `json:"message"`
	ObjectId string `json:"object_id"`
	Scope    string `json:"scope"`
	Summary  string `json:"summary"`
}

// Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentRequest struct {
	// An optional comment to help communicate the purpose of the Deployment.
	Comment *string `json:"comment,omitempty"`

	// ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId *string `json:"delta_id,omitempty"`

	// ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// Deployments represent updates to the running state of an Environment.
//
// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
type DeploymentResponse struct {
	// An optional comment to help communicate the purpose of the Deployment.
	Comment string `json:"comment"`

	// The Timestamp of when the Deployment was initiated.
	CreatedAt string `json:"created_at"`

	// The user who initiated the Deployment.
	CreatedBy string `json:"created_by"`

	// ID of the Deployment Delta describing the changes to the current Environment for this Deployment.
	DeltaId *string `json:"delta_id,omitempty"`

	// The Environment where the Deployment occurred.
	EnvId        string `json:"env_id"`
	ExportFile   string `json:"export_file"`
	ExportStatus string `json:"export_status"`

	// The ID of the Deployment that this Deployment was based on.
	FromId string `json:"from_id"`

	// The ID of the Deployment.
	Id string `json:"id"`

	// ID of the Deployment Set describing the state of the Environment after Deployment.
	SetId string `json:"set_id"`

	// The current status of the Deployment. Can be `pending`, `in progress`, `succeeded`, or `failed`.
	Status string `json:"status"`

	// The timestamp of the last `status` change. If `status` is `succeeded` or `failed` it it will indicate when the Deployment finished.
	StatusChangedAt string `json:"status_changed_at"`

	// ID of the Value Set Version describe the values to be used for this Deployment.
	ValueSetVersionId *string `json:"value_set_version_id"`
}

// DriverDefinition describes the resource driver.
//
// Resource Drivers are code that fulfils the Humanitec Resource Driver Interface. This interface allows for certain actions to be performed on resources such as creation and destruction. Humanitec provides numerous Resource Drivers “out of the box”. It is also possible to use 3rd party Resource Drivers or write your own.
type DriverDefinitionResponse struct {
	// List of resources accounts types supported by the driver
	AccountTypes []string `json:"account_types"`

	// The ID for this driver. Is used as `driver_type`.
	Id string `json:"id"`

	// A JSON Schema specifying the driver-specific input parameters.
	InputsSchema DriverDefinitionResponse_InputsSchema `json:"inputs_schema"`

	// Defines whether this driver is accessible to all Organizations.
	IsPublic bool `json:"is_public"`

	// The Organization this driver exists under. Useful as public drivers are accessible to other orgs.
	OrgId string `json:"org_id"`

	// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
	ParamSchema DriverDefinitionResponse_ParamSchema `json:"param_schema"`

	// The type of resource produced by this driver
	Type string `json:"type"`

	// DEPRECATED: Array of the resource types produced by this driver. Use 'type' instead.
	Types *[]string `json:"types,omitempty"`

	// The prefix where the driver resides. Only members of the organization the driver belongs to can see `url_prefix`.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// A JSON Schema specifying the driver-specific input parameters.
type DriverDefinitionResponse_InputsSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
type DriverDefinitionResponse_ParamSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EnvironmentBaseResponse defines model for EnvironmentBaseResponse.
type EnvironmentBaseResponse struct {
	// The ID the Environment is referenced as.
	Id string `json:"id"`

	// The Human-friendly name for the Environment.
	Name string `json:"name"`

	// The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentDefinitionRequest defines model for EnvironmentDefinitionRequest.
type EnvironmentDefinitionRequest struct {
	// Defines the existing Deployment the new Environment will be based on.
	FromDeployId string `json:"from_deploy_id"`

	// The ID the Environment is referenced as.
	Id string `json:"id"`

	// The Human-friendly name for the Environment.
	Name string `json:"name"`

	// The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// Environments are independent spaces where Applications can run. An Application is always deployed into an Environment.
type EnvironmentResponse struct {
	// The timestamp in UTC of when the Environment was created.
	CreatedAt string `json:"created_at"`

	// The user who created the Environment
	CreatedBy string `json:"created_by"`

	// Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	FromDeploy *DeploymentResponse `json:"from_deploy,omitempty"`

	// The ID the Environment is referenced as.
	Id string `json:"id"`

	// Deployments represent updates to the running state of an Environment.
	//
	// Deployments are made by applying _Deltas_ to a state defined by an existing Deployment. The Environment’s from_deploy property defines the Deployment. This Deployment is usually but not always in the current Environment. If the Deployment is from another Environment, the state of that Environment will be "cloned" into the current Environment with the option to apply a Delta.
	LastDeploy *DeploymentResponse `json:"last_deploy,omitempty"`

	// The Human-friendly name for the Environment.
	Name string `json:"name"`

	// The Environment Type. This is used for organizing and managing Environments.
	Type string `json:"type"`
}

// EnvironmentRuntimeInfo
type EnvironmentRuntimeInfoResponse struct {
	Error  *string `json:"error,omitempty"`
	Id     string  `json:"id"`
	Paused bool    `json:"paused"`
	Status *string `json:"status,omitempty"`
}

// Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeRequest struct {
	// A Human-readable description of the Environment Type
	Description *string `json:"description,omitempty"`

	// The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// Environment Types are a way of grouping and managing Environments. Every Environment has exactly 1 Environment Type.
//
// Environment Types can be used with External Resources to manage where resources such as databases are provisioned or even which cluster to deploy to.
type EnvironmentTypeResponse struct {
	// A Human-readable description of the Environment Type
	Description string `json:"description"`

	// The ID of the Environment Type. (Must be unique within an Organization.)
	Id string `json:"id"`
}

// ErrorInfo is returned by a handler in case of an error.
type ErrorInfoResponse struct {
	// An error details
	Error string `json:"error"`
}

// Properties which identify an event .
type EventBaseRequest struct {
	// Event scope
	Scope *string `json:"scope,omitempty"`

	// Event type
	Type *string `json:"type,omitempty"`
}

// Properties which identify an event .
type EventBaseResponse struct {
	// Event scope
	Scope string `json:"scope"`

	// Event type
	Type string `json:"type"`
}

// Events available for triggering automated jobs.
type EventResponse struct {
	// List of event properties which can be used as variables for this event
	Properties []string `json:"properties"`

	// Event scope
	Scope string `json:"scope"`

	// Event type
	Type string `json:"type"`
}

// HumanitecError represents a standard Humanitec Error
type HumanitecErrorResponse struct {
	// (Optional) Additional information is enclosed here.
	Details *HumanitecErrorResponse_Details `json:"details,omitempty"`

	// A short code to help with error identification.
	Error string `json:"error"`

	// A Human readable message about the error.
	Message string `json:"message"`
}

// (Optional) Additional information is enclosed here.
type HumanitecErrorResponse_Details struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildRequest struct {
	// The branch name of the branch the build was built on
	Branch *string `json:"branch,omitempty"`

	// The commit ID that this build was built from.
	Commit *string `json:"commit,omitempty"`

	// The fully qualified Image URL including registry, repository and tag.
	Image *string `json:"image,omitempty"`

	// The tag that the build was built from.
	Tags *[]string `json:"tags,omitempty"`
}

// DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Holds the metadata associated withe a Container Image Build
type ImageBuildResponse struct {
	// The time when the build was added to Humanitec.
	AddedAt *string `json:"added_at,omitempty"`

	// The branch name of the branch the build was built on
	Branch string `json:"branch"`

	// The commit ID that this build was built from.
	Commit string `json:"commit"`

	// The fully qualified Image URL including registry, repository and tag.
	Image string `json:"image"`

	// The tag that the build was built from.
	Tags []string `json:"tags"`
}

// DEPRECATED: This type exists for historical compatibility and should not be used. Please use the [Artefact API](https://api-docs.humanitec.com/#tag/Artefact) instead.
//
// Container Images (known simply as Images) can be registered with Humanitec. Continuous Integration (CI) pipelines can then notify Humanitec when a new build of a Container Image becomes available. Humanitec tracks the Image along with metadata about how it was built.
type ImageResponse struct {
	// The time the first build of this Image was added to the organization
	AddedAt string `json:"added_at"`

	// A list of Image Builds ordered by addition date.
	Builds []ImageBuildResponse `json:"builds"`

	// The ID used to group different builds of the same Image together.
	Id string `json:"id"`

	// The Image Source that this Image is added via
	Source string `json:"source"`
}

// JSONFieldRequest defines model for JSONFieldRequest.
type JSONFieldRequest struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// JSONFieldResponse defines model for JSONFieldResponse.
type JSONFieldResponse struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// JSONPatchResponse defines model for JSONPatchResponse.
type JSONPatchResponse struct {
	Op   string `json:"op"`
	Path string `json:"path"`

	// Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
	//
	// Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
	//
	// For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
	Value *ValueResponse `json:"value,omitempty"`
}

// JSONPatchesResponse defines model for JSONPatchesResponse.
type JSONPatchesResponse []JSONPatchResponse

// Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
//
// Matching criteria are made up in order of specificity with least specific first:
//
// - Environment Type (`env_type`)
//
// - Application (`app_id`)
//
// - Environment (`env_id`)
//
// - Resource (`res_id`)
//
// When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
//
// **NOTE:**
//
// Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
type MatchingCriteriaRequest struct {
	// (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// Matching Criteria ID
	Id *string `json:"id,omitempty"`

	// (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// Matching Criteria are a set of rules used to choose which Resource Definition to use to provision a particular Resource Type.
//
// Matching criteria are made up in order of specificity with least specific first:
//
// - Environment Type (`env_type`)
//
// - Application (`app_id`)
//
// - Environment (`env_id`)
//
// - Resource (`res_id`)
//
// When selecting matching criteria, the most specific one is selected. In general, this means of all the Matching Criteria fully matching the context, the Matching Criteria Rule with the most specific element filled is chosen. If there is a tie, the next most specific elements are compared and so on until one is chosen.
//
// **NOTE:**
//
// Humanitec will reject the registration of matching criteria rules that duplicate rules already present for a Resource Type.
type MatchingCriteriaResponse struct {
	// (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// Matching Criteria ID
	Id string `json:"id"`

	// (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// MatchingCriteriaRule describes Matching Criteria rules.
type MatchingCriteriaRuleRequest struct {
	// (Optional) The ID of the Application that the Resources should belong to.
	AppId *string `json:"app_id,omitempty"`

	// (Optional) The ID of the Environment that the Resources should belong to. If `env_type` is also set, it must match the Type of the Environment for the Criteria to match.
	EnvId *string `json:"env_id,omitempty"`

	// (Optional) The Type of the Environment that the Resources should belong to. If `env_id` is also set, it must have an Environment Type that matches this parameter for the Criteria to match.
	EnvType *string `json:"env_type,omitempty"`

	// (Optional) The ID of the Resource in the Deployment Set. The ID is normally a `.` separated path to the definition in the set, e.g. `modules.my-module.externals.my-database`.
	ResId *string `json:"res_id,omitempty"`
}

// ModuleDeltas groups the different operations together.
type ModuleDeltasRequest struct {
	Add    *ModuleDeltasRequest_Add    `json:"add,omitempty"`
	Remove *[]string                   `json:"remove,omitempty"`
	Update *ModuleDeltasRequest_Update `json:"update,omitempty"`
}

// ModuleDeltasRequest_Add defines model for ModuleDeltasRequest.Add.
type ModuleDeltasRequest_Add struct {
	AdditionalProperties map[string]struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"-"`
}

// ModuleDeltasRequest_Update defines model for ModuleDeltasRequest.Update.
type ModuleDeltasRequest_Update struct {
	AdditionalProperties map[string][]UpdateActionRequest `json:"-"`
}

// ModuleDeltas groups the different operations together.
type ModuleDeltasResponse struct {
	Add    ModuleDeltasResponse_Add    `json:"add"`
	Remove []string                    `json:"remove"`
	Update ModuleDeltasResponse_Update `json:"update"`
}

// ModuleDeltasResponse_Add defines model for ModuleDeltasResponse.Add.
type ModuleDeltasResponse_Add struct {
	AdditionalProperties map[string]struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"-"`
}

// ModuleDeltasResponse_Update defines model for ModuleDeltasResponse.Update.
type ModuleDeltasResponse_Update struct {
	AdditionalProperties map[string][]UpdateActionResponse `json:"-"`
}

// Module represents a collection of workload controllers (deployments/statefulsets/etc) for the module
type ModuleResponse struct {
	AdditionalProperties map[string]ControllerResponse `json:"-"`
}

// An Organization is the top level object in Humanitec. All other objects belong to an Organization.
type OrganizationResponse struct {
	// Timestamp when the Organization was created.
	CreatedAt *string `json:"created_at"`

	// User ID that created the Organization.
	CreatedBy string `json:"created_by"`

	// Unique ID for the Organization.
	Id string `json:"id"`

	// Human friendly name for the Organization.
	Name string `json:"name"`
}

// PodState represents single pod status
type PodStateResponse struct {
	ContainerStatuses []struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"containerStatuses"`
	Phase    string `json:"phase"`
	PodName  string `json:"podName"`
	Revision int    `json:"revision"`
	Status   string `json:"status"`
}

// RegistryCreds represents current registry credentials (either, username- or token-based).
type RegistryCredsResponse struct {
	// Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets ClusterSecretsMapResponse `json:"secrets"`
}

// Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryRequest struct {
	// AccountCreds represents an account credentials (either, username- or token-based).
	Creds *AccountCredsRequest `json:"creds,omitempty"`

	// Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi *bool `json:"enable_ci,omitempty"`

	// Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapRequest `json:"secrets,omitempty"`

	// Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// Humanitec can be used to manage registry credentials. The Registry object represents how to match credentials to a particular registry.
//
// Humanitec supports all Docker compatible registries as well as the custom authentication formats used by AWS Elastic Container Registry and Google Container Registry. It also supports the injection of a specific secret to be copied from an existing namespace in the cluster.
type RegistryResponse struct {
	// The timestamp of when this record was created.
	CreatedAt *string `json:"created_at"`

	// The user who created this record.
	CreatedBy *string `json:"created_by,omitempty"`

	// Indicates if registry secrets and credentials should be exposed to CI agents.
	EnableCi bool `json:"enable_ci"`

	// Registry ID, unique within the Organization.
	Id string `json:"id"`

	// Registry name, usually in a "{domain}" or "{domain}/{project}" format.
	Registry string `json:"registry"`

	// ClusterSecretsMap stores a list of Kuberenetes secret references for the target deployment clusters.
	Secrets *ClusterSecretsMapResponse `json:"secrets,omitempty"`

	// Registry type, describes the registry authentication method, and defines the schema for the credentials.
	//
	// Supported values:
	//
	// - `public`
	//
	// - `basic`
	//
	// - `google_gcr`
	//
	// - `amazon_ecr`
	//
	// - `secret_ref`
	Type string `json:"type"`
}

// ResourceAccount represents the account being used to access a resource.
//
// Resource Accounts hold credentials that are required to provision and manage resources.
type ResourceAccountResponse struct {
	// The timestamp of when the account was created.
	CreatedAt string `json:"created_at"`

	// The ID of the user who created the account.
	CreatedBy string `json:"created_by"`

	// Unique identifier for the account (in scope of the organization it belongs to).
	Id string `json:"id"`

	// Indicates if this account is being used (referenced) by any resource definition.
	IsUsed bool `json:"is_used"`

	// Display name.
	Name string `json:"name"`

	// The type of the account
	Type string `json:"type"`
}

// ResourceDefinitionChange describes the effects of a Resource Definition or Matching Criteria update/deletion.
type ResourceDefinitionChangeResponse struct {
	// The ID of the App the resource is associated with.
	AppId string `json:"app_id"`

	// The ID of the Environment the resource is associated with.
	EnvId string `json:"env_id"`

	// The Resource Definition that this resource was provisioned from.
	FromDef string `json:"from_def"`

	// The ID of the resource
	ResId string `json:"res_id"`

	// The Resource Definition that resource *will be* provisioned from if the change is applied.
	ToDef string `json:"to_def"`
}

// A Resource Definitions describes how and when a resource should be provisioned. It links a driver (the how) along with a Matching Criteria (the when) to a Resource Type. This allows Humanitec to invoke a particular driver for the required Resource Type in the context of a particular Application and Environment.
//
// The schema for the `driver_inputs` is defined by the `input_schema` property on the DriverDefinition identified by the `driver_type` property.
type ResourceDefinitionResponse struct {
	// The timestamp of when this record has been created.
	CreatedAt *string `json:"created_at,omitempty"`

	// The user who created this record.
	CreatedBy *string `json:"created_by,omitempty"`

	// (Optional) The criteria to use when looking for a Resource Definition during the deployment.
	Criteria *[]MatchingCriteriaResponse `json:"criteria,omitempty"`

	// (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account,omitempty"`

	// ValuesSecrets stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsResponse `json:"driver_inputs,omitempty"`

	// The driver to be used to create the resource.
	DriverType *string `json:"driver_type,omitempty"`

	// The Resource Definition ID.
	Id string `json:"id"`

	// Indicates this definition is a built-in one (provided by Humanitec).
	IsDefault *bool `json:"is_default,omitempty"`

	// Indicates if this record has been marked for deletion. The Resource Definition that has been marked for deletion cannot be used to provision new resources.
	IsDeleted *bool `json:"is_deleted,omitempty"`

	// The display name.
	Name string `json:"name"`

	// The Organization ID.
	OrgId string `json:"org_id"`

	// The Resource Type.
	Type string `json:"type"`
}

// Resources Types define the technology that Applications can have dependencies on.
//
// Each Resource Type also defines a set of input parameters (`inputs_schema`), and a set of output data (`outputs_schema`). When provisioning a resource, these are treated as inputs and outputs respectively.
type ResourceTypeResponse struct {
	// Category name (used to group similar resources on the UI).
	Category string `json:"category"`

	// DEPRECATED: A JSON Schema specifying the type-specific data passed to the deployment (output). Use 'outputs_schema' instead.
	DataSchema ResourceTypeResponse_DataSchema `json:"data_schema"`

	// A JSON Schema specifying the type-specific parameters for the driver (input).
	InputsSchema ResourceTypeResponse_InputsSchema `json:"inputs_schema"`

	// Display name.
	Name string `json:"name"`

	// A JSON Schema specifying the type-specific data passed to the deployment (output).
	OutputsSchema ResourceTypeResponse_OutputsSchema `json:"outputs_schema"`

	// DEPRECATED: A JSON Schema specifying the type-specific parameters for the driver (input). Use 'inputs_schema' instead.
	ParamSchema ResourceTypeResponse_ParamSchema `json:"param_schema"`

	// Unique resource type identifier (system-wide, across all organizations).
	Type string `json:"type"`
}

// DEPRECATED: A JSON Schema specifying the type-specific data passed to the deployment (output). Use 'outputs_schema' instead.
type ResourceTypeResponse_DataSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// A JSON Schema specifying the type-specific parameters for the driver (input).
type ResourceTypeResponse_InputsSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// A JSON Schema specifying the type-specific data passed to the deployment (output).
type ResourceTypeResponse_OutputsSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DEPRECATED: A JSON Schema specifying the type-specific parameters for the driver (input). Use 'inputs_schema' instead.
type ResourceTypeResponse_ParamSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RuntimeInfo object returned by the runtime endpoint. Represents a list post statuses grouped by modules and controllers (deployments and stateful sets).
type RuntimeInfoResponse struct {
	Modules   RuntimeInfoResponse_Modules `json:"modules"`
	Namespace string                      `json:"namespace"`
}

// RuntimeInfoResponse_Modules defines model for RuntimeInfoResponse.Modules.
type RuntimeInfoResponse_Modules struct {
	AdditionalProperties map[string]ModuleResponse `json:"-"`
}

// A Deployment Set (or just "Set") defines all of the non-Environment specific configuration for Modules and External Resources. Each of these Modules or External Resources has a unique name.
//
// Deployment Sets are immutable and their ID is a cryptographic hash of their content. This means that a Deployment Set can be globally identified based on its ID. It also means that referencing a Deployment Set by ID will always return the same Deployment Set.
//
// Deployment Sets cannot be created directly, instead they are created by applying a Deployment Delta to an existing Deployment Set.
//
// **Basic Structure**
//
// ```
//  {
//    "id": <ID of the Deployment Set>,
//    "modules" : {
//      <ID of Module> : {
//        "profile": <Defines how the optional "spec" property is interpreted>
//        "spec": {
//          <Properties that depend on the "profile" property.>
//        }
//        "externals": {
//          <External Resource Name> : {
//            "type": <Resource Type>,
//            "params": {
//              <Properties which parametrize the resource depending on the Resource Type.>
//            }
//          }
//        }
//      }
//    }
//  }
// ```
//
// For details about how the Humanitec provided profiles work, see (Deployment Set Profiles)[].
type SetResponse struct {
	// The ID which is a hash of the content of the Deployment Set.
	Id string `json:"id"`

	// The Modules that make up the Set
	Modules SetResponse_Modules `json:"modules"`

	// Resources that are shared across the set
	Shared SetResponse_Shared `json:"shared"`

	// The version of the Deployment Set Schema to use. (Currently, only 0 is supported, and if omitted, version 0 is assumed.)
	Version int `json:"version"`
}

// The Modules that make up the Set
type SetResponse_Modules struct {
	AdditionalProperties map[string]struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	} `json:"-"`
}

// Resources that are shared across the set
type SetResponse_Shared struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Static Resource Definitions provide a way of using External Resources that are not managed by Humanitec. (This is distinct from Dynamic Resource Definitions where the lifecycle is managed by Humanitec.) Resource Definitions are matched at deployment time based on Matching Criteria. If a Resource Definition is matched at deployment time, the data required for the application to access the resource is returned. (As this data is defined and does not change, it is known as "static".)
//
// A common use case is to provide a DNS name for the production environment. The appropriate DNS name is pointed to the cluster load balancer. A Static Resource definition is then created so that the deployment knows what DNS name to configure Ingress for and the TLS certificates to use to secure the requests.
type StaticDefinitionResponse struct {
	// The timestamp of when this Resource Definition was first created.
	CreatedAt *string `json:"created_at,omitempty"`

	// The user who created this Resource Definition
	CreatedBy *string `json:"created_by,omitempty"`

	// The criteria used for matching this StaticDefinition
	Criteria []MatchingCriteriaResponse `json:"criteria"`

	// ValuesSecrets stores data that should be passed around split by sensitivity.
	Data ValuesSecretsResponse `json:"data"`

	// ValuesSecrets stores data that should be passed around split by sensitivity.
	DriverData ValuesSecretsResponse `json:"driver_data"`

	// The Type of the driver. Can be `"empty"` to specify no driver needed.
	DriverType string `json:"driver_type"`

	// The ID for this Resource Definition
	Id string `json:"id"`

	// If true this resource is default (provided by Humanitec in demo purposes)
	IsDefault bool `json:"is_default"`

	// A Human-friendly name for the Resource Definition
	Name string `json:"name"`

	// If true, the definition is still being referenced by an Active Resource. Once there are no more references, the definition will be removed.
	PendingDeletion bool `json:"pending_deletion"`

	// The type of the resource for this Definition
	Type string `json:"type"`
}

// A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionRequest struct {
	From  *string      `json:"from,omitempty"`
	Op    *string      `json:"op,omitempty"`
	Path  *string      `json:"path,omitempty"`
	Value *interface{} `json:"value,omitempty"`
}

// A representation of the main object defined in JSON Patch specified in RFC 6902 from the IETF. The main differences are:
//
// * Only `add`, `remove` and `replace` are supported
//
// * `remove` can have have its scope of application applied in its `value`. e.g. `{"scope":"delta"}
type UpdateActionResponse struct {
	From  *string      `json:"from,omitempty"`
	Op    string       `json:"op"`
	Path  string       `json:"path"`
	Value *interface{} `json:"value,omitempty"`
}

// UpdateArtefactVersionPayload contains the `archived` field that should be set in the Artefact Version to update.
type UpdateArtefactVersionPayloadRequest struct {
	// The Value of the archived value.
	Archived *bool `json:"archived"`
}

// UpdateDriverRequest describes the update driver details request.
type UpdateDriverRequestRequest struct {
	// List of resources accounts types supported by the driver
	AccountTypes *[]string `json:"account_types,omitempty"`

	// A JSON Schema specifying the driver-specific input parameters.
	InputsSchema *UpdateDriverRequestRequest_InputsSchema `json:"inputs_schema,omitempty"`

	// Defines whether this driver is accessible to all Organizations.
	IsPublic *bool `json:"is_public,omitempty"`

	// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
	ParamSchema *UpdateDriverRequestRequest_ParamSchema `json:"param_schema,omitempty"`

	// The type of resource produced by this driver
	Type *string `json:"type,omitempty"`

	// The prefix where the driver resides. Only members of the organization the driver belongs to can see 'url_prefix'.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// A JSON Schema specifying the driver-specific input parameters.
type UpdateDriverRequestRequest_InputsSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DEPRECATED: A JSON Schema specifying the driver-specific input parameters. Use 'inputs_schema' instead.
type UpdateDriverRequestRequest_ParamSchema struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateResourceAccountRequest describes the request to update the security account details.
type UpdateResourceAccountRequestRequest struct {
	// Credentials associated with the account.
	Credentials *UpdateResourceAccountRequestRequest_Credentials `json:"credentials,omitempty"`

	// Display name.
	Name *string `json:"name,omitempty"`
}

// Credentials associated with the account.
type UpdateResourceAccountRequestRequest_Credentials struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateResourceDefinitionRequest describes a ResourceDefinition change request.
type UpdateResourceDefinitionRequestRequest struct {
	// (Optional) Security account required by the driver.
	DriverAccount *string `json:"driver_account"`

	// ValuesSecrets stores data that should be passed around split by sensitivity.
	DriverInputs *ValuesSecretsRequest `json:"driver_inputs,omitempty"`

	// (Optional) Resource display name
	Name *string `json:"name"`
}

// UserInviteRequest describes a new user invitation.
type UserInviteRequestRequest struct {
	// The email address of the user from the profile.
	Email string `json:"email"`

	// The role that this user would hold.
	Role string `json:"role"`
}

// UserInvite stores the invitation details.
type UserInviteResponse struct {
	// The timestamp this invitation was created.
	CreatedAt string `json:"created_at"`

	// The ID of the user who created this invitation.
	CreatedBy string `json:"created_by"`

	// The email address of the user from the profile.
	Email *string `json:"email,omitempty"`

	// The timestamp this invitation would expire.
	ExpiresAt string `json:"expires_at"`

	// The User ID for this user.
	UserId string `json:"user_id"`
}

// UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedRequest struct {
	// The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// The User ID for this user
	Id *string `json:"id,omitempty"`

	// The name the user goes by
	Name       *string                                `json:"name,omitempty"`
	Properties *UserProfileExtendedRequest_Properties `json:"properties,omitempty"`
	Roles      *UserProfileExtendedRequest_Roles      `json:"roles,omitempty"`
}

// UserProfileExtendedRequest_Properties defines model for UserProfileExtendedRequest.Properties.
type UserProfileExtendedRequest_Properties struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserProfileExtendedRequest_Roles defines model for UserProfileExtendedRequest.Roles.
type UserProfileExtendedRequest_Roles struct {
	AdditionalProperties map[string]string `json:"-"`
}

// UserProfileExtended holds the profile information of a user including properties only accessible to the user.
type UserProfileExtendedResponse struct {
	// The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// The User ID for this user
	Id string `json:"id"`

	// The name the user goes by
	Name       string                                 `json:"name"`
	Properties UserProfileExtendedResponse_Properties `json:"properties"`
	Roles      UserProfileExtendedResponse_Roles      `json:"roles"`
}

// UserProfileExtendedResponse_Properties defines model for UserProfileExtendedResponse.Properties.
type UserProfileExtendedResponse_Properties struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserProfileExtendedResponse_Roles defines model for UserProfileExtendedResponse.Roles.
type UserProfileExtendedResponse_Roles struct {
	AdditionalProperties map[string]string `json:"-"`
}

// UserRole holds the mapping of role to user for a particular object.
type UserRoleRequest struct {
	// The time the user was first registered with Humanitec
	CreatedAt *string `json:"created_at,omitempty"`

	// The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// The User ID for this user
	Id *string `json:"id,omitempty"`

	// The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// The name the user goes by
	Name *string `json:"name,omitempty"`

	// The role that this user holds
	Role *string `json:"role,omitempty"`

	// The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// UserRole holds the mapping of role to user for a particular object.
type UserRoleResponse struct {
	// The time the user was first registered with Humanitec
	CreatedAt string `json:"created_at"`

	// The email address of the user from the profile
	Email *string `json:"email,omitempty"`

	// The User ID for this user
	Id string `json:"id"`

	// The status of an invitation (If applicable)
	Invite *string `json:"invite,omitempty"`

	// The name the user goes by
	Name string `json:"name"`

	// The role that this user holds
	Role string `json:"role"`

	// The user ID that hold the role
	User *string `json:"user,omitempty"`
}

// Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
//
// Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
//
// For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
type ValueRequest struct {
	// A Human friendly description of what the Shared Value is.
	Description *string `json:"description,omitempty"`

	// Specified that the Shared Value contains a secret.
	IsSecret *bool `json:"is_secret,omitempty"`

	// The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.
	Key *string `json:"key,omitempty"`

	// The value that will be stored. (Will be always empty for secrets.)
	Value *string `json:"value,omitempty"`
}

// Shared Values can be used to manage variables and configuration that might vary between environments. They are also the way that secrets can be stored securely.
//
// Shared Values are by default shared across all environments in an application. However, they can be overridden on an Environment by Environment basis.
//
// For example: There might be 2 API keys that are used in an application. One development key used in the development and staging environments and another used for production. The development API key would be set at the Application level. The value would then be overridden at the Environment level for the production Environment.
type ValueResponse struct {
	CreatedAt string `json:"created_at"`

	// A Human friendly description of what the Shared Value is.
	Description string `json:"description"`

	// Specified that the Shared Value contains a secret.
	IsSecret bool `json:"is_secret"`

	// The unique key by which the Shared Value can be referenced. pattern: ^[a-zA-Z0-9._-]+$.
	Key       string `json:"key"`
	Source    string `json:"source"`
	UpdatedAt string `json:"updated_at"`

	// The value that will be stored. (Will be always empty for secrets.)
	Value string `json:"value"`
}

// ValueSetResponse defines model for ValueSetResponse.
type ValueSetResponse struct {
	AdditionalProperties map[string]ValueResponse `json:"-"`
}

// Value Set Version can be used as a track record of Shared Value changes, restore to a previous Shared Value or purge an accidentally added Shared Value.
type ValueSetVersionResponse struct {
	Change                  JSONPatchesResponse `json:"change"`
	Comment                 string              `json:"comment"`
	CreatedAt               string              `json:"created_at"`
	CreatedBy               string              `json:"created_by"`
	Id                      string              `json:"id"`
	ResultOf                *string             `json:"result_of"`
	SourceValueSetVersionId *string             `json:"source_value_set_version_id"`
	UpdatedAt               string              `json:"updated_at"`
	Values                  ValueSetResponse    `json:"values"`
}

// ValuesSecrets stores data that should be passed around split by sensitivity.
type ValuesSecretsRequest struct {
	// Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.
	Secrets *ValuesSecretsRequest_Secrets `json:"secrets,omitempty"`

	// Values section of the data set. Passed around as-is.
	Values *ValuesSecretsRequest_Values `json:"values,omitempty"`
}

// Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.
type ValuesSecretsRequest_Secrets struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Values section of the data set. Passed around as-is.
type ValuesSecretsRequest_Values struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ValuesSecrets stores data that should be passed around split by sensitivity.
type ValuesSecretsResponse struct {
	// Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.
	Secrets *ValuesSecretsResponse_Secrets `json:"secrets,omitempty"`

	// Values section of the data set. Passed around as-is.
	Values *ValuesSecretsResponse_Values `json:"values,omitempty"`
}

// Secrets section of the data set. Sensitive information is stored in the Vault and replaced with the Vault paths when sent outside.
type ValuesSecretsResponse_Secrets struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Values section of the data set. Passed around as-is.
type ValuesSecretsResponse_Values struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.
type WebhookRequest struct {
	// Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  *JSONFieldRequest `json:"headers,omitempty"`

	// Job ID, unique within the Organization
	Id      *string           `json:"id,omitempty"`
	Payload *JSONFieldRequest `json:"payload,omitempty"`

	// A list of Events by which the Job is triggered
	Triggers *[]EventBaseRequest `json:"triggers,omitempty"`

	// Thw webhook's URL (without protocol, only HTTPS is supported)
	Url *string `json:"url"`
}

// Webhook is a special type of a Job, it performs a HTTPS request to a specified URL with specified headers.
type WebhookResponse struct {
	// The timestamp of when this Job was created.
	CreatedAt *string `json:"created_at,omitempty"`

	// The user who created this Job
	CreatedBy *string `json:"created_by,omitempty"`

	// Defines whether this job is currently disabled.
	Disabled *bool             `json:"disabled"`
	Headers  JSONFieldResponse `json:"headers"`

	// Job ID, unique within the Organization
	Id      string            `json:"id"`
	Payload JSONFieldResponse `json:"payload"`

	// A list of Events by which the Job is triggered
	Triggers []EventBaseResponse `json:"triggers"`

	// Thw webhook's URL (without protocol, only HTTPS is supported)
	Url *string `json:"url"`
}

// Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileRequest struct {
	// Workload Profile ID
	Id string `json:"id"`
}

// Workload Profiles provide the baseline configuration for Workloads in Applications in Humanitec. Developers can configure various features of a workload profile to suit their needs. Examples of features might be `schedules` used in Kubernetes CronJobs or `ingress` which might be used to expose Pods controlled by a Kubernetes Deployment.
//
// Workloads in Humanitec are implemented as Helm Charts which must implement a specific schema.
type WorkloadProfileResponse struct {
	// Creation date
	CreatedAt string `json:"created_at"`

	// User created the profile
	CreatedBy string `json:"created_by"`

	// Workload Profile ID
	Id string `json:"id"`

	// The latest version of the profile
	Latest string `json:"latest"`

	// Organization ID
	OrgId string `json:"org_id"`
}

// Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.
type WorkloadProfileVersionRequest struct {
	// A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
	//
	// {
	//
	// }
	Features *WorkloadProfileVersionRequest_Features `json:"features,omitempty"`

	// Notes
	Notes *string `json:"notes,omitempty"`
}

// A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
//
// {
//
// }
type WorkloadProfileVersionRequest_Features struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Each Workload Profile has one or more Versions associated with it. In order to add a version, a Workload Profile must first be created.
type WorkloadProfileVersionResponse struct {
	// Creation date
	CreatedAt string `json:"created_at"`

	// User created the profile
	CreatedBy string `json:"created_by"`

	// A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
	//
	// {
	//
	// }
	Features WorkloadProfileVersionResponse_Features `json:"features"`

	// Notes
	Notes string `json:"notes"`

	// Organization ID
	OrgId string `json:"org_id"`

	// Workload Profile ID
	ProfileId string `json:"profile_id"`

	// Version
	Version string `json:"version"`
}

// A map of Features. If referencing built in Humanitec features, the fully qualified feature name must be used: e.g. `humanitec/annotations`.
//
// {
//
// }
type WorkloadProfileVersionResponse_Features struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PatchCurrentUserJSONBody defines parameters for PatchCurrentUser.
type PatchCurrentUserJSONBody UserProfileExtendedRequest

// PostOrgsOrgIdAppsJSONBody defines parameters for PostOrgsOrgIdApps.
type PostOrgsOrgIdAppsJSONBody ApplicationRequest

// GetOrgsOrgIdAppsAppIdDeltasParams defines parameters for GetOrgsOrgIdAppsAppIdDeltas.
type GetOrgsOrgIdAppsAppIdDeltasParams struct {
	// If true, return archived Deltas.
	//
	Archived *bool `json:"archived,omitempty"`

	// Only return Deltas associated with the specified Environment.
	//
	Env *string `json:"env,omitempty"`
}

// PostOrgsOrgIdAppsAppIdDeltasJSONBody defines parameters for PostOrgsOrgIdAppsAppIdDeltas.
type PostOrgsOrgIdAppsAppIdDeltasJSONBody DeltaRequest

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody defines parameters for PatchOrgsOrgIdAppsAppIdDeltasDeltaId.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody []DeltaRequest

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONBody bool

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONBody string

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONBody defines parameters for PutOrgsOrgIdAppsAppIdDeltasDeltaIdName.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONBody string

// PostOrgsOrgIdAppsAppIdEnvsJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvs.
type PostOrgsOrgIdAppsAppIdEnvsJSONBody EnvironmentDefinitionRequest

// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONBody DeploymentRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody string

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONBody AutomationRuleRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONBody AutomationRuleRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody bool

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody defines parameters for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody struct {
	AdditionalProperties map[string]int `json:"-"`
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams struct {
	// (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `json:"key_changed,omitempty"`
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody interface{}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONBody interface{}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody interface{}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONBody defines parameters for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONBody ValueRequest

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONBody defines parameters for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONBody ValueRequest

// GetOrgsOrgIdAppsAppIdRuntimeParams defines parameters for GetOrgsOrgIdAppsAppIdRuntime.
type GetOrgsOrgIdAppsAppIdRuntimeParams struct {
	// It is required and can be used multiple time (till a maximum of 5) and it filters the environments by ID.
	//
	Id *string `json:"id,omitempty"`
}

// PostOrgsOrgIdAppsAppIdSetsSetIdJSONBody defines parameters for PostOrgsOrgIdAppsAppIdSetsSetId.
type PostOrgsOrgIdAppsAppIdSetsSetIdJSONBody DeltaRequest

// PostOrgsOrgIdAppsAppIdUsersJSONBody defines parameters for PostOrgsOrgIdAppsAppIdUsers.
type PostOrgsOrgIdAppsAppIdUsersJSONBody UserRoleRequest

// GetOrgsOrgIdAppsAppIdValueSetVersionsParams defines parameters for GetOrgsOrgIdAppsAppIdValueSetVersions.
type GetOrgsOrgIdAppsAppIdValueSetVersionsParams struct {
	// (Optional) Return only value set version where the specified key changed
	//
	KeyChanged *string `json:"key_changed,omitempty"`
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody defines parameters for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody interface{}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONBody defines parameters for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONBody interface{}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody defines parameters for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody interface{}

// PostOrgsOrgIdAppsAppIdValuesJSONBody defines parameters for PostOrgsOrgIdAppsAppIdValues.
type PostOrgsOrgIdAppsAppIdValuesJSONBody ValueRequest

// PutOrgsOrgIdAppsAppIdValuesKeyJSONBody defines parameters for PutOrgsOrgIdAppsAppIdValuesKey.
type PutOrgsOrgIdAppsAppIdValuesKeyJSONBody ValueRequest

// PostOrgsOrgIdAppsAppIdWebhooksJSONBody defines parameters for PostOrgsOrgIdAppsAppIdWebhooks.
type PostOrgsOrgIdAppsAppIdWebhooksJSONBody WebhookRequest

// PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONBody defines parameters for PostOrgsOrgIdAppsAppIdWebhooksJobId.
type PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONBody WebhookRequest

// GetOrgsOrgIdArtefactVersionsParams defines parameters for GetOrgsOrgIdArtefactVersions.
type GetOrgsOrgIdArtefactVersionsParams struct {
	// (Optional) Filter Artefact Versions by name.
	//
	Name *string `json:"name,omitempty"`

	// (Optional) Filter Artefact Versions by the reference to a Version of the same Artefact. This cannot be used together with `name`.
	//
	Reference *string `json:"reference,omitempty"`

	// (Optional) Filter for non-archived Artefact Versions. If no filter is defined all Artefact Versions are returned.
	//
	Archived *string `json:"archived,omitempty"`
}

// PostOrgsOrgIdArtefactVersionsJSONBody defines parameters for PostOrgsOrgIdArtefactVersions.
type PostOrgsOrgIdArtefactVersionsJSONBody AddArtefactVersionPayloadRequest

// PostOrgsOrgIdArtefactVersionsParams defines parameters for PostOrgsOrgIdArtefactVersions.
type PostOrgsOrgIdArtefactVersionsParams struct {
	// (Optional) Which version control system the version comes from. Default value is "git". If this parameter is not supplied or its value is "git", the provided ref, if not empty, is checked to ensure that it has one prefix among "refs/heads/" or "refs/tags/".
	//
	Vcs *string `json:"vcs,omitempty"`
}

// GetOrgsOrgIdArtefactsParams defines parameters for GetOrgsOrgIdArtefacts.
type GetOrgsOrgIdArtefactsParams struct {
	// (Optional) Filter Artefacts by type.
	//
	Type *string `json:"type,omitempty"`

	// (Optional) Filter Artefacts by name.
	//
	Name *string `json:"name,omitempty"`
}

// GetOrgsOrgIdArtefactsArtefactIdVersionsParams defines parameters for GetOrgsOrgIdArtefactsArtefactIdVersions.
type GetOrgsOrgIdArtefactsArtefactIdVersionsParams struct {
	// (Optional) Filter for non-archived Artefact Versions. If no filter is defined all Artefact Versions are returned.
	//
	Archived *string `json:"archived,omitempty"`

	// (Optional) Filter Artefact Versions by by name including a version or digest.
	//
	Reference *string `json:"reference,omitempty"`

	// (Optional) Limit the number of versions returned by the endpoint.
	//
	Limit *string `json:"limit,omitempty"`
}

// PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONBody defines parameters for PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId.
type PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONBody UpdateArtefactVersionPayloadRequest

// PostOrgsOrgIdEnvTypesJSONBody defines parameters for PostOrgsOrgIdEnvTypes.
type PostOrgsOrgIdEnvTypesJSONBody EnvironmentTypeRequest

// PostOrgsOrgIdImagesImageIdBuildsJSONBody defines parameters for PostOrgsOrgIdImagesImageIdBuilds.
type PostOrgsOrgIdImagesImageIdBuildsJSONBody ImageBuildRequest

// PostOrgsOrgIdInvitationsJSONBody defines parameters for PostOrgsOrgIdInvitations.
type PostOrgsOrgIdInvitationsJSONBody UserInviteRequestRequest

// PostOrgsOrgIdRegistriesJSONBody defines parameters for PostOrgsOrgIdRegistries.
type PostOrgsOrgIdRegistriesJSONBody RegistryRequest

// PatchOrgsOrgIdRegistriesRegIdJSONBody defines parameters for PatchOrgsOrgIdRegistriesRegId.
type PatchOrgsOrgIdRegistriesRegIdJSONBody RegistryRequest

// PostOrgsOrgIdResourcesAccountsJSONBody defines parameters for PostOrgsOrgIdResourcesAccounts.
type PostOrgsOrgIdResourcesAccountsJSONBody CreateResourceAccountRequestRequest

// PatchOrgsOrgIdResourcesAccountsAccIdJSONBody defines parameters for PatchOrgsOrgIdResourcesAccountsAccId.
type PatchOrgsOrgIdResourcesAccountsAccIdJSONBody UpdateResourceAccountRequestRequest

// GetOrgsOrgIdResourcesDefsParams defines parameters for GetOrgsOrgIdResourcesDefs.
type GetOrgsOrgIdResourcesDefsParams struct {
	// (Optional) Filter Resource Definitions that may match a specific Application.
	//
	App *string `json:"app,omitempty"`

	// (Optional) Filter Resource Definitions that may match a specific Environment.
	//
	Env *string `json:"env,omitempty"`

	// (Optional) Filter Resource Definitions that may match a specific Environment Type.
	//
	EnvType *string `json:"env_type,omitempty"`

	// (Optional) Filter Resource Definitions that may match a specific Resource.
	//
	Res *string `json:"res,omitempty"`

	// (Optional) Filter Resource Definitions that may match a specific Resource Type.
	//
	ResType *string `json:"res_type,omitempty"`
}

// PostOrgsOrgIdResourcesDefsJSONBody defines parameters for PostOrgsOrgIdResourcesDefs.
type PostOrgsOrgIdResourcesDefsJSONBody CreateResourceDefinitionRequestRequest

// DeleteOrgsOrgIdResourcesDefsDefIdParams defines parameters for DeleteOrgsOrgIdResourcesDefsDefId.
type DeleteOrgsOrgIdResourcesDefsDefIdParams struct {
	// If set to `true`, will mark the Resource Definition for deletion, even if it affects existing Active Resources.
	//
	Force *bool `json:"force,omitempty"`
}

// PatchOrgsOrgIdResourcesDefsDefIdJSONBody defines parameters for PatchOrgsOrgIdResourcesDefsDefId.
type PatchOrgsOrgIdResourcesDefsDefIdJSONBody UpdateResourceDefinitionRequestRequest

// PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONBody defines parameters for PostOrgsOrgIdResourcesDefsDefIdCriteria.
type PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONBody MatchingCriteriaRuleRequest

// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams defines parameters for DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId.
type DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams struct {
	// If set to `true`, the Matching Criteria is deleted immediately, even if this action affects existing Active Resources.
	//
	Force *bool `json:"force,omitempty"`
}

// PostOrgsOrgIdResourcesDriversJSONBody defines parameters for PostOrgsOrgIdResourcesDrivers.
type PostOrgsOrgIdResourcesDriversJSONBody CreateDriverRequestRequest

// PutOrgsOrgIdResourcesDriversDriverIdJSONBody defines parameters for PutOrgsOrgIdResourcesDriversDriverId.
type PutOrgsOrgIdResourcesDriversDriverIdJSONBody UpdateDriverRequestRequest

// PatchOrgsOrgIdResourcesStaticDefIdJSONBody defines parameters for PatchOrgsOrgIdResourcesStaticDefId.
type PatchOrgsOrgIdResourcesStaticDefIdJSONBody struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostOrgsOrgIdUsersJSONBody defines parameters for PostOrgsOrgIdUsers.
type PostOrgsOrgIdUsersJSONBody UserProfileExtendedRequest

// PostOrgsOrgIdWorkloadProfilesJSONBody defines parameters for PostOrgsOrgIdWorkloadProfiles.
type PostOrgsOrgIdWorkloadProfilesJSONBody WorkloadProfileRequest

// PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONBody defines parameters for PostOrgsOrgIdWorkloadProfilesProfileIdVersions.
type PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONBody WorkloadProfileVersionRequest

// GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams defines parameters for GetOrgsOrgIdWorkloadProfilesProfileQidVersions.
type GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams struct {
	// Optional query parameter, defines version constraint pattern (https://github.com/Masterminds/semver#checking-version-constraints).
	//
	Version *string `json:"version,omitempty"`
}

// PatchCurrentUserJSONRequestBody defines body for PatchCurrentUser for application/json ContentType.
type PatchCurrentUserJSONRequestBody PatchCurrentUserJSONBody

// PostOrgsOrgIdAppsJSONRequestBody defines body for PostOrgsOrgIdApps for application/json ContentType.
type PostOrgsOrgIdAppsJSONRequestBody PostOrgsOrgIdAppsJSONBody

// PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdDeltas for application/json ContentType.
type PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody PostOrgsOrgIdAppsAppIdDeltasJSONBody

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdDeltasDeltaId for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONBody

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdDeltasDeltaIdName for application/json ContentType.
type PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONBody

// PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvs for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONBody

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONBody

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONBody

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONBody

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody defines body for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas for application/json ContentType.
type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONBody

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONBody

// PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdSetsSetId for application/json ContentType.
type PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody PostOrgsOrgIdAppsAppIdSetsSetIdJSONBody

// PostOrgsOrgIdAppsAppIdUsersJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdUsers for application/json ContentType.
type PostOrgsOrgIdAppsAppIdUsersJSONRequestBody PostOrgsOrgIdAppsAppIdUsersJSONBody

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONBody

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONBody

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONBody

// PostOrgsOrgIdAppsAppIdValuesJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdValues for application/json ContentType.
type PostOrgsOrgIdAppsAppIdValuesJSONRequestBody PostOrgsOrgIdAppsAppIdValuesJSONBody

// PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody defines body for PutOrgsOrgIdAppsAppIdValuesKey for application/json ContentType.
type PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody PutOrgsOrgIdAppsAppIdValuesKeyJSONBody

// PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdWebhooks for application/json ContentType.
type PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody PostOrgsOrgIdAppsAppIdWebhooksJSONBody

// PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody defines body for PostOrgsOrgIdAppsAppIdWebhooksJobId for application/json ContentType.
type PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONBody

// PostOrgsOrgIdArtefactVersionsJSONRequestBody defines body for PostOrgsOrgIdArtefactVersions for application/json ContentType.
type PostOrgsOrgIdArtefactVersionsJSONRequestBody PostOrgsOrgIdArtefactVersionsJSONBody

// PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody defines body for PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId for application/json ContentType.
type PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONBody

// PostOrgsOrgIdEnvTypesJSONRequestBody defines body for PostOrgsOrgIdEnvTypes for application/json ContentType.
type PostOrgsOrgIdEnvTypesJSONRequestBody PostOrgsOrgIdEnvTypesJSONBody

// PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody defines body for PostOrgsOrgIdImagesImageIdBuilds for application/json ContentType.
type PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody PostOrgsOrgIdImagesImageIdBuildsJSONBody

// PostOrgsOrgIdInvitationsJSONRequestBody defines body for PostOrgsOrgIdInvitations for application/json ContentType.
type PostOrgsOrgIdInvitationsJSONRequestBody PostOrgsOrgIdInvitationsJSONBody

// PostOrgsOrgIdRegistriesJSONRequestBody defines body for PostOrgsOrgIdRegistries for application/json ContentType.
type PostOrgsOrgIdRegistriesJSONRequestBody PostOrgsOrgIdRegistriesJSONBody

// PatchOrgsOrgIdRegistriesRegIdJSONRequestBody defines body for PatchOrgsOrgIdRegistriesRegId for application/json ContentType.
type PatchOrgsOrgIdRegistriesRegIdJSONRequestBody PatchOrgsOrgIdRegistriesRegIdJSONBody

// PostOrgsOrgIdResourcesAccountsJSONRequestBody defines body for PostOrgsOrgIdResourcesAccounts for application/json ContentType.
type PostOrgsOrgIdResourcesAccountsJSONRequestBody PostOrgsOrgIdResourcesAccountsJSONBody

// PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody defines body for PatchOrgsOrgIdResourcesAccountsAccId for application/json ContentType.
type PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody PatchOrgsOrgIdResourcesAccountsAccIdJSONBody

// PostOrgsOrgIdResourcesDefsJSONRequestBody defines body for PostOrgsOrgIdResourcesDefs for application/json ContentType.
type PostOrgsOrgIdResourcesDefsJSONRequestBody PostOrgsOrgIdResourcesDefsJSONBody

// PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody defines body for PatchOrgsOrgIdResourcesDefsDefId for application/json ContentType.
type PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody PatchOrgsOrgIdResourcesDefsDefIdJSONBody

// PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody defines body for PostOrgsOrgIdResourcesDefsDefIdCriteria for application/json ContentType.
type PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONBody

// PostOrgsOrgIdResourcesDriversJSONRequestBody defines body for PostOrgsOrgIdResourcesDrivers for application/json ContentType.
type PostOrgsOrgIdResourcesDriversJSONRequestBody PostOrgsOrgIdResourcesDriversJSONBody

// PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody defines body for PutOrgsOrgIdResourcesDriversDriverId for application/json ContentType.
type PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody PutOrgsOrgIdResourcesDriversDriverIdJSONBody

// PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody defines body for PatchOrgsOrgIdResourcesStaticDefId for application/json ContentType.
type PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody PatchOrgsOrgIdResourcesStaticDefIdJSONBody

// PostOrgsOrgIdUsersJSONRequestBody defines body for PostOrgsOrgIdUsers for application/json ContentType.
type PostOrgsOrgIdUsersJSONRequestBody PostOrgsOrgIdUsersJSONBody

// PostOrgsOrgIdWorkloadProfilesJSONRequestBody defines body for PostOrgsOrgIdWorkloadProfiles for application/json ContentType.
type PostOrgsOrgIdWorkloadProfilesJSONRequestBody PostOrgsOrgIdWorkloadProfilesJSONBody

// PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody defines body for PostOrgsOrgIdWorkloadProfilesProfileIdVersions for application/json ContentType.
type PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONBody

// Getter for additional properties for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody. Returns the specified
// element and whether it was found
func (a PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody
func (a *PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody to handle AdditionalProperties
func (a *PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody to handle AdditionalProperties
func (a PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchOrgsOrgIdResourcesStaticDefIdJSONBody. Returns the specified
// element and whether it was found
func (a PatchOrgsOrgIdResourcesStaticDefIdJSONBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchOrgsOrgIdResourcesStaticDefIdJSONBody
func (a *PatchOrgsOrgIdResourcesStaticDefIdJSONBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchOrgsOrgIdResourcesStaticDefIdJSONBody to handle AdditionalProperties
func (a *PatchOrgsOrgIdResourcesStaticDefIdJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchOrgsOrgIdResourcesStaticDefIdJSONBody to handle AdditionalProperties
func (a PatchOrgsOrgIdResourcesStaticDefIdJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActiveResourceResponse_Data. Returns the specified
// element and whether it was found
func (a ActiveResourceResponse_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActiveResourceResponse_Data
func (a *ActiveResourceResponse_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActiveResourceResponse_Data to handle AdditionalProperties
func (a *ActiveResourceResponse_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActiveResourceResponse_Data to handle AdditionalProperties
func (a ActiveResourceResponse_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActiveResourceResponse_Resource. Returns the specified
// element and whether it was found
func (a ActiveResourceResponse_Resource) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActiveResourceResponse_Resource
func (a *ActiveResourceResponse_Resource) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActiveResourceResponse_Resource to handle AdditionalProperties
func (a *ActiveResourceResponse_Resource) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActiveResourceResponse_Resource to handle AdditionalProperties
func (a ActiveResourceResponse_Resource) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusterSecretsMapRequest. Returns the specified
// element and whether it was found
func (a ClusterSecretsMapRequest) Get(fieldName string) (value ClusterSecretRequest, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterSecretsMapRequest
func (a *ClusterSecretsMapRequest) Set(fieldName string, value ClusterSecretRequest) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ClusterSecretRequest)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterSecretsMapRequest to handle AdditionalProperties
func (a *ClusterSecretsMapRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ClusterSecretRequest)
		for fieldName, fieldBuf := range object {
			var fieldVal ClusterSecretRequest
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterSecretsMapRequest to handle AdditionalProperties
func (a ClusterSecretsMapRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusterSecretsMapResponse. Returns the specified
// element and whether it was found
func (a ClusterSecretsMapResponse) Get(fieldName string) (value ClusterSecretResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterSecretsMapResponse
func (a *ClusterSecretsMapResponse) Set(fieldName string, value ClusterSecretResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ClusterSecretResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterSecretsMapResponse to handle AdditionalProperties
func (a *ClusterSecretsMapResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ClusterSecretResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ClusterSecretResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterSecretsMapResponse to handle AdditionalProperties
func (a ClusterSecretsMapResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateDriverRequestRequest_InputsSchema. Returns the specified
// element and whether it was found
func (a CreateDriverRequestRequest_InputsSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateDriverRequestRequest_InputsSchema
func (a *CreateDriverRequestRequest_InputsSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateDriverRequestRequest_InputsSchema to handle AdditionalProperties
func (a *CreateDriverRequestRequest_InputsSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateDriverRequestRequest_InputsSchema to handle AdditionalProperties
func (a CreateDriverRequestRequest_InputsSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateDriverRequestRequest_ParamSchema. Returns the specified
// element and whether it was found
func (a CreateDriverRequestRequest_ParamSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateDriverRequestRequest_ParamSchema
func (a *CreateDriverRequestRequest_ParamSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateDriverRequestRequest_ParamSchema to handle AdditionalProperties
func (a *CreateDriverRequestRequest_ParamSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateDriverRequestRequest_ParamSchema to handle AdditionalProperties
func (a CreateDriverRequestRequest_ParamSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateResourceAccountRequestRequest_Credentials. Returns the specified
// element and whether it was found
func (a CreateResourceAccountRequestRequest_Credentials) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateResourceAccountRequestRequest_Credentials
func (a *CreateResourceAccountRequestRequest_Credentials) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateResourceAccountRequestRequest_Credentials to handle AdditionalProperties
func (a *CreateResourceAccountRequestRequest_Credentials) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateResourceAccountRequestRequest_Credentials to handle AdditionalProperties
func (a CreateResourceAccountRequestRequest_Credentials) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DriverDefinitionResponse_InputsSchema. Returns the specified
// element and whether it was found
func (a DriverDefinitionResponse_InputsSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DriverDefinitionResponse_InputsSchema
func (a *DriverDefinitionResponse_InputsSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DriverDefinitionResponse_InputsSchema to handle AdditionalProperties
func (a *DriverDefinitionResponse_InputsSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DriverDefinitionResponse_InputsSchema to handle AdditionalProperties
func (a DriverDefinitionResponse_InputsSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DriverDefinitionResponse_ParamSchema. Returns the specified
// element and whether it was found
func (a DriverDefinitionResponse_ParamSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DriverDefinitionResponse_ParamSchema
func (a *DriverDefinitionResponse_ParamSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DriverDefinitionResponse_ParamSchema to handle AdditionalProperties
func (a *DriverDefinitionResponse_ParamSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DriverDefinitionResponse_ParamSchema to handle AdditionalProperties
func (a DriverDefinitionResponse_ParamSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HumanitecErrorResponse_Details. Returns the specified
// element and whether it was found
func (a HumanitecErrorResponse_Details) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HumanitecErrorResponse_Details
func (a *HumanitecErrorResponse_Details) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HumanitecErrorResponse_Details to handle AdditionalProperties
func (a *HumanitecErrorResponse_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HumanitecErrorResponse_Details to handle AdditionalProperties
func (a HumanitecErrorResponse_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JSONFieldRequest. Returns the specified
// element and whether it was found
func (a JSONFieldRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JSONFieldRequest
func (a *JSONFieldRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JSONFieldRequest to handle AdditionalProperties
func (a *JSONFieldRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JSONFieldRequest to handle AdditionalProperties
func (a JSONFieldRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JSONFieldResponse. Returns the specified
// element and whether it was found
func (a JSONFieldResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JSONFieldResponse
func (a *JSONFieldResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JSONFieldResponse to handle AdditionalProperties
func (a *JSONFieldResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JSONFieldResponse to handle AdditionalProperties
func (a JSONFieldResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleDeltasRequest_Add. Returns the specified
// element and whether it was found
func (a ModuleDeltasRequest_Add) Get(fieldName string) (value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleDeltasRequest_Add
func (a *ModuleDeltasRequest_Add) Set(fieldName string, value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleDeltasRequest_Add to handle AdditionalProperties
func (a *ModuleDeltasRequest_Add) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				AdditionalProperties map[string]interface{} `json:"-"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleDeltasRequest_Add to handle AdditionalProperties
func (a ModuleDeltasRequest_Add) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleDeltasRequest_Update. Returns the specified
// element and whether it was found
func (a ModuleDeltasRequest_Update) Get(fieldName string) (value []UpdateActionRequest, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleDeltasRequest_Update
func (a *ModuleDeltasRequest_Update) Set(fieldName string, value []UpdateActionRequest) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]UpdateActionRequest)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleDeltasRequest_Update to handle AdditionalProperties
func (a *ModuleDeltasRequest_Update) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]UpdateActionRequest)
		for fieldName, fieldBuf := range object {
			var fieldVal []UpdateActionRequest
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleDeltasRequest_Update to handle AdditionalProperties
func (a ModuleDeltasRequest_Update) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleDeltasResponse_Add. Returns the specified
// element and whether it was found
func (a ModuleDeltasResponse_Add) Get(fieldName string) (value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleDeltasResponse_Add
func (a *ModuleDeltasResponse_Add) Set(fieldName string, value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleDeltasResponse_Add to handle AdditionalProperties
func (a *ModuleDeltasResponse_Add) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				AdditionalProperties map[string]interface{} `json:"-"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleDeltasResponse_Add to handle AdditionalProperties
func (a ModuleDeltasResponse_Add) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleDeltasResponse_Update. Returns the specified
// element and whether it was found
func (a ModuleDeltasResponse_Update) Get(fieldName string) (value []UpdateActionResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleDeltasResponse_Update
func (a *ModuleDeltasResponse_Update) Set(fieldName string, value []UpdateActionResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]UpdateActionResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleDeltasResponse_Update to handle AdditionalProperties
func (a *ModuleDeltasResponse_Update) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]UpdateActionResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal []UpdateActionResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleDeltasResponse_Update to handle AdditionalProperties
func (a ModuleDeltasResponse_Update) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModuleResponse. Returns the specified
// element and whether it was found
func (a ModuleResponse) Get(fieldName string) (value ControllerResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModuleResponse
func (a *ModuleResponse) Set(fieldName string, value ControllerResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ControllerResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a *ModuleResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ControllerResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ControllerResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModuleResponse to handle AdditionalProperties
func (a ModuleResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceTypeResponse_DataSchema. Returns the specified
// element and whether it was found
func (a ResourceTypeResponse_DataSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceTypeResponse_DataSchema
func (a *ResourceTypeResponse_DataSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceTypeResponse_DataSchema to handle AdditionalProperties
func (a *ResourceTypeResponse_DataSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceTypeResponse_DataSchema to handle AdditionalProperties
func (a ResourceTypeResponse_DataSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceTypeResponse_InputsSchema. Returns the specified
// element and whether it was found
func (a ResourceTypeResponse_InputsSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceTypeResponse_InputsSchema
func (a *ResourceTypeResponse_InputsSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceTypeResponse_InputsSchema to handle AdditionalProperties
func (a *ResourceTypeResponse_InputsSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceTypeResponse_InputsSchema to handle AdditionalProperties
func (a ResourceTypeResponse_InputsSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceTypeResponse_OutputsSchema. Returns the specified
// element and whether it was found
func (a ResourceTypeResponse_OutputsSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceTypeResponse_OutputsSchema
func (a *ResourceTypeResponse_OutputsSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceTypeResponse_OutputsSchema to handle AdditionalProperties
func (a *ResourceTypeResponse_OutputsSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceTypeResponse_OutputsSchema to handle AdditionalProperties
func (a ResourceTypeResponse_OutputsSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceTypeResponse_ParamSchema. Returns the specified
// element and whether it was found
func (a ResourceTypeResponse_ParamSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceTypeResponse_ParamSchema
func (a *ResourceTypeResponse_ParamSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceTypeResponse_ParamSchema to handle AdditionalProperties
func (a *ResourceTypeResponse_ParamSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceTypeResponse_ParamSchema to handle AdditionalProperties
func (a ResourceTypeResponse_ParamSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RuntimeInfoResponse_Modules. Returns the specified
// element and whether it was found
func (a RuntimeInfoResponse_Modules) Get(fieldName string) (value ModuleResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RuntimeInfoResponse_Modules
func (a *RuntimeInfoResponse_Modules) Set(fieldName string, value ModuleResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ModuleResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RuntimeInfoResponse_Modules to handle AdditionalProperties
func (a *RuntimeInfoResponse_Modules) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ModuleResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ModuleResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RuntimeInfoResponse_Modules to handle AdditionalProperties
func (a RuntimeInfoResponse_Modules) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SetResponse_Modules. Returns the specified
// element and whether it was found
func (a SetResponse_Modules) Get(fieldName string) (value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SetResponse_Modules
func (a *SetResponse_Modules) Set(fieldName string, value struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SetResponse_Modules to handle AdditionalProperties
func (a *SetResponse_Modules) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				AdditionalProperties map[string]interface{} `json:"-"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SetResponse_Modules to handle AdditionalProperties
func (a SetResponse_Modules) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SetResponse_Shared. Returns the specified
// element and whether it was found
func (a SetResponse_Shared) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SetResponse_Shared
func (a *SetResponse_Shared) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SetResponse_Shared to handle AdditionalProperties
func (a *SetResponse_Shared) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SetResponse_Shared to handle AdditionalProperties
func (a SetResponse_Shared) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateDriverRequestRequest_InputsSchema. Returns the specified
// element and whether it was found
func (a UpdateDriverRequestRequest_InputsSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateDriverRequestRequest_InputsSchema
func (a *UpdateDriverRequestRequest_InputsSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateDriverRequestRequest_InputsSchema to handle AdditionalProperties
func (a *UpdateDriverRequestRequest_InputsSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateDriverRequestRequest_InputsSchema to handle AdditionalProperties
func (a UpdateDriverRequestRequest_InputsSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateDriverRequestRequest_ParamSchema. Returns the specified
// element and whether it was found
func (a UpdateDriverRequestRequest_ParamSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateDriverRequestRequest_ParamSchema
func (a *UpdateDriverRequestRequest_ParamSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateDriverRequestRequest_ParamSchema to handle AdditionalProperties
func (a *UpdateDriverRequestRequest_ParamSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateDriverRequestRequest_ParamSchema to handle AdditionalProperties
func (a UpdateDriverRequestRequest_ParamSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateResourceAccountRequestRequest_Credentials. Returns the specified
// element and whether it was found
func (a UpdateResourceAccountRequestRequest_Credentials) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateResourceAccountRequestRequest_Credentials
func (a *UpdateResourceAccountRequestRequest_Credentials) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateResourceAccountRequestRequest_Credentials to handle AdditionalProperties
func (a *UpdateResourceAccountRequestRequest_Credentials) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateResourceAccountRequestRequest_Credentials to handle AdditionalProperties
func (a UpdateResourceAccountRequestRequest_Credentials) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserProfileExtendedRequest_Properties. Returns the specified
// element and whether it was found
func (a UserProfileExtendedRequest_Properties) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserProfileExtendedRequest_Properties
func (a *UserProfileExtendedRequest_Properties) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserProfileExtendedRequest_Properties to handle AdditionalProperties
func (a *UserProfileExtendedRequest_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserProfileExtendedRequest_Properties to handle AdditionalProperties
func (a UserProfileExtendedRequest_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserProfileExtendedRequest_Roles. Returns the specified
// element and whether it was found
func (a UserProfileExtendedRequest_Roles) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserProfileExtendedRequest_Roles
func (a *UserProfileExtendedRequest_Roles) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserProfileExtendedRequest_Roles to handle AdditionalProperties
func (a *UserProfileExtendedRequest_Roles) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserProfileExtendedRequest_Roles to handle AdditionalProperties
func (a UserProfileExtendedRequest_Roles) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserProfileExtendedResponse_Properties. Returns the specified
// element and whether it was found
func (a UserProfileExtendedResponse_Properties) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserProfileExtendedResponse_Properties
func (a *UserProfileExtendedResponse_Properties) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserProfileExtendedResponse_Properties to handle AdditionalProperties
func (a *UserProfileExtendedResponse_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserProfileExtendedResponse_Properties to handle AdditionalProperties
func (a UserProfileExtendedResponse_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserProfileExtendedResponse_Roles. Returns the specified
// element and whether it was found
func (a UserProfileExtendedResponse_Roles) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserProfileExtendedResponse_Roles
func (a *UserProfileExtendedResponse_Roles) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserProfileExtendedResponse_Roles to handle AdditionalProperties
func (a *UserProfileExtendedResponse_Roles) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserProfileExtendedResponse_Roles to handle AdditionalProperties
func (a UserProfileExtendedResponse_Roles) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValueSetResponse. Returns the specified
// element and whether it was found
func (a ValueSetResponse) Get(fieldName string) (value ValueResponse, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValueSetResponse
func (a *ValueSetResponse) Set(fieldName string, value ValueResponse) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ValueResponse)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValueSetResponse to handle AdditionalProperties
func (a *ValueSetResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ValueResponse)
		for fieldName, fieldBuf := range object {
			var fieldVal ValueResponse
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValueSetResponse to handle AdditionalProperties
func (a ValueSetResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValuesSecretsRequest_Secrets. Returns the specified
// element and whether it was found
func (a ValuesSecretsRequest_Secrets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValuesSecretsRequest_Secrets
func (a *ValuesSecretsRequest_Secrets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValuesSecretsRequest_Secrets to handle AdditionalProperties
func (a *ValuesSecretsRequest_Secrets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValuesSecretsRequest_Secrets to handle AdditionalProperties
func (a ValuesSecretsRequest_Secrets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValuesSecretsRequest_Values. Returns the specified
// element and whether it was found
func (a ValuesSecretsRequest_Values) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValuesSecretsRequest_Values
func (a *ValuesSecretsRequest_Values) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValuesSecretsRequest_Values to handle AdditionalProperties
func (a *ValuesSecretsRequest_Values) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValuesSecretsRequest_Values to handle AdditionalProperties
func (a ValuesSecretsRequest_Values) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValuesSecretsResponse_Secrets. Returns the specified
// element and whether it was found
func (a ValuesSecretsResponse_Secrets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValuesSecretsResponse_Secrets
func (a *ValuesSecretsResponse_Secrets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValuesSecretsResponse_Secrets to handle AdditionalProperties
func (a *ValuesSecretsResponse_Secrets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValuesSecretsResponse_Secrets to handle AdditionalProperties
func (a ValuesSecretsResponse_Secrets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValuesSecretsResponse_Values. Returns the specified
// element and whether it was found
func (a ValuesSecretsResponse_Values) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValuesSecretsResponse_Values
func (a *ValuesSecretsResponse_Values) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValuesSecretsResponse_Values to handle AdditionalProperties
func (a *ValuesSecretsResponse_Values) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValuesSecretsResponse_Values to handle AdditionalProperties
func (a ValuesSecretsResponse_Values) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WorkloadProfileVersionRequest_Features. Returns the specified
// element and whether it was found
func (a WorkloadProfileVersionRequest_Features) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WorkloadProfileVersionRequest_Features
func (a *WorkloadProfileVersionRequest_Features) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WorkloadProfileVersionRequest_Features to handle AdditionalProperties
func (a *WorkloadProfileVersionRequest_Features) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WorkloadProfileVersionRequest_Features to handle AdditionalProperties
func (a WorkloadProfileVersionRequest_Features) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WorkloadProfileVersionResponse_Features. Returns the specified
// element and whether it was found
func (a WorkloadProfileVersionResponse_Features) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WorkloadProfileVersionResponse_Features
func (a *WorkloadProfileVersionResponse_Features) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WorkloadProfileVersionResponse_Features to handle AdditionalProperties
func (a *WorkloadProfileVersionResponse_Features) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WorkloadProfileVersionResponse_Features to handle AdditionalProperties
func (a WorkloadProfileVersionResponse_Features) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCurrentUser request with any body
	PatchCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCurrentUser(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgs request
	GetOrgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgId request
	GetOrgsOrgId(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdApps request
	GetOrgsOrgIdApps(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdApps request with any body
	PostOrgsOrgIdAppsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdApps(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppId request
	DeleteOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppId request
	GetOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdDeltas request
	GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdDeltas request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaId request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdName request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdName(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvs request
	GetOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvs request with any body
	PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvId request
	GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdResources request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRules request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRules request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValues request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdJobs request
	DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdRuntime request
	GetOrgsOrgIdAppsAppIdRuntime(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetId request
	GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdSetsSetId request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdUsers request
	GetOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdUsers request with any body
	PostOrgsOrgIdAppsAppIdUsersWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdUsersUserId request
	GetOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValues request
	DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdValues request
	GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdValues request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdAppsAppIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooks request
	GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdWebhooks request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobId request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobId request
	GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdAppsAppIdWebhooksJobId request with any body
	PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdArtefactVersions request
	GetOrgsOrgIdArtefactVersions(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdArtefactVersions request with any body
	PostOrgsOrgIdArtefactVersionsWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdArtefactVersions(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, body PostOrgsOrgIdArtefactVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdArtefacts request
	GetOrgsOrgIdArtefacts(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdArtefactsArtefactId request
	DeleteOrgsOrgIdArtefactsArtefactId(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdArtefactsArtefactIdVersions request
	GetOrgsOrgIdArtefactsArtefactIdVersions(ctx context.Context, orgId string, artefactId string, params *GetOrgsOrgIdArtefactsArtefactIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId request with any body
	PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId(ctx context.Context, orgId string, artefactId string, versionId string, body PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypeEnvTypeUsersUserId request
	GetOrgsOrgIdEnvTypeEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypes request
	GetOrgsOrgIdEnvTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdEnvTypes request with any body
	PostOrgsOrgIdEnvTypesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdEnvTypes(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeId request
	DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEnvTypesEnvTypeId request
	GetOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdEvents request
	GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdImages request
	GetOrgsOrgIdImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdImagesImageId request
	GetOrgsOrgIdImagesImageId(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdImagesImageIdBuilds request
	GetOrgsOrgIdImagesImageIdBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdImagesImageIdBuilds request with any body
	PostOrgsOrgIdImagesImageIdBuildsWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdImagesImageIdBuilds(ctx context.Context, orgId string, imageId string, body PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdInvitations request
	GetOrgsOrgIdInvitations(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdInvitations request with any body
	PostOrgsOrgIdInvitationsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdInvitations(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdRegistries request with any body
	PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdRegistriesRegId request
	DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegId request
	GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdRegistriesRegId request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdRegistriesRegIdCreds request
	GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccountTypes request
	GetOrgsOrgIdResourcesAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccounts request
	GetOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesAccounts request with any body
	PostOrgsOrgIdResourcesAccountsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesAccountsAccId request
	GetOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdResourcesAccountsAccId request with any body
	PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefs request
	GetOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDefs request with any body
	PostOrgsOrgIdResourcesDefsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDefsDefId request
	DeleteOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefsDefId request
	GetOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdResourcesDefsDefId request with any body
	PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDefsDefIdCriteria request with any body
	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId request
	DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDefsDefIdResources request
	GetOrgsOrgIdResourcesDefsDefIdResources(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDrivers request
	GetOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdResourcesDrivers request with any body
	PostOrgsOrgIdResourcesDriversWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdResourcesDriversDriverId request
	DeleteOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesDriversDriverId request
	GetOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrgsOrgIdResourcesDriversDriverId request with any body
	PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrgsOrgIdResourcesStaticDefId request with any body
	PatchOrgsOrgIdResourcesStaticDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrgsOrgIdResourcesStaticDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdResourcesTypes request
	GetOrgsOrgIdResourcesTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdUsers request
	GetOrgsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdUsers request with any body
	PostOrgsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdUsers(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdWorkloadProfiles request
	GetOrgsOrgIdWorkloadProfiles(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdWorkloadProfiles request with any body
	PostOrgsOrgIdWorkloadProfilesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdWorkloadProfiles(ctx context.Context, orgId string, body PostOrgsOrgIdWorkloadProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdWorkloadProfilesProfileId request
	DeleteOrgsOrgIdWorkloadProfilesProfileId(ctx context.Context, orgId string, profileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrgsOrgIdWorkloadProfilesProfileIdVersions request with any body
	PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBody(ctx context.Context, orgId string, profileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrgsOrgIdWorkloadProfilesProfileIdVersions(ctx context.Context, orgId string, profileId string, body PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion request
	DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion(ctx context.Context, orgId string, profileId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdWorkloadProfilesProfileQid request
	GetOrgsOrgIdWorkloadProfilesProfileQid(ctx context.Context, orgId string, profileQid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrgsOrgIdWorkloadProfilesProfileQidVersions request
	GetOrgsOrgIdWorkloadProfilesProfileQidVersions(ctx context.Context, orgId string, profileQid string, params *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokens request
	GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTokensTokenId request
	DeleteTokensTokenId(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrentUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCurrentUser(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCurrentUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgId(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdApps(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdApps(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppId(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdDeltas(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdDeltasRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBody(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequestWithBody(c.Server, orgId, appId, deltaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdDeltasDeltaIdName(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequest(c.Server, orgId, appId, deltaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvs(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsRequest(c.Server, orgId, appId, envId, deployId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest(c.Server, orgId, appId, envId, pType, resId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(c.Server, orgId, appId, envId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(c.Server, orgId, appId, envId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(c.Server, orgId, appId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, envId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, envId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, envId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, envId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(c.Server, orgId, appId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(c.Server, orgId, appId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(c.Server, orgId, appId, envId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(c.Server, orgId, appId, envId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdJobs(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdJobsRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdRuntime(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdRuntimeRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(c.Server, orgId, appId, setId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdSetsSetId(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(c.Server, orgId, appId, setId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(c.Server, orgId, appId, setId, sourceSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdUsersRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdUsersWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdUsers(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdUsersRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdUsersUserId(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest(c.Server, orgId, appId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersions(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(c.Server, orgId, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx context.Context, orgId string, appId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(c.Server, orgId, appId, valueSetVersionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(c.Server, orgId, appId, valueSetVersionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx context.Context, orgId string, appId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(c.Server, orgId, appId, valueSetVersionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(c.Server, orgId, appId, valueSetVersionId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(c.Server, orgId, appId, valueSetVersionId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValuesWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdValues(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdValuesRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(c.Server, orgId, appId, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdAppsAppIdValuesKey(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(c.Server, orgId, appId, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(c.Server, orgId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooks(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksRequest(c.Server, orgId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(c.Server, orgId, appId, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdAppsAppIdWebhooksJobId(ctx context.Context, orgId string, appId string, jobId string, body PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequest(c.Server, orgId, appId, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdArtefactVersions(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdArtefactVersionsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdArtefactVersionsWithBody(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdArtefactVersionsRequestWithBody(c.Server, orgId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdArtefactVersions(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, body PostOrgsOrgIdArtefactVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdArtefactVersionsRequest(c.Server, orgId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdArtefacts(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdArtefactsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdArtefactsArtefactId(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdArtefactsArtefactIdRequest(c.Server, orgId, artefactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdArtefactsArtefactIdVersions(ctx context.Context, orgId string, artefactId string, params *GetOrgsOrgIdArtefactsArtefactIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdArtefactsArtefactIdVersionsRequest(c.Server, orgId, artefactId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBody(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequestWithBody(c.Server, orgId, artefactId, versionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId(ctx context.Context, orgId string, artefactId string, versionId string, body PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequest(c.Server, orgId, artefactId, versionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypeEnvTypeUsersUserId(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdRequest(c.Server, orgId, envType, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdEnvTypes(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdEnvTypesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEnvTypesEnvTypeId(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdEvents(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdEventsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdImages(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdImagesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdImagesImageId(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdImagesImageIdRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdImagesImageIdBuilds(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdImagesImageIdBuildsRequest(c.Server, orgId, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdImagesImageIdBuildsWithBody(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdImagesImageIdBuildsRequestWithBody(c.Server, orgId, imageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdImagesImageIdBuilds(ctx context.Context, orgId string, imageId string, body PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdImagesImageIdBuildsRequest(c.Server, orgId, imageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdInvitations(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdInvitationsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdInvitationsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdInvitationsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdInvitations(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdInvitationsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistries(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdRegistries(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdRegistriesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegIdWithBody(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(c.Server, orgId, regId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdRegistriesRegId(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdRegistriesRegIdRequest(c.Server, orgId, regId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdRegistriesRegIdCreds(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdRegistriesRegIdCredsRequest(c.Server, orgId, regId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccountTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountsRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesAccountsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesAccountsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesAccounts(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesAccountsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesAccountsAccIdRequest(c.Server, orgId, accId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(c.Server, orgId, accId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesAccountsAccId(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesAccountsAccIdRequest(c.Server, orgId, accId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefs(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesDefsDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesDefsDefIdRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest(c.Server, orgId, defId, criteriaId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDefsDefIdResources(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest(c.Server, orgId, defId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDriversRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDriversWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDriversRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdResourcesDrivers(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdResourcesDriversRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(c.Server, orgId, driverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrgsOrgIdResourcesDriversDriverId(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrgsOrgIdResourcesDriversDriverIdRequest(c.Server, orgId, driverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesStaticDefIdWithBody(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesStaticDefIdRequestWithBody(c.Server, orgId, defId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrgsOrgIdResourcesStaticDefId(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrgsOrgIdResourcesStaticDefIdRequest(c.Server, orgId, defId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdResourcesTypes(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdResourcesTypesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdUsers(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdUsersRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdUsersWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdUsersRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdUsers(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdUsersRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdWorkloadProfiles(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdWorkloadProfilesRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdWorkloadProfilesWithBody(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdWorkloadProfilesRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdWorkloadProfiles(ctx context.Context, orgId string, body PostOrgsOrgIdWorkloadProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdWorkloadProfilesRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdWorkloadProfilesProfileId(ctx context.Context, orgId string, profileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdWorkloadProfilesProfileIdRequest(c.Server, orgId, profileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBody(ctx context.Context, orgId string, profileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequestWithBody(c.Server, orgId, profileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrgsOrgIdWorkloadProfilesProfileIdVersions(ctx context.Context, orgId string, profileId string, body PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequest(c.Server, orgId, profileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion(ctx context.Context, orgId string, profileId string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionRequest(c.Server, orgId, profileId, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdWorkloadProfilesProfileQid(ctx context.Context, orgId string, profileQid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdWorkloadProfilesProfileQidRequest(c.Server, orgId, profileQid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrgsOrgIdWorkloadProfilesProfileQidVersions(ctx context.Context, orgId string, profileQid string, params *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrgsOrgIdWorkloadProfilesProfileQidVersionsRequest(c.Server, orgId, profileQid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTokensTokenId(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTokensTokenIdRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCurrentUserRequest calls the generic PatchCurrentUser builder with application/json body
func NewPatchCurrentUserRequest(server string, body PatchCurrentUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCurrentUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchCurrentUserRequestWithBody generates requests for PatchCurrentUser with any type of body
func NewPatchCurrentUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsRequest generates requests for GetOrgs
func NewGetOrgsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRequest generates requests for GetOrgsOrgId
func NewGetOrgsOrgIdRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsRequest generates requests for GetOrgsOrgIdApps
func NewGetOrgsOrgIdAppsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsRequest calls the generic PostOrgsOrgIdApps builder with application/json body
func NewPostOrgsOrgIdAppsRequest(server string, orgId string, body PostOrgsOrgIdAppsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsRequestWithBody generates requests for PostOrgsOrgIdApps with any type of body
func NewPostOrgsOrgIdAppsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdRequest generates requests for DeleteOrgsOrgIdAppsAppId
func NewDeleteOrgsOrgIdAppsAppIdRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdRequest generates requests for GetOrgsOrgIdAppsAppId
func NewGetOrgsOrgIdAppsAppIdRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdDeltasRequest generates requests for GetOrgsOrgIdAppsAppIdDeltas
func NewGetOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Env != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequest calls the generic PostOrgsOrgIdAppsAppIdDeltas builder with application/json body
func NewPostOrgsOrgIdAppsAppIdDeltasRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdDeltas with any type of body
func NewPostOrgsOrgIdAppsAppIdDeltasRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest calls the generic PatchOrgsOrgIdAppsAppIdDeltasDeltaId builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequest(server string, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdDeltasDeltaId with any type of body
func NewPatchOrgsOrgIdAppsAppIdDeltasDeltaIdRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/env_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequest calls the generic PutOrgsOrgIdAppsAppIdDeltasDeltaIdName builder with application/json body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequest(server string, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequestWithBody(server, orgId, appId, deltaId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdDeltasDeltaIdName with any type of body
func NewPutOrgsOrgIdAppsAppIdDeltasDeltaIdNameRequestWithBody(server string, orgId string, appId string, deltaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deltaId", runtime.ParamLocationPath, deltaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/deltas/%s/name", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvs
func NewGetOrgsOrgIdAppsAppIdEnvsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsRequest calls the generic PostOrgsOrgIdAppsAppIdEnvs builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvs with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsRequest(server string, orgId string, appId string, envId string, deployId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/deploys/%s/errors", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequest(server string, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/from_deploy_id", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdResources
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdRequest(server string, orgId string, appId string, envId string, pType string, resId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resId", runtime.ParamLocationPath, resId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/resources/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRules
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdRules builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdRules with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdRulesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequest(server string, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server, orgId, appId, envId, ruleId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdRequestWithBody(server string, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/rules/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequest(server string, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/paused", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest calls the generic PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas builder with application/json body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequest(server string, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody generates requests for PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas with any type of body
func NewPatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/runtime/replicas", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsRequest(server string, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.KeyChanged != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, envId string, valueSetVersionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, envId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, envId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, envId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdEnvsEnvIdValues
func NewGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdEnvsEnvIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequest(server string, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server, orgId, appId, envId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdEnvsEnvIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdEnvsEnvIdValuesRequestWithBody(server string, orgId string, appId string, envId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequest(server string, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server, orgId, appId, envId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyRequestWithBody(server string, orgId string, appId string, envId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/envs/%s/values/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdJobsRequest generates requests for DeleteOrgsOrgIdAppsAppIdJobs
func NewDeleteOrgsOrgIdAppsAppIdJobsRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/jobs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdRuntimeRequest generates requests for GetOrgsOrgIdAppsAppIdRuntime
func NewGetOrgsOrgIdAppsAppIdRuntimeRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/runtime", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId string, appId string, setId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest calls the generic PostOrgsOrgIdAppsAppIdSetsSetId builder with application/json body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequest(server string, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server, orgId, appId, setId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdSetsSetId with any type of body
func NewPostOrgsOrgIdAppsAppIdSetsSetIdRequestWithBody(server string, orgId string, appId string, setId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest generates requests for GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId
func NewGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdRequest(server string, orgId string, appId string, setId string, sourceSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "setId", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sourceSetId", runtime.ParamLocationPath, sourceSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/sets/%s/diff/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdUsersRequest generates requests for GetOrgsOrgIdAppsAppIdUsers
func NewGetOrgsOrgIdAppsAppIdUsersRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdUsersRequest calls the generic PostOrgsOrgIdAppsAppIdUsers builder with application/json body
func NewPostOrgsOrgIdAppsAppIdUsersRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdUsers with any type of body
func NewPostOrgsOrgIdAppsAppIdUsersRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest generates requests for GetOrgsOrgIdAppsAppIdUsersUserId
func NewGetOrgsOrgIdAppsAppIdUsersUserIdRequest(server string, orgId string, appId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersions
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsRequest(server string, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.KeyChanged != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_changed", runtime.ParamLocationQuery, *params.KeyChanged); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest generates requests for GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId
func NewGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRequest(server string, orgId string, appId string, valueSetVersionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequest(server string, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/purge/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequest(server string, orgId string, appId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server, orgId, appId, valueSetVersionId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreRequestWithBody(server string, orgId string, appId string, valueSetVersionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest calls the generic PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequest(server string, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server, orgId, appId, valueSetVersionId, key, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey with any type of body
func NewPostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyRequestWithBody(server string, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "valueSetVersionId", runtime.ParamLocationPath, valueSetVersionId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/value-set-versions/%s/restore/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesRequest generates requests for DeleteOrgsOrgIdAppsAppIdValues
func NewDeleteOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdValuesRequest generates requests for GetOrgsOrgIdAppsAppIdValues
func NewGetOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdValuesRequest calls the generic PostOrgsOrgIdAppsAppIdValues builder with application/json body
func NewPostOrgsOrgIdAppsAppIdValuesRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdValues with any type of body
func NewPostOrgsOrgIdAppsAppIdValuesRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest generates requests for DeleteOrgsOrgIdAppsAppIdValuesKey
func NewDeleteOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequest calls the generic PutOrgsOrgIdAppsAppIdValuesKey builder with application/json body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequest(server string, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server, orgId, appId, key, "application/json", bodyReader)
}

// NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody generates requests for PutOrgsOrgIdAppsAppIdValuesKey with any type of body
func NewPutOrgsOrgIdAppsAppIdValuesKeyRequestWithBody(server string, orgId string, appId string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/values/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooks
func NewGetOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequest calls the generic PostOrgsOrgIdAppsAppIdWebhooks builder with application/json body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequest(server string, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server, orgId, appId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdWebhooks with any type of body
func NewPostOrgsOrgIdAppsAppIdWebhooksRequestWithBody(server string, orgId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for DeleteOrgsOrgIdAppsAppIdWebhooksJobId
func NewDeleteOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest generates requests for GetOrgsOrgIdAppsAppIdWebhooksJobId
func NewGetOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequest calls the generic PostOrgsOrgIdAppsAppIdWebhooksJobId builder with application/json body
func NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequest(server string, orgId string, appId string, jobId string, body PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server, orgId, appId, jobId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody generates requests for PostOrgsOrgIdAppsAppIdWebhooksJobId with any type of body
func NewPostOrgsOrgIdAppsAppIdWebhooksJobIdRequestWithBody(server string, orgId string, appId string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/apps/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdArtefactVersionsRequest generates requests for GetOrgsOrgIdArtefactVersions
func NewGetOrgsOrgIdArtefactVersionsRequest(server string, orgId string, params *GetOrgsOrgIdArtefactVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reference != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdArtefactVersionsRequest calls the generic PostOrgsOrgIdArtefactVersions builder with application/json body
func NewPostOrgsOrgIdArtefactVersionsRequest(server string, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, body PostOrgsOrgIdArtefactVersionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdArtefactVersionsRequestWithBody(server, orgId, params, "application/json", bodyReader)
}

// NewPostOrgsOrgIdArtefactVersionsRequestWithBody generates requests for PostOrgsOrgIdArtefactVersions with any type of body
func NewPostOrgsOrgIdArtefactVersionsRequestWithBody(server string, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefact-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Vcs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vcs", runtime.ParamLocationQuery, *params.Vcs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdArtefactsRequest generates requests for GetOrgsOrgIdArtefacts
func NewGetOrgsOrgIdArtefactsRequest(server string, orgId string, params *GetOrgsOrgIdArtefactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrgsOrgIdArtefactsArtefactIdRequest generates requests for DeleteOrgsOrgIdArtefactsArtefactId
func NewDeleteOrgsOrgIdArtefactsArtefactIdRequest(server string, orgId string, artefactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdArtefactsArtefactIdVersionsRequest generates requests for GetOrgsOrgIdArtefactsArtefactIdVersions
func NewGetOrgsOrgIdArtefactsArtefactIdVersionsRequest(server string, orgId string, artefactId string, params *GetOrgsOrgIdArtefactsArtefactIdVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reference != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequest calls the generic PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId builder with application/json body
func NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequest(server string, orgId string, artefactId string, versionId string, body PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequestWithBody(server, orgId, artefactId, versionId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequestWithBody generates requests for PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId with any type of body
func NewPatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdRequestWithBody(server string, orgId string, artefactId string, versionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artefactId", runtime.ParamLocationPath, artefactId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "versionId", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/artefacts/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdRequest generates requests for GetOrgsOrgIdEnvTypeEnvTypeUsersUserId
func NewGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdRequest(server string, orgId string, envType string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envType", runtime.ParamLocationPath, envType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-type/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdEnvTypesRequest generates requests for GetOrgsOrgIdEnvTypes
func NewGetOrgsOrgIdEnvTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdEnvTypesRequest calls the generic PostOrgsOrgIdEnvTypes builder with application/json body
func NewPostOrgsOrgIdEnvTypesRequest(server string, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdEnvTypesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdEnvTypesRequestWithBody generates requests for PostOrgsOrgIdEnvTypes with any type of body
func NewPostOrgsOrgIdEnvTypesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest generates requests for DeleteOrgsOrgIdEnvTypesEnvTypeId
func NewDeleteOrgsOrgIdEnvTypesEnvTypeIdRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest generates requests for GetOrgsOrgIdEnvTypesEnvTypeId
func NewGetOrgsOrgIdEnvTypesEnvTypeIdRequest(server string, orgId string, envTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdEventsRequest generates requests for GetOrgsOrgIdEvents
func NewGetOrgsOrgIdEventsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdImagesRequest generates requests for GetOrgsOrgIdImages
func NewGetOrgsOrgIdImagesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdImagesImageIdRequest generates requests for GetOrgsOrgIdImagesImageId
func NewGetOrgsOrgIdImagesImageIdRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdImagesImageIdBuildsRequest generates requests for GetOrgsOrgIdImagesImageIdBuilds
func NewGetOrgsOrgIdImagesImageIdBuildsRequest(server string, orgId string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdImagesImageIdBuildsRequest calls the generic PostOrgsOrgIdImagesImageIdBuilds builder with application/json body
func NewPostOrgsOrgIdImagesImageIdBuildsRequest(server string, orgId string, imageId string, body PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdImagesImageIdBuildsRequestWithBody(server, orgId, imageId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdImagesImageIdBuildsRequestWithBody generates requests for PostOrgsOrgIdImagesImageIdBuilds with any type of body
func NewPostOrgsOrgIdImagesImageIdBuildsRequestWithBody(server string, orgId string, imageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageId", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/images/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdInvitationsRequest generates requests for GetOrgsOrgIdInvitations
func NewGetOrgsOrgIdInvitationsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdInvitationsRequest calls the generic PostOrgsOrgIdInvitations builder with application/json body
func NewPostOrgsOrgIdInvitationsRequest(server string, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdInvitationsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdInvitationsRequestWithBody generates requests for PostOrgsOrgIdInvitations with any type of body
func NewPostOrgsOrgIdInvitationsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRequest generates requests for GetOrgsOrgIdRegistries
func NewGetOrgsOrgIdRegistriesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdRegistriesRequest calls the generic PostOrgsOrgIdRegistries builder with application/json body
func NewPostOrgsOrgIdRegistriesRequest(server string, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdRegistriesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdRegistriesRequestWithBody generates requests for PostOrgsOrgIdRegistries with any type of body
func NewPostOrgsOrgIdRegistriesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdRegistriesRegIdRequest generates requests for DeleteOrgsOrgIdRegistriesRegId
func NewDeleteOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdRequest generates requests for GetOrgsOrgIdRegistriesRegId
func NewGetOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdRegistriesRegIdRequest calls the generic PatchOrgsOrgIdRegistriesRegId builder with application/json body
func NewPatchOrgsOrgIdRegistriesRegIdRequest(server string, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server, orgId, regId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody generates requests for PatchOrgsOrgIdRegistriesRegId with any type of body
func NewPatchOrgsOrgIdRegistriesRegIdRequestWithBody(server string, orgId string, regId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdRegistriesRegIdCredsRequest generates requests for GetOrgsOrgIdRegistriesRegIdCreds
func NewGetOrgsOrgIdRegistriesRegIdCredsRequest(server string, orgId string, regId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "regId", runtime.ParamLocationPath, regId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/registries/%s/creds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountTypesRequest generates requests for GetOrgsOrgIdResourcesAccountTypes
func NewGetOrgsOrgIdResourcesAccountTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/account-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountsRequest generates requests for GetOrgsOrgIdResourcesAccounts
func NewGetOrgsOrgIdResourcesAccountsRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesAccountsRequest calls the generic PostOrgsOrgIdResourcesAccounts builder with application/json body
func NewPostOrgsOrgIdResourcesAccountsRequest(server string, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesAccountsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesAccountsRequestWithBody generates requests for PostOrgsOrgIdResourcesAccounts with any type of body
func NewPostOrgsOrgIdResourcesAccountsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdResourcesAccountsAccIdRequest generates requests for GetOrgsOrgIdResourcesAccountsAccId
func NewGetOrgsOrgIdResourcesAccountsAccIdRequest(server string, orgId string, accId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdResourcesAccountsAccIdRequest calls the generic PatchOrgsOrgIdResourcesAccountsAccId builder with application/json body
func NewPatchOrgsOrgIdResourcesAccountsAccIdRequest(server string, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(server, orgId, accId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody generates requests for PatchOrgsOrgIdResourcesAccountsAccId with any type of body
func NewPatchOrgsOrgIdResourcesAccountsAccIdRequestWithBody(server string, orgId string, accId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accId", runtime.ParamLocationPath, accId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsRequest generates requests for GetOrgsOrgIdResourcesDefs
func NewGetOrgsOrgIdResourcesDefsRequest(server string, orgId string, params *GetOrgsOrgIdResourcesDefsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.App != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Env != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env", runtime.ParamLocationQuery, *params.Env); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnvType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env_type", runtime.ParamLocationQuery, *params.EnvType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Res != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res", runtime.ParamLocationQuery, *params.Res); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "res_type", runtime.ParamLocationQuery, *params.ResType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesDefsRequest calls the generic PostOrgsOrgIdResourcesDefs builder with application/json body
func NewPostOrgsOrgIdResourcesDefsRequest(server string, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDefsRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDefsRequestWithBody generates requests for PostOrgsOrgIdResourcesDefs with any type of body
func NewPostOrgsOrgIdResourcesDefsRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDefsDefIdRequest generates requests for DeleteOrgsOrgIdResourcesDefsDefId
func NewDeleteOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsDefIdRequest generates requests for GetOrgsOrgIdResourcesDefsDefId
func NewGetOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrgsOrgIdResourcesDefsDefIdRequest calls the generic PatchOrgsOrgIdResourcesDefsDefId builder with application/json body
func NewPatchOrgsOrgIdResourcesDefsDefIdRequest(server string, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody generates requests for PatchOrgsOrgIdResourcesDefsDefId with any type of body
func NewPatchOrgsOrgIdResourcesDefsDefIdRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest calls the generic PostOrgsOrgIdResourcesDefsDefIdCriteria builder with application/json body
func NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequest(server string, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody generates requests for PostOrgsOrgIdResourcesDefsDefIdCriteria with any type of body
func NewPostOrgsOrgIdResourcesDefsDefIdCriteriaRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest generates requests for DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId
func NewDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdRequest(server string, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "criteriaId", runtime.ParamLocationPath, criteriaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/criteria/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest generates requests for GetOrgsOrgIdResourcesDefsDefIdResources
func NewGetOrgsOrgIdResourcesDefsDefIdResourcesRequest(server string, orgId string, defId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/defs/%s/resources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDriversRequest generates requests for GetOrgsOrgIdResourcesDrivers
func NewGetOrgsOrgIdResourcesDriversRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdResourcesDriversRequest calls the generic PostOrgsOrgIdResourcesDrivers builder with application/json body
func NewPostOrgsOrgIdResourcesDriversRequest(server string, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdResourcesDriversRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdResourcesDriversRequestWithBody generates requests for PostOrgsOrgIdResourcesDrivers with any type of body
func NewPostOrgsOrgIdResourcesDriversRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest generates requests for DeleteOrgsOrgIdResourcesDriversDriverId
func NewDeleteOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdResourcesDriversDriverIdRequest generates requests for GetOrgsOrgIdResourcesDriversDriverId
func NewGetOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrgsOrgIdResourcesDriversDriverIdRequest calls the generic PutOrgsOrgIdResourcesDriversDriverId builder with application/json body
func NewPutOrgsOrgIdResourcesDriversDriverIdRequest(server string, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(server, orgId, driverId, "application/json", bodyReader)
}

// NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody generates requests for PutOrgsOrgIdResourcesDriversDriverId with any type of body
func NewPutOrgsOrgIdResourcesDriversDriverIdRequestWithBody(server string, orgId string, driverId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "driverId", runtime.ParamLocationPath, driverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/drivers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchOrgsOrgIdResourcesStaticDefIdRequest calls the generic PatchOrgsOrgIdResourcesStaticDefId builder with application/json body
func NewPatchOrgsOrgIdResourcesStaticDefIdRequest(server string, orgId string, defId string, body PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrgsOrgIdResourcesStaticDefIdRequestWithBody(server, orgId, defId, "application/json", bodyReader)
}

// NewPatchOrgsOrgIdResourcesStaticDefIdRequestWithBody generates requests for PatchOrgsOrgIdResourcesStaticDefId with any type of body
func NewPatchOrgsOrgIdResourcesStaticDefIdRequestWithBody(server string, orgId string, defId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "defId", runtime.ParamLocationPath, defId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/static/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdResourcesTypesRequest generates requests for GetOrgsOrgIdResourcesTypes
func NewGetOrgsOrgIdResourcesTypesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resources/types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdUsersRequest generates requests for GetOrgsOrgIdUsers
func NewGetOrgsOrgIdUsersRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdUsersRequest calls the generic PostOrgsOrgIdUsers builder with application/json body
func NewPostOrgsOrgIdUsersRequest(server string, orgId string, body PostOrgsOrgIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdUsersRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdUsersRequestWithBody generates requests for PostOrgsOrgIdUsers with any type of body
func NewPostOrgsOrgIdUsersRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrgsOrgIdWorkloadProfilesRequest generates requests for GetOrgsOrgIdWorkloadProfiles
func NewGetOrgsOrgIdWorkloadProfilesRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdWorkloadProfilesRequest calls the generic PostOrgsOrgIdWorkloadProfiles builder with application/json body
func NewPostOrgsOrgIdWorkloadProfilesRequest(server string, orgId string, body PostOrgsOrgIdWorkloadProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdWorkloadProfilesRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdWorkloadProfilesRequestWithBody generates requests for PostOrgsOrgIdWorkloadProfiles with any type of body
func NewPostOrgsOrgIdWorkloadProfilesRequestWithBody(server string, orgId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdWorkloadProfilesProfileIdRequest generates requests for DeleteOrgsOrgIdWorkloadProfilesProfileId
func NewDeleteOrgsOrgIdWorkloadProfilesProfileIdRequest(server string, orgId string, profileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequest calls the generic PostOrgsOrgIdWorkloadProfilesProfileIdVersions builder with application/json body
func NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequest(server string, orgId string, profileId string, body PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequestWithBody(server, orgId, profileId, "application/json", bodyReader)
}

// NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequestWithBody generates requests for PostOrgsOrgIdWorkloadProfilesProfileIdVersions with any type of body
func NewPostOrgsOrgIdWorkloadProfilesProfileIdVersionsRequestWithBody(server string, orgId string, profileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionRequest generates requests for DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion
func NewDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionRequest(server string, orgId string, profileId string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdWorkloadProfilesProfileQidRequest generates requests for GetOrgsOrgIdWorkloadProfilesProfileQid
func NewGetOrgsOrgIdWorkloadProfilesProfileQidRequest(server string, orgId string, profileQid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrgsOrgIdWorkloadProfilesProfileQidVersionsRequest generates requests for GetOrgsOrgIdWorkloadProfilesProfileQidVersions
func NewGetOrgsOrgIdWorkloadProfilesProfileQidVersionsRequest(server string, orgId string, profileQid string, params *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profileQid", runtime.ParamLocationPath, profileQid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/workload-profiles/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokensRequest generates requests for GetTokens
func NewGetTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTokensTokenIdRequest generates requests for DeleteTokensTokenId
func NewDeleteTokensTokenIdRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// PatchCurrentUser request with any body
	PatchCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error)

	PatchCurrentUserWithResponse(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error)

	// GetOrgs request
	GetOrgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error)

	// GetOrgsOrgId request
	GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error)

	// GetOrgsOrgIdApps request
	GetOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsResponse, error)

	// PostOrgsOrgIdApps request with any body
	PostOrgsOrgIdAppsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error)

	PostOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error)

	// DeleteOrgsOrgIdAppsAppId request
	DeleteOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdResponse, error)

	// GetOrgsOrgIdAppsAppId request
	GetOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdResponse, error)

	// GetOrgsOrgIdAppsAppIdDeltas request
	GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error)

	// PostOrgsOrgIdAppsAppIdDeltas request with any body
	PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error)

	// PatchOrgsOrgIdAppsAppIdDeltasDeltaId request with any body
	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse, error)

	// PutOrgsOrgIdAppsAppIdDeltasDeltaIdName request with any body
	PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse, error)

	PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvs request
	GetOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvs request with any body
	PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdResources request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRules request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdRules request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error)

	// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas request with any body
	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error)

	PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdEnvsEnvIdValues request
	GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdEnvsEnvIdValues request with any body
	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdJobs request
	DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error)

	// GetOrgsOrgIdAppsAppIdRuntime request
	GetOrgsOrgIdAppsAppIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// PostOrgsOrgIdAppsAppIdSetsSetId request with any body
	PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error)

	// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId request
	GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error)

	// GetOrgsOrgIdAppsAppIdUsers request
	GetOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersResponse, error)

	// PostOrgsOrgIdAppsAppIdUsers request with any body
	PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error)

	PostOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error)

	// GetOrgsOrgIdAppsAppIdUsersUserId request
	GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersions request
	GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error)

	// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId request
	GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error)

	// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey request with any body
	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValues request
	DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error)

	// GetOrgsOrgIdAppsAppIdValues request
	GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error)

	// PostOrgsOrgIdAppsAppIdValues request with any body
	PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error)

	// DeleteOrgsOrgIdAppsAppIdValuesKey request
	DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// PutOrgsOrgIdAppsAppIdValuesKey request with any body
	PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooks request
	GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// PostOrgsOrgIdAppsAppIdWebhooks request with any body
	PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error)

	// DeleteOrgsOrgIdAppsAppIdWebhooksJobId request
	DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// GetOrgsOrgIdAppsAppIdWebhooksJobId request
	GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// PostOrgsOrgIdAppsAppIdWebhooksJobId request with any body
	PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	PostOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error)

	// GetOrgsOrgIdArtefactVersions request
	GetOrgsOrgIdArtefactVersionsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactVersionsResponse, error)

	// PostOrgsOrgIdArtefactVersions request with any body
	PostOrgsOrgIdArtefactVersionsWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdArtefactVersionsResponse, error)

	PostOrgsOrgIdArtefactVersionsWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, body PostOrgsOrgIdArtefactVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdArtefactVersionsResponse, error)

	// GetOrgsOrgIdArtefacts request
	GetOrgsOrgIdArtefactsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactsResponse, error)

	// DeleteOrgsOrgIdArtefactsArtefactId request
	DeleteOrgsOrgIdArtefactsArtefactIdWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdArtefactsArtefactIdResponse, error)

	// GetOrgsOrgIdArtefactsArtefactIdVersions request
	GetOrgsOrgIdArtefactsArtefactIdVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *GetOrgsOrgIdArtefactsArtefactIdVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactsArtefactIdVersionsResponse, error)

	// PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId request with any body
	PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse, error)

	PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse, error)

	// GetOrgsOrgIdEnvTypeEnvTypeUsersUserId request
	GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse, error)

	// GetOrgsOrgIdEnvTypes request
	GetOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesResponse, error)

	// PostOrgsOrgIdEnvTypes request with any body
	PostOrgsOrgIdEnvTypesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error)

	PostOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error)

	// DeleteOrgsOrgIdEnvTypesEnvTypeId request
	DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error)

	// GetOrgsOrgIdEnvTypesEnvTypeId request
	GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error)

	// GetOrgsOrgIdEvents request
	GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error)

	// GetOrgsOrgIdImages request
	GetOrgsOrgIdImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesResponse, error)

	// GetOrgsOrgIdImagesImageId request
	GetOrgsOrgIdImagesImageIdWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesImageIdResponse, error)

	// GetOrgsOrgIdImagesImageIdBuilds request
	GetOrgsOrgIdImagesImageIdBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesImageIdBuildsResponse, error)

	// PostOrgsOrgIdImagesImageIdBuilds request with any body
	PostOrgsOrgIdImagesImageIdBuildsWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdImagesImageIdBuildsResponse, error)

	PostOrgsOrgIdImagesImageIdBuildsWithResponse(ctx context.Context, orgId string, imageId string, body PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdImagesImageIdBuildsResponse, error)

	// GetOrgsOrgIdInvitations request
	GetOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdInvitationsResponse, error)

	// PostOrgsOrgIdInvitations request with any body
	PostOrgsOrgIdInvitationsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error)

	PostOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error)

	// GetOrgsOrgIdRegistries request
	GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error)

	// PostOrgsOrgIdRegistries request with any body
	PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error)

	// DeleteOrgsOrgIdRegistriesRegId request
	DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegId request
	GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error)

	// PatchOrgsOrgIdRegistriesRegId request with any body
	PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error)

	// GetOrgsOrgIdRegistriesRegIdCreds request
	GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error)

	// GetOrgsOrgIdResourcesAccountTypes request
	GetOrgsOrgIdResourcesAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountTypesResponse, error)

	// GetOrgsOrgIdResourcesAccounts request
	GetOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsResponse, error)

	// PostOrgsOrgIdResourcesAccounts request with any body
	PostOrgsOrgIdResourcesAccountsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error)

	PostOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error)

	// GetOrgsOrgIdResourcesAccountsAccId request
	GetOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error)

	// PatchOrgsOrgIdResourcesAccountsAccId request with any body
	PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error)

	PatchOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error)

	// GetOrgsOrgIdResourcesDefs request
	GetOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsResponse, error)

	// PostOrgsOrgIdResourcesDefs request with any body
	PostOrgsOrgIdResourcesDefsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error)

	PostOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error)

	// DeleteOrgsOrgIdResourcesDefsDefId request
	DeleteOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error)

	// GetOrgsOrgIdResourcesDefsDefId request
	GetOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error)

	// PatchOrgsOrgIdResourcesDefsDefId request with any body
	PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error)

	PatchOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error)

	// PostOrgsOrgIdResourcesDefsDefIdCriteria request with any body
	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error)

	PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error)

	// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId request
	DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error)

	// GetOrgsOrgIdResourcesDefsDefIdResources request
	GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error)

	// GetOrgsOrgIdResourcesDrivers request
	GetOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversResponse, error)

	// PostOrgsOrgIdResourcesDrivers request with any body
	PostOrgsOrgIdResourcesDriversWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error)

	PostOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error)

	// DeleteOrgsOrgIdResourcesDriversDriverId request
	DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// GetOrgsOrgIdResourcesDriversDriverId request
	GetOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// PutOrgsOrgIdResourcesDriversDriverId request with any body
	PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error)

	PutOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error)

	// PatchOrgsOrgIdResourcesStaticDefId request with any body
	PatchOrgsOrgIdResourcesStaticDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesStaticDefIdResponse, error)

	PatchOrgsOrgIdResourcesStaticDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesStaticDefIdResponse, error)

	// GetOrgsOrgIdResourcesTypes request
	GetOrgsOrgIdResourcesTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesTypesResponse, error)

	// GetOrgsOrgIdUsers request
	GetOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersResponse, error)

	// PostOrgsOrgIdUsers request with any body
	PostOrgsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error)

	PostOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error)

	// GetOrgsOrgIdWorkloadProfiles request
	GetOrgsOrgIdWorkloadProfilesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesResponse, error)

	// PostOrgsOrgIdWorkloadProfiles request with any body
	PostOrgsOrgIdWorkloadProfilesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesResponse, error)

	PostOrgsOrgIdWorkloadProfilesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdWorkloadProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesResponse, error)

	// DeleteOrgsOrgIdWorkloadProfilesProfileId request
	DeleteOrgsOrgIdWorkloadProfilesProfileIdWithResponse(ctx context.Context, orgId string, profileId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse, error)

	// PostOrgsOrgIdWorkloadProfilesProfileIdVersions request with any body
	PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBodyWithResponse(ctx context.Context, orgId string, profileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse, error)

	PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithResponse(ctx context.Context, orgId string, profileId string, body PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse, error)

	// DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion request
	DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionWithResponse(ctx context.Context, orgId string, profileId string, version string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse, error)

	// GetOrgsOrgIdWorkloadProfilesProfileQid request
	GetOrgsOrgIdWorkloadProfilesProfileQidWithResponse(ctx context.Context, orgId string, profileQid string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesProfileQidResponse, error)

	// GetOrgsOrgIdWorkloadProfilesProfileQidVersions request
	GetOrgsOrgIdWorkloadProfilesProfileQidVersionsWithResponse(ctx context.Context, orgId string, profileQid string, params *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse, error)

	// GetTokens request
	GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error)

	// DeleteTokensTokenId request
	DeleteTokensTokenIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokensTokenIdResponse, error)

	// GetUsersMe request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
}

// Status returns HTTPResponse.Status
func (r PatchCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON400      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApplicationResponse
	JSON409      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeltaResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON400      *DeltaResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON400      *string
	JSON404      *string
	JSON409      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeploymentResponse
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutomationRuleResponse
	JSON400      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdRuntimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentRuntimeInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdRuntimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdRuntimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdSetsSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdSetsSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeltaResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueSetVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValueSetVersionResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ValueResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdAppsAppIdValuesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ValueResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdAppsAppIdValuesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WebhookResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookResponse
	JSON400      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdArtefactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdArtefactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdArtefactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdArtefactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdArtefactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdArtefactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdArtefactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdArtefactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdArtefactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdArtefactsArtefactIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdArtefactsArtefactIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdArtefactsArtefactIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdArtefactsArtefactIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdArtefactsArtefactIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdArtefactsArtefactIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtefactVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentTypeResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdEnvTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentTypeResponse
	JSON400      *string
	JSON409      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdEnvTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdEnvTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *EnvironmentTypeResponse
	JSON404      *string
	JSON409      *[]struct {
		AdditionalProperties map[string]string `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEnvTypesEnvTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentTypeResponse
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEnvTypesEnvTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEnvTypesEnvTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EventResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdImagesImageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdImagesImageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdImagesImageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdImagesImageIdBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageBuildResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdImagesImageIdBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdImagesImageIdBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdImagesImageIdBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON403      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdImagesImageIdBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdImagesImageIdBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserInviteResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdRegistriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdRegistriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdRegistriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdRegistriesRegIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *ErrorInfoResponse
	JSON403      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
	JSON409      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdRegistriesRegIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdRegistriesRegIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdRegistriesRegIdCredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryCredsResponse
	JSON400      *ErrorInfoResponse
	JSON401      *ErrorInfoResponse
	JSON404      *ErrorInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdRegistriesRegIdCredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccountTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceAccountResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesAccountsAccIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesAccountsAccIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesAccountsAccIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdResourcesAccountsAccIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceAccountResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdResourcesAccountsAccIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdResourcesAccountsAccIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdResourcesDefsDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdResourcesDefsDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdResourcesDefsDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MatchingCriteriaResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *string
	JSON409      *[]ResourceDefinitionChangeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDefsDefIdResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveResourceResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDefsDefIdResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDefsDefIdResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDriversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DriverDefinitionResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDriversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDriversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdResourcesDriversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdResourcesDriversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdResourcesDriversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON404      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrgsOrgIdResourcesDriversDriverIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DriverDefinitionResponse
	JSON400      *HumanitecErrorResponse
	JSON404      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutOrgsOrgIdResourcesDriversDriverIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrgsOrgIdResourcesDriversDriverIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrgsOrgIdResourcesStaticDefIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaticDefinitionResponse
	JSON400      *string
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r PatchOrgsOrgIdResourcesStaticDefIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrgsOrgIdResourcesStaticDefIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdResourcesTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceTypeResponse
	JSON500      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdResourcesTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdResourcesTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRoleResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileExtendedResponse
	JSON400      *string
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdWorkloadProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdWorkloadProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdWorkloadProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdWorkloadProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdWorkloadProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdWorkloadProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileVersionResponse
	JSON400      *HumanitecErrorResponse
	JSON401      *HumanitecErrorResponse
	JSON409      *HumanitecErrorResponse
	JSON422      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdWorkloadProfilesProfileQidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadProfileResponse
	JSON404      *HumanitecErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdWorkloadProfilesProfileQidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdWorkloadProfilesProfileQidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkloadProfileVersionResponse
}

// Status returns HTTPResponse.Status
func (r GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// PatchCurrentUserWithBodyWithResponse request with arbitrary body returning *PatchCurrentUserResponse
func (c *ClientWithResponses) PatchCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error) {
	rsp, err := c.PatchCurrentUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrentUserResponse(rsp)
}

func (c *ClientWithResponses) PatchCurrentUserWithResponse(ctx context.Context, body PatchCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCurrentUserResponse, error) {
	rsp, err := c.PatchCurrentUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCurrentUserResponse(rsp)
}

// GetOrgsWithResponse request returning *GetOrgsResponse
func (c *ClientWithResponses) GetOrgsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrgsResponse, error) {
	rsp, err := c.GetOrgs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsResponse(rsp)
}

// GetOrgsOrgIdWithResponse request returning *GetOrgsOrgIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResponse, error) {
	rsp, err := c.GetOrgsOrgId(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResponse(rsp)
}

// GetOrgsOrgIdAppsWithResponse request returning *GetOrgsOrgIdAppsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsResponse, error) {
	rsp, err := c.GetOrgsOrgIdApps(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsResponse(rsp)
}

// PostOrgsOrgIdAppsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdAppsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsResponse, error) {
	rsp, err := c.PostOrgsOrgIdApps(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppId(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWithResponse request returning *GetOrgsOrgIdAppsAppIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppId(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdDeltasWithResponse request returning *GetOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdDeltasParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdDeltasResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltasWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdDeltasWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdDeltasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdDeltas(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PatchOrgsOrgIdAppsAppIdDeltasDeltaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdDeltasDeltaId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchived(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvId(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBodyWithResponse(ctx context.Context, orgId string, appId string, deltaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithBody(ctx, orgId, appId, deltaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithResponse(ctx context.Context, orgId string, appId string, deltaId string, body PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdDeltasDeltaIdName(ctx, orgId, appId, deltaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvs(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdEnvsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvs(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvId(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvId(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploys(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployId(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsWithResponse(ctx context.Context, orgId string, appId string, envId string, deployId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrors(ctx, orgId, appId, envId, deployId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployId(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdResources(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse(ctx context.Context, orgId string, appId string, envId string, pType string, resId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResId(ctx, orgId, appId, envId, pType, resId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdRules(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithBody(ctx, orgId, appId, envId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse(ctx context.Context, orgId string, appId string, envId string, ruleId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleId(ctx, orgId, appId, envId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntime(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse(ctx context.Context, orgId string, appId string, envId string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePaused(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp)
}

// PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse
func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse(ctx context.Context, orgId string, appId string, envId string, body PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	rsp, err := c.PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicas(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, envId string, params *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersions(ctx, orgId, appId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, envId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, envId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, envId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, envId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, envId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithBody(ctx, orgId, appId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse(ctx context.Context, orgId string, appId string, envId string, body PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdEnvsEnvIdValues(ctx, orgId, appId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithBody(ctx, orgId, appId, envId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, envId string, key string, body PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKey(ctx, orgId, appId, envId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdJobsWithResponse request returning *DeleteOrgsOrgIdAppsAppIdJobsResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdJobsWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdJobs(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdRuntimeWithResponse request returning *GetOrgsOrgIdAppsAppIdRuntimeResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdRuntimeWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdRuntimeParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdRuntime(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdRuntimeResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdSetsSetIdResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, setId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetIdWithBody(ctx, orgId, appId, setId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, body PostOrgsOrgIdAppsAppIdSetsSetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdSetsSetId(ctx, orgId, appId, setId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse request returning *GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse(ctx context.Context, orgId string, appId string, setId string, sourceSetId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetId(ctx, orgId, appId, setId, sourceSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdUsersWithResponse request returning *GetOrgsOrgIdAppsAppIdUsersResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdUsers(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdUsersResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdUsersWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdUsersWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdUsersWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdUsers(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse request returning *GetOrgsOrgIdAppsAppIdUsersUserIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse(ctx context.Context, orgId string, appId string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdUsersUserId(ctx, orgId, appId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse(ctx context.Context, orgId string, appId string, params *GetOrgsOrgIdAppsAppIdValueSetVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersions(ctx, orgId, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse request returning *GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionId(ctx, orgId, appId, valueSetVersionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithBody(ctx, orgId, appId, valueSetVersionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestore(ctx, orgId, appId, valueSetVersionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithBody(ctx, orgId, appId, valueSetVersionId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse(ctx context.Context, orgId string, appId string, valueSetVersionId string, key string, body PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKey(ctx, orgId, appId, valueSetVersionId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdValuesWithResponse request returning *GetOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdValuesResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValuesWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdValuesWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdValues(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse request returning *DeleteOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdAppsAppIdValuesKeyResponse
func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithBodyWithResponse(ctx context.Context, orgId string, appId string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKeyWithBody(ctx, orgId, appId, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdAppsAppIdValuesKeyWithResponse(ctx context.Context, orgId string, appId string, key string, body PutOrgsOrgIdAppsAppIdValuesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	rsp, err := c.PutOrgsOrgIdAppsAppIdValuesKey(ctx, orgId, appId, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdWebhooksResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithBodyWithResponse(ctx context.Context, orgId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooksWithBody(ctx, orgId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksWithResponse(ctx context.Context, orgId string, appId string, body PostOrgsOrgIdAppsAppIdWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooks(ctx, orgId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp)
}

// DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse request returning *GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse
func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBodyWithResponse(ctx context.Context, orgId string, appId string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooksJobIdWithBody(ctx, orgId, appId, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse(ctx context.Context, orgId string, appId string, jobId string, body PostOrgsOrgIdAppsAppIdWebhooksJobIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	rsp, err := c.PostOrgsOrgIdAppsAppIdWebhooksJobId(ctx, orgId, appId, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp)
}

// GetOrgsOrgIdArtefactVersionsWithResponse request returning *GetOrgsOrgIdArtefactVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdArtefactVersionsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdArtefactVersions(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdArtefactVersionsResponse(rsp)
}

// PostOrgsOrgIdArtefactVersionsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdArtefactVersionsResponse
func (c *ClientWithResponses) PostOrgsOrgIdArtefactVersionsWithBodyWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdArtefactVersionsResponse, error) {
	rsp, err := c.PostOrgsOrgIdArtefactVersionsWithBody(ctx, orgId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdArtefactVersionsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdArtefactVersionsWithResponse(ctx context.Context, orgId string, params *PostOrgsOrgIdArtefactVersionsParams, body PostOrgsOrgIdArtefactVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdArtefactVersionsResponse, error) {
	rsp, err := c.PostOrgsOrgIdArtefactVersions(ctx, orgId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdArtefactVersionsResponse(rsp)
}

// GetOrgsOrgIdArtefactsWithResponse request returning *GetOrgsOrgIdArtefactsResponse
func (c *ClientWithResponses) GetOrgsOrgIdArtefactsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdArtefactsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactsResponse, error) {
	rsp, err := c.GetOrgsOrgIdArtefacts(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdArtefactsResponse(rsp)
}

// DeleteOrgsOrgIdArtefactsArtefactIdWithResponse request returning *DeleteOrgsOrgIdArtefactsArtefactIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdArtefactsArtefactIdWithResponse(ctx context.Context, orgId string, artefactId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdArtefactsArtefactIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdArtefactsArtefactId(ctx, orgId, artefactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdArtefactsArtefactIdResponse(rsp)
}

// GetOrgsOrgIdArtefactsArtefactIdVersionsWithResponse request returning *GetOrgsOrgIdArtefactsArtefactIdVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdArtefactsArtefactIdVersionsWithResponse(ctx context.Context, orgId string, artefactId string, params *GetOrgsOrgIdArtefactsArtefactIdVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdArtefactsArtefactIdVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdArtefactsArtefactIdVersions(ctx, orgId, artefactId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdArtefactsArtefactIdVersionsResponse(rsp)
}

// PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBodyWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithBody(ctx, orgId, artefactId, versionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithResponse(ctx context.Context, orgId string, artefactId string, versionId string, body PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionId(ctx, orgId, artefactId, versionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse(rsp)
}

// GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdWithResponse request returning *GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdWithResponse(ctx context.Context, orgId string, envType string, userId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypeEnvTypeUsersUserId(ctx, orgId, envType, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse(rsp)
}

// GetOrgsOrgIdEnvTypesWithResponse request returning *GetOrgsOrgIdEnvTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypesResponse(rsp)
}

// PostOrgsOrgIdEnvTypesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdEnvTypesResponse
func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdEnvTypesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdEnvTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdEnvTypesResponse, error) {
	rsp, err := c.PostOrgsOrgIdEnvTypes(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdEnvTypesResponse(rsp)
}

// DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse request returning *DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdEnvTypesEnvTypeId(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp)
}

// GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse request returning *GetOrgsOrgIdEnvTypesEnvTypeIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse(ctx context.Context, orgId string, envTypeId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdEnvTypesEnvTypeId(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp)
}

// GetOrgsOrgIdEventsWithResponse request returning *GetOrgsOrgIdEventsResponse
func (c *ClientWithResponses) GetOrgsOrgIdEventsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdEventsResponse, error) {
	rsp, err := c.GetOrgsOrgIdEvents(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdEventsResponse(rsp)
}

// GetOrgsOrgIdImagesWithResponse request returning *GetOrgsOrgIdImagesResponse
func (c *ClientWithResponses) GetOrgsOrgIdImagesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesResponse, error) {
	rsp, err := c.GetOrgsOrgIdImages(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdImagesResponse(rsp)
}

// GetOrgsOrgIdImagesImageIdWithResponse request returning *GetOrgsOrgIdImagesImageIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdImagesImageIdWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesImageIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdImagesImageId(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdImagesImageIdResponse(rsp)
}

// GetOrgsOrgIdImagesImageIdBuildsWithResponse request returning *GetOrgsOrgIdImagesImageIdBuildsResponse
func (c *ClientWithResponses) GetOrgsOrgIdImagesImageIdBuildsWithResponse(ctx context.Context, orgId string, imageId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdImagesImageIdBuildsResponse, error) {
	rsp, err := c.GetOrgsOrgIdImagesImageIdBuilds(ctx, orgId, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdImagesImageIdBuildsResponse(rsp)
}

// PostOrgsOrgIdImagesImageIdBuildsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdImagesImageIdBuildsResponse
func (c *ClientWithResponses) PostOrgsOrgIdImagesImageIdBuildsWithBodyWithResponse(ctx context.Context, orgId string, imageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdImagesImageIdBuildsResponse, error) {
	rsp, err := c.PostOrgsOrgIdImagesImageIdBuildsWithBody(ctx, orgId, imageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdImagesImageIdBuildsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdImagesImageIdBuildsWithResponse(ctx context.Context, orgId string, imageId string, body PostOrgsOrgIdImagesImageIdBuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdImagesImageIdBuildsResponse, error) {
	rsp, err := c.PostOrgsOrgIdImagesImageIdBuilds(ctx, orgId, imageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdImagesImageIdBuildsResponse(rsp)
}

// GetOrgsOrgIdInvitationsWithResponse request returning *GetOrgsOrgIdInvitationsResponse
func (c *ClientWithResponses) GetOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.GetOrgsOrgIdInvitations(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdInvitationsResponse(rsp)
}

// PostOrgsOrgIdInvitationsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdInvitationsResponse
func (c *ClientWithResponses) PostOrgsOrgIdInvitationsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.PostOrgsOrgIdInvitationsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdInvitationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdInvitationsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdInvitationsResponse, error) {
	rsp, err := c.PostOrgsOrgIdInvitations(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdInvitationsResponse(rsp)
}

// GetOrgsOrgIdRegistriesWithResponse request returning *GetOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistries(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesResponse(rsp)
}

// PostOrgsOrgIdRegistriesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdRegistriesResponse
func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistriesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdRegistriesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdRegistriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdRegistriesResponse, error) {
	rsp, err := c.PostOrgsOrgIdRegistries(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdRegistriesResponse(rsp)
}

// DeleteOrgsOrgIdRegistriesRegIdWithResponse request returning *DeleteOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdWithResponse request returning *GetOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegId(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdRegistriesRegIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithBodyWithResponse(ctx context.Context, orgId string, regId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegIdWithBody(ctx, orgId, regId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdRegistriesRegIdWithResponse(ctx context.Context, orgId string, regId string, body PatchOrgsOrgIdRegistriesRegIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdRegistriesRegId(ctx, orgId, regId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp)
}

// GetOrgsOrgIdRegistriesRegIdCredsWithResponse request returning *GetOrgsOrgIdRegistriesRegIdCredsResponse
func (c *ClientWithResponses) GetOrgsOrgIdRegistriesRegIdCredsWithResponse(ctx context.Context, orgId string, regId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	rsp, err := c.GetOrgsOrgIdRegistriesRegIdCreds(ctx, orgId, regId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountTypesWithResponse request returning *GetOrgsOrgIdResourcesAccountTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccountTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountTypesResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountsWithResponse request returning *GetOrgsOrgIdResourcesAccountsResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccounts(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountsResponse(rsp)
}

// PostOrgsOrgIdResourcesAccountsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesAccountsResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesAccountsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesAccountsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesAccountsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesAccounts(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesAccountsResponse(rsp)
}

// GetOrgsOrgIdResourcesAccountsAccIdWithResponse request returning *GetOrgsOrgIdResourcesAccountsAccIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesAccountsAccId(ctx, orgId, accId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

// PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdResourcesAccountsAccIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdResourcesAccountsAccIdWithBodyWithResponse(ctx context.Context, orgId string, accId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesAccountsAccIdWithBody(ctx, orgId, accId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdResourcesAccountsAccIdWithResponse(ctx context.Context, orgId string, accId string, body PatchOrgsOrgIdResourcesAccountsAccIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesAccountsAccId(ctx, orgId, accId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsWithResponse request returning *GetOrgsOrgIdResourcesDefsResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, params *GetOrgsOrgIdResourcesDefsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefs(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsResponse(rsp)
}

// PostOrgsOrgIdResourcesDefsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDefsResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDefsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefs(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDefsDefIdWithResponse request returning *DeleteOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, params *DeleteOrgsOrgIdResourcesDefsDefIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsDefIdWithResponse request returning *GetOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdResourcesDefsDefIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdResourcesDefsDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesDefsDefIdWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdResourcesDefsDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesDefsDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesDefsDefId(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp)
}

// PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsDefIdCriteriaWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse(ctx context.Context, orgId string, defId string, body PostOrgsOrgIdResourcesDefsDefIdCriteriaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDefsDefIdCriteria(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse request returning *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse(ctx context.Context, orgId string, defId string, criteriaId string, params *DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdParams, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaId(ctx, orgId, defId, criteriaId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse request returning *GetOrgsOrgIdResourcesDefsDefIdResourcesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse(ctx context.Context, orgId string, defId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDefsDefIdResources(ctx, orgId, defId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse(rsp)
}

// GetOrgsOrgIdResourcesDriversWithResponse request returning *GetOrgsOrgIdResourcesDriversResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDrivers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDriversResponse(rsp)
}

// PostOrgsOrgIdResourcesDriversWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdResourcesDriversResponse
func (c *ClientWithResponses) PostOrgsOrgIdResourcesDriversWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDriversWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDriversResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdResourcesDriversWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdResourcesDriversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	rsp, err := c.PostOrgsOrgIdResourcesDrivers(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdResourcesDriversResponse(rsp)
}

// DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse request returning *DeleteOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// GetOrgsOrgIdResourcesDriversDriverIdWithResponse request returning *GetOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse request with arbitrary body returning *PutOrgsOrgIdResourcesDriversDriverIdResponse
func (c *ClientWithResponses) PutOrgsOrgIdResourcesDriversDriverIdWithBodyWithResponse(ctx context.Context, orgId string, driverId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDriversDriverIdWithBody(ctx, orgId, driverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

func (c *ClientWithResponses) PutOrgsOrgIdResourcesDriversDriverIdWithResponse(ctx context.Context, orgId string, driverId string, body PutOrgsOrgIdResourcesDriversDriverIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	rsp, err := c.PutOrgsOrgIdResourcesDriversDriverId(ctx, orgId, driverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp)
}

// PatchOrgsOrgIdResourcesStaticDefIdWithBodyWithResponse request with arbitrary body returning *PatchOrgsOrgIdResourcesStaticDefIdResponse
func (c *ClientWithResponses) PatchOrgsOrgIdResourcesStaticDefIdWithBodyWithResponse(ctx context.Context, orgId string, defId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesStaticDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesStaticDefIdWithBody(ctx, orgId, defId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesStaticDefIdResponse(rsp)
}

func (c *ClientWithResponses) PatchOrgsOrgIdResourcesStaticDefIdWithResponse(ctx context.Context, orgId string, defId string, body PatchOrgsOrgIdResourcesStaticDefIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrgsOrgIdResourcesStaticDefIdResponse, error) {
	rsp, err := c.PatchOrgsOrgIdResourcesStaticDefId(ctx, orgId, defId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOrgsOrgIdResourcesStaticDefIdResponse(rsp)
}

// GetOrgsOrgIdResourcesTypesWithResponse request returning *GetOrgsOrgIdResourcesTypesResponse
func (c *ClientWithResponses) GetOrgsOrgIdResourcesTypesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdResourcesTypesResponse, error) {
	rsp, err := c.GetOrgsOrgIdResourcesTypes(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdResourcesTypesResponse(rsp)
}

// GetOrgsOrgIdUsersWithResponse request returning *GetOrgsOrgIdUsersResponse
func (c *ClientWithResponses) GetOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdUsersResponse, error) {
	rsp, err := c.GetOrgsOrgIdUsers(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdUsersResponse(rsp)
}

// PostOrgsOrgIdUsersWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdUsersResponse
func (c *ClientWithResponses) PostOrgsOrgIdUsersWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdUsersWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdUsersWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdUsersResponse, error) {
	rsp, err := c.PostOrgsOrgIdUsers(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdUsersResponse(rsp)
}

// GetOrgsOrgIdWorkloadProfilesWithResponse request returning *GetOrgsOrgIdWorkloadProfilesResponse
func (c *ClientWithResponses) GetOrgsOrgIdWorkloadProfilesWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesResponse, error) {
	rsp, err := c.GetOrgsOrgIdWorkloadProfiles(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdWorkloadProfilesResponse(rsp)
}

// PostOrgsOrgIdWorkloadProfilesWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdWorkloadProfilesResponse
func (c *ClientWithResponses) PostOrgsOrgIdWorkloadProfilesWithBodyWithResponse(ctx context.Context, orgId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesResponse, error) {
	rsp, err := c.PostOrgsOrgIdWorkloadProfilesWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdWorkloadProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdWorkloadProfilesWithResponse(ctx context.Context, orgId string, body PostOrgsOrgIdWorkloadProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesResponse, error) {
	rsp, err := c.PostOrgsOrgIdWorkloadProfiles(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdWorkloadProfilesResponse(rsp)
}

// DeleteOrgsOrgIdWorkloadProfilesProfileIdWithResponse request returning *DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdWorkloadProfilesProfileIdWithResponse(ctx context.Context, orgId string, profileId string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdWorkloadProfilesProfileId(ctx, orgId, profileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdResponse(rsp)
}

// PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBodyWithResponse request with arbitrary body returning *PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse
func (c *ClientWithResponses) PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBodyWithResponse(ctx context.Context, orgId string, profileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse, error) {
	rsp, err := c.PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithBody(ctx, orgId, profileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse(rsp)
}

func (c *ClientWithResponses) PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithResponse(ctx context.Context, orgId string, profileId string, body PostOrgsOrgIdWorkloadProfilesProfileIdVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse, error) {
	rsp, err := c.PostOrgsOrgIdWorkloadProfilesProfileIdVersions(ctx, orgId, profileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse(rsp)
}

// DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionWithResponse request returning *DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse
func (c *ClientWithResponses) DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionWithResponse(ctx context.Context, orgId string, profileId string, version string, reqEditors ...RequestEditorFn) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse, error) {
	rsp, err := c.DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersion(ctx, orgId, profileId, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse(rsp)
}

// GetOrgsOrgIdWorkloadProfilesProfileQidWithResponse request returning *GetOrgsOrgIdWorkloadProfilesProfileQidResponse
func (c *ClientWithResponses) GetOrgsOrgIdWorkloadProfilesProfileQidWithResponse(ctx context.Context, orgId string, profileQid string, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesProfileQidResponse, error) {
	rsp, err := c.GetOrgsOrgIdWorkloadProfilesProfileQid(ctx, orgId, profileQid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdWorkloadProfilesProfileQidResponse(rsp)
}

// GetOrgsOrgIdWorkloadProfilesProfileQidVersionsWithResponse request returning *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse
func (c *ClientWithResponses) GetOrgsOrgIdWorkloadProfilesProfileQidVersionsWithResponse(ctx context.Context, orgId string, profileQid string, params *GetOrgsOrgIdWorkloadProfilesProfileQidVersionsParams, reqEditors ...RequestEditorFn) (*GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse, error) {
	rsp, err := c.GetOrgsOrgIdWorkloadProfilesProfileQidVersions(ctx, orgId, profileQid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse(rsp)
}

// GetTokensWithResponse request returning *GetTokensResponse
func (c *ClientWithResponses) GetTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokensResponse, error) {
	rsp, err := c.GetTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokensResponse(rsp)
}

// DeleteTokensTokenIdWithResponse request returning *DeleteTokensTokenIdResponse
func (c *ClientWithResponses) DeleteTokensTokenIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteTokensTokenIdResponse, error) {
	rsp, err := c.DeleteTokensTokenId(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTokensTokenIdResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCurrentUserResponse parses an HTTP response from a PatchCurrentUserWithResponse call
func ParsePatchCurrentUserResponse(rsp *http.Response) (*PatchCurrentUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsResponse parses an HTTP response from a GetOrgsWithResponse call
func ParseGetOrgsResponse(rsp *http.Response) (*GetOrgsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResponse parses an HTTP response from a GetOrgsOrgIdWithResponse call
func ParseGetOrgsOrgIdResponse(rsp *http.Response) (*GetOrgsOrgIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsResponse parses an HTTP response from a GetOrgsOrgIdAppsWithResponse call
func ParseGetOrgsOrgIdAppsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsResponse parses an HTTP response from a PostOrgsOrgIdAppsWithResponse call
func ParsePostOrgsOrgIdAppsResponse(rsp *http.Response) (*PostOrgsOrgIdAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParseGetOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdDeltasResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdDeltasWithResponse call
func ParsePostOrgsOrgIdAppsAppIdDeltasResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdDeltasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdDeltasDeltaIdWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdDeltasDeltaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdArchivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameWithResponse call
func ParsePutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdDeltasDeltaIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdDeploysDeployIdErrorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdFromDeployIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdResourcesTypeResIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdRulesRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutomationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdRuntimePausedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse parses an HTTP response from a PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasWithResponse call
func ParsePatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse(rsp *http.Response) (*PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdAppsAppIdEnvsEnvIdRuntimeReplicasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdEnvsEnvIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdEnvsEnvIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdJobsResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdJobsWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdJobsResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdJobsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdRuntimeResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdRuntimeWithResponse call
func ParseGetOrgsOrgIdAppsAppIdRuntimeResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdRuntimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdRuntimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentRuntimeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdSetsSetIdWithResponse call
func ParsePostOrgsOrgIdAppsAppIdSetsSetIdResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdSetsSetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdSetsSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdSetsSetIdDiffSourceSetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeltaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdUsersResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdUsersWithResponse call
func ParseGetOrgsOrgIdAppsAppIdUsersResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdUsersResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdUsersWithResponse call
func ParsePostOrgsOrgIdAppsAppIdUsersResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdUsersUserIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdUsersUserIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdUsersUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdPurgeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValueSetVersionsValueSetVersionIdRestoreKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValueSetVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdValuesWithResponse call
func ParseGetOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdValuesResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdValuesWithResponse call
func ParsePostOrgsOrgIdAppsAppIdValuesResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse parses an HTTP response from a PutOrgsOrgIdAppsAppIdValuesKeyWithResponse call
func ParsePutOrgsOrgIdAppsAppIdValuesKeyResponse(rsp *http.Response) (*PutOrgsOrgIdAppsAppIdValuesKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdAppsAppIdValuesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ValueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdWebhooksResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdWebhooksWithResponse call
func ParsePostOrgsOrgIdAppsAppIdWebhooksResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a DeleteOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseDeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a GetOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParseGetOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdAppsAppIdWebhooksJobIdResponse parses an HTTP response from a PostOrgsOrgIdAppsAppIdWebhooksJobIdWithResponse call
func ParsePostOrgsOrgIdAppsAppIdWebhooksJobIdResponse(rsp *http.Response) (*PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdAppsAppIdWebhooksJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdArtefactVersionsResponse parses an HTTP response from a GetOrgsOrgIdArtefactVersionsWithResponse call
func ParseGetOrgsOrgIdArtefactVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdArtefactVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdArtefactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdArtefactVersionsResponse parses an HTTP response from a PostOrgsOrgIdArtefactVersionsWithResponse call
func ParsePostOrgsOrgIdArtefactVersionsResponse(rsp *http.Response) (*PostOrgsOrgIdArtefactVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdArtefactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdArtefactsResponse parses an HTTP response from a GetOrgsOrgIdArtefactsWithResponse call
func ParseGetOrgsOrgIdArtefactsResponse(rsp *http.Response) (*GetOrgsOrgIdArtefactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdArtefactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdArtefactsArtefactIdResponse parses an HTTP response from a DeleteOrgsOrgIdArtefactsArtefactIdWithResponse call
func ParseDeleteOrgsOrgIdArtefactsArtefactIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdArtefactsArtefactIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdArtefactsArtefactIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdArtefactsArtefactIdVersionsResponse parses an HTTP response from a GetOrgsOrgIdArtefactsArtefactIdVersionsWithResponse call
func ParseGetOrgsOrgIdArtefactsArtefactIdVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdArtefactsArtefactIdVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdArtefactsArtefactIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse parses an HTTP response from a PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdWithResponse call
func ParsePatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse(rsp *http.Response) (*PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdArtefactsArtefactIdVersionsVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtefactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse parses an HTTP response from a GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdWithResponse call
func ParseGetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypeEnvTypeUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypesResponse parses an HTTP response from a GetOrgsOrgIdEnvTypesWithResponse call
func ParseGetOrgsOrgIdEnvTypesResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdEnvTypesResponse parses an HTTP response from a PostOrgsOrgIdEnvTypesWithResponse call
func ParsePostOrgsOrgIdEnvTypesResponse(rsp *http.Response) (*PostOrgsOrgIdEnvTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdEnvTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse parses an HTTP response from a DeleteOrgsOrgIdEnvTypesEnvTypeIdWithResponse call
func ParseDeleteOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdEnvTypesEnvTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []struct {
			AdditionalProperties map[string]string `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse parses an HTTP response from a GetOrgsOrgIdEnvTypesEnvTypeIdWithResponse call
func ParseGetOrgsOrgIdEnvTypesEnvTypeIdResponse(rsp *http.Response) (*GetOrgsOrgIdEnvTypesEnvTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEnvTypesEnvTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdEventsResponse parses an HTTP response from a GetOrgsOrgIdEventsWithResponse call
func ParseGetOrgsOrgIdEventsResponse(rsp *http.Response) (*GetOrgsOrgIdEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdImagesResponse parses an HTTP response from a GetOrgsOrgIdImagesWithResponse call
func ParseGetOrgsOrgIdImagesResponse(rsp *http.Response) (*GetOrgsOrgIdImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdImagesImageIdResponse parses an HTTP response from a GetOrgsOrgIdImagesImageIdWithResponse call
func ParseGetOrgsOrgIdImagesImageIdResponse(rsp *http.Response) (*GetOrgsOrgIdImagesImageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdImagesImageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdImagesImageIdBuildsResponse parses an HTTP response from a GetOrgsOrgIdImagesImageIdBuildsWithResponse call
func ParseGetOrgsOrgIdImagesImageIdBuildsResponse(rsp *http.Response) (*GetOrgsOrgIdImagesImageIdBuildsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdImagesImageIdBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageBuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdImagesImageIdBuildsResponse parses an HTTP response from a PostOrgsOrgIdImagesImageIdBuildsWithResponse call
func ParsePostOrgsOrgIdImagesImageIdBuildsResponse(rsp *http.Response) (*PostOrgsOrgIdImagesImageIdBuildsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdImagesImageIdBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdInvitationsResponse parses an HTTP response from a GetOrgsOrgIdInvitationsWithResponse call
func ParseGetOrgsOrgIdInvitationsResponse(rsp *http.Response) (*GetOrgsOrgIdInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserInviteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdInvitationsResponse parses an HTTP response from a PostOrgsOrgIdInvitationsWithResponse call
func ParsePostOrgsOrgIdInvitationsResponse(rsp *http.Response) (*PostOrgsOrgIdInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesResponse parses an HTTP response from a GetOrgsOrgIdRegistriesWithResponse call
func ParseGetOrgsOrgIdRegistriesResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdRegistriesResponse parses an HTTP response from a PostOrgsOrgIdRegistriesWithResponse call
func ParsePostOrgsOrgIdRegistriesResponse(rsp *http.Response) (*PostOrgsOrgIdRegistriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdRegistriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a DeleteOrgsOrgIdRegistriesRegIdWithResponse call
func ParseDeleteOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdRegistriesRegIdResponse parses an HTTP response from a PatchOrgsOrgIdRegistriesRegIdWithResponse call
func ParsePatchOrgsOrgIdRegistriesRegIdResponse(rsp *http.Response) (*PatchOrgsOrgIdRegistriesRegIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdRegistriesRegIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdRegistriesRegIdCredsResponse parses an HTTP response from a GetOrgsOrgIdRegistriesRegIdCredsWithResponse call
func ParseGetOrgsOrgIdRegistriesRegIdCredsResponse(rsp *http.Response) (*GetOrgsOrgIdRegistriesRegIdCredsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdRegistriesRegIdCredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryCredsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountTypesResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountTypesWithResponse call
func ParseGetOrgsOrgIdResourcesAccountTypesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountsResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountsWithResponse call
func ParseGetOrgsOrgIdResourcesAccountsResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesAccountsResponse parses an HTTP response from a PostOrgsOrgIdResourcesAccountsWithResponse call
func ParsePostOrgsOrgIdResourcesAccountsResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesAccountsAccIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesAccountsAccIdWithResponse call
func ParseGetOrgsOrgIdResourcesAccountsAccIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesAccountsAccIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse parses an HTTP response from a PatchOrgsOrgIdResourcesAccountsAccIdWithResponse call
func ParsePatchOrgsOrgIdResourcesAccountsAccIdResponse(rsp *http.Response) (*PatchOrgsOrgIdResourcesAccountsAccIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdResourcesAccountsAccIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsWithResponse call
func ParseGetOrgsOrgIdResourcesDefsResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDefsResponse parses an HTTP response from a PostOrgsOrgIdResourcesDefsWithResponse call
func ParsePostOrgsOrgIdResourcesDefsResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDefsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParseGetOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdResourcesDefsDefIdResponse parses an HTTP response from a PatchOrgsOrgIdResourcesDefsDefIdWithResponse call
func ParsePatchOrgsOrgIdResourcesDefsDefIdResponse(rsp *http.Response) (*PatchOrgsOrgIdResourcesDefsDefIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdResourcesDefsDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse parses an HTTP response from a PostOrgsOrgIdResourcesDefsDefIdCriteriaWithResponse call
func ParsePostOrgsOrgIdResourcesDefsDefIdCriteriaResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDefsDefIdCriteriaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MatchingCriteriaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDefsDefIdCriteriaCriteriaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest []ResourceDefinitionChangeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse parses an HTTP response from a GetOrgsOrgIdResourcesDefsDefIdResourcesWithResponse call
func ParseGetOrgsOrgIdResourcesDefsDefIdResourcesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDefsDefIdResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDefsDefIdResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDriversResponse parses an HTTP response from a GetOrgsOrgIdResourcesDriversWithResponse call
func ParseGetOrgsOrgIdResourcesDriversResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDriversResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDriversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdResourcesDriversResponse parses an HTTP response from a PostOrgsOrgIdResourcesDriversWithResponse call
func ParsePostOrgsOrgIdResourcesDriversResponse(rsp *http.Response) (*PostOrgsOrgIdResourcesDriversResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdResourcesDriversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a DeleteOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParseDeleteOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a GetOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParseGetOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutOrgsOrgIdResourcesDriversDriverIdResponse parses an HTTP response from a PutOrgsOrgIdResourcesDriversDriverIdWithResponse call
func ParsePutOrgsOrgIdResourcesDriversDriverIdResponse(rsp *http.Response) (*PutOrgsOrgIdResourcesDriversDriverIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrgsOrgIdResourcesDriversDriverIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DriverDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchOrgsOrgIdResourcesStaticDefIdResponse parses an HTTP response from a PatchOrgsOrgIdResourcesStaticDefIdWithResponse call
func ParsePatchOrgsOrgIdResourcesStaticDefIdResponse(rsp *http.Response) (*PatchOrgsOrgIdResourcesStaticDefIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrgsOrgIdResourcesStaticDefIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaticDefinitionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdResourcesTypesResponse parses an HTTP response from a GetOrgsOrgIdResourcesTypesWithResponse call
func ParseGetOrgsOrgIdResourcesTypesResponse(rsp *http.Response) (*GetOrgsOrgIdResourcesTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdResourcesTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdUsersResponse parses an HTTP response from a GetOrgsOrgIdUsersWithResponse call
func ParseGetOrgsOrgIdUsersResponse(rsp *http.Response) (*GetOrgsOrgIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRoleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdUsersResponse parses an HTTP response from a PostOrgsOrgIdUsersWithResponse call
func ParsePostOrgsOrgIdUsersResponse(rsp *http.Response) (*PostOrgsOrgIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileExtendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdWorkloadProfilesResponse parses an HTTP response from a GetOrgsOrgIdWorkloadProfilesWithResponse call
func ParseGetOrgsOrgIdWorkloadProfilesResponse(rsp *http.Response) (*GetOrgsOrgIdWorkloadProfilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdWorkloadProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdWorkloadProfilesResponse parses an HTTP response from a PostOrgsOrgIdWorkloadProfilesWithResponse call
func ParsePostOrgsOrgIdWorkloadProfilesResponse(rsp *http.Response) (*PostOrgsOrgIdWorkloadProfilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdWorkloadProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdResponse parses an HTTP response from a DeleteOrgsOrgIdWorkloadProfilesProfileIdWithResponse call
func ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdResponse(rsp *http.Response) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdWorkloadProfilesProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse parses an HTTP response from a PostOrgsOrgIdWorkloadProfilesProfileIdVersionsWithResponse call
func ParsePostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse(rsp *http.Response) (*PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrgsOrgIdWorkloadProfilesProfileIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse parses an HTTP response from a DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionWithResponse call
func ParseDeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse(rsp *http.Response) (*DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgsOrgIdWorkloadProfilesProfileIdVersionsVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdWorkloadProfilesProfileQidResponse parses an HTTP response from a GetOrgsOrgIdWorkloadProfilesProfileQidWithResponse call
func ParseGetOrgsOrgIdWorkloadProfilesProfileQidResponse(rsp *http.Response) (*GetOrgsOrgIdWorkloadProfilesProfileQidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdWorkloadProfilesProfileQidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HumanitecErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse parses an HTTP response from a GetOrgsOrgIdWorkloadProfilesProfileQidVersionsWithResponse call
func ParseGetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse(rsp *http.Response) (*GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrgsOrgIdWorkloadProfilesProfileQidVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkloadProfileVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTokensResponse parses an HTTP response from a GetTokensWithResponse call
func ParseGetTokensResponse(rsp *http.Response) (*GetTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTokensTokenIdResponse parses an HTTP response from a DeleteTokensTokenIdWithResponse call
func ParseDeleteTokensTokenIdResponse(rsp *http.Response) (*DeleteTokensTokenIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
